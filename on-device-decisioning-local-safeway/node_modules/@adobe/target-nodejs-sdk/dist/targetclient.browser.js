/**
 * @adobe/target-nodejs-sdk v.2.4.2
 * Copyright 2019 Adobe. All rights reserved.
 * This file is licensed to you under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License. You may obtain a copy
 * of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under
 * the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
 * OF ANY KIND, either express or implied. See the License for the specific language
 * governing permissions and limitations under the License.
 */

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('punycode'), require('crypto'), require('https'), require('http')) :
  typeof define === 'function' && define.amd ? define(['punycode', 'crypto', 'https', 'http'], factory) :
  (global = global || self, global.TargetClient = factory(global.punycode, global.crypto, global.https, global.http));
}(this, (function (punycode, crypto, https, http) { 'use strict';

  punycode = punycode && Object.prototype.hasOwnProperty.call(punycode, 'default') ? punycode['default'] : punycode;
  crypto = crypto && Object.prototype.hasOwnProperty.call(crypto, 'default') ? crypto['default'] : crypto;
  https = https && Object.prototype.hasOwnProperty.call(https, 'default') ? https['default'] : https;
  http = http && Object.prototype.hasOwnProperty.call(http, 'default') ? http['default'] : http;

  var global$1 =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof self !== 'undefined' && self) ||
    (typeof global$1 !== 'undefined' && global$1);

  var support = {
    searchParams: 'URLSearchParams' in global$1,
    iterable: 'Symbol' in global$1 && 'iterator' in Symbol,
    blob:
      'FileReader' in global$1 &&
      'Blob' in global$1 &&
      (function() {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in global$1,
    arrayBuffer: 'ArrayBuffer' in global$1
  };

  function isDataView(obj) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function(obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
      throw new TypeError('Invalid character in header field name: "' + name + '"')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items) {
    var iterator = {
      next: function() {
        var value = items.shift();
        return {done: value === undefined, value: value}
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function() {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function(value, name) {
        this.append(name, value);
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function(header) {
        this.append(header[0], header[1]);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function(name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function(name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function(name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function(name) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function(name) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function(name, value) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function(callback, thisArg) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function() {
    var items = [];
    this.forEach(function(value) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function() {
    var items = [];
    this.forEach(function(value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'))
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function(resolve, reject) {
      reader.onload = function() {
        resolve(reader.result);
      };
      reader.onerror = function() {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function(body) {
      /*
        fetch-mock wraps the Response object in an ES6 Proxy to
        provide useful test harness features such as flush. However, on
        ES5 browsers without fetch or Proxy support pollyfills must be used;
        the proxy-pollyfill is unable to proxy an attribute unless it exists
        on the object before the Proxy is created. This change ensures
        Response.bodyUsed exists on the instance, while maintaining the
        semantic of setting Request.bodyUsed in the constructor before
        _initBody is called.
      */
      this.bodyUsed = this.bodyUsed;
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function() {
        var rejected = consumed(this);
        if (rejected) {
          return rejected
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob)
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]))
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob')
        } else {
          return Promise.resolve(new Blob([this._bodyText]))
        }
      };

      this.arrayBuffer = function() {
        if (this._bodyArrayBuffer) {
          var isConsumed = consumed(this);
          if (isConsumed) {
            return isConsumed
          }
          if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
            return Promise.resolve(
              this._bodyArrayBuffer.buffer.slice(
                this._bodyArrayBuffer.byteOffset,
                this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
              )
            )
          } else {
            return Promise.resolve(this._bodyArrayBuffer)
          }
        } else {
          return this.blob().then(readBlobAsArrayBuffer)
        }
      };
    }

    this.text = function() {
      var rejected = consumed(this);
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text')
      } else {
        return Promise.resolve(this._bodyText)
      }
    };

    if (support.formData) {
      this.formData = function() {
        return this.text().then(decode)
      };
    }

    this.json = function() {
      return this.text().then(JSON.parse)
    };

    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input, options) {
    if (!(this instanceof Request)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }

    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if (input.bodyUsed) {
        throw new TypeError('Already read')
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      this.signal = input.signal;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    } else {
      this.url = String(input);
    }

    this.credentials = options.credentials || this.credentials || 'same-origin';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.signal = options.signal || this.signal;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    this._initBody(body);

    if (this.method === 'GET' || this.method === 'HEAD') {
      if (options.cache === 'no-store' || options.cache === 'no-cache') {
        // Search for a '_' parameter in the query string
        var reParamSearch = /([?&])_=[^&]*/;
        if (reParamSearch.test(this.url)) {
          // If it already exists then set the value with the current time
          this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
        } else {
          // Otherwise add a new '_' parameter to the end with the current time
          var reQueryString = /\?/;
          this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
        }
      }
    }
  }

  Request.prototype.clone = function() {
    return new Request(this, {body: this._bodyInit})
  };

  function decode(body) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function(bytes) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
    // https://github.com/github/fetch/issues/748
    // https://github.com/zloirock/core-js/issues/751
    preProcessedHeaders
      .split('\r')
      .map(function(header) {
        return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
      })
      .forEach(function(line) {
        var parts = line.split(':');
        var key = parts.shift().trim();
        if (key) {
          var value = parts.join(':').trim();
          headers.append(key, value);
        }
      });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!(this instanceof Response)) {
      throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
    }
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = options.status === undefined ? 200 : options.status;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = options.statusText === undefined ? '' : '' + options.statusText;
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function() {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function() {
    var response = new Response(null, {status: 0, statusText: ''});
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function(url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    return new Response(null, {status: status, headers: {location: url}})
  };

  var DOMException = global$1.DOMException;
  try {
    new DOMException();
  } catch (err) {
    DOMException = function(message, name) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    DOMException.prototype = Object.create(Error.prototype);
    DOMException.prototype.constructor = DOMException;
  }

  function fetch(input, init) {
    return new Promise(function(resolve, reject) {
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function() {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        setTimeout(function() {
          resolve(new Response(body, options));
        }, 0);
      };

      xhr.onerror = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.ontimeout = function() {
        setTimeout(function() {
          reject(new TypeError('Network request failed'));
        }, 0);
      };

      xhr.onabort = function() {
        setTimeout(function() {
          reject(new DOMException('Aborted', 'AbortError'));
        }, 0);
      };

      function fixUrl(url) {
        try {
          return url === '' && global$1.location.href ? global$1.location.href : url
        } catch (e) {
          return url
        }
      }

      xhr.open(request.method, fixUrl(request.url), true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr) {
        if (support.blob) {
          xhr.responseType = 'blob';
        } else if (
          support.arrayBuffer &&
          request.headers.get('Content-Type') &&
          request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
        ) {
          xhr.responseType = 'arraybuffer';
        }
      }

      if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
        Object.getOwnPropertyNames(init.headers).forEach(function(name) {
          xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
        });
      } else {
        request.headers.forEach(function(value, name) {
          xhr.setRequestHeader(name, value);
        });
      }

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function() {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!global$1.fetch) {
    global$1.fetch = fetch;
    global$1.Headers = Headers;
    global$1.Request = Request;
    global$1.Response = Response;
  }

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */

  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
    if (val === null || val === undefined) {
      throw new TypeError('Object.assign cannot be called with null or undefined');
    }

    return Object(val);
  }

  function shouldUseNative() {
    try {
      if (!Object.assign) {
        return false;
      } // Detect buggy property enumeration order in older V8 versions.
      // https://bugs.chromium.org/p/v8/issues/detail?id=4118


      var test1 = new String('abc'); // eslint-disable-line no-new-wrappers

      test1[5] = 'de';

      if (Object.getOwnPropertyNames(test1)[0] === '5') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test2 = {};

      for (var i = 0; i < 10; i++) {
        test2['_' + String.fromCharCode(i)] = i;
      }

      var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
        return test2[n];
      });

      if (order2.join('') !== '0123456789') {
        return false;
      } // https://bugs.chromium.org/p/v8/issues/detail?id=3056


      var test3 = {};
      'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
        test3[letter] = letter;
      });

      if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
        return false;
      }

      return true;
    } catch (err) {
      // We don't expect any of the above to throw, but better to be safe.
      return false;
    }
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
    var from;
    var to = toObject(target);
    var symbols;

    for (var s = 1; s < arguments.length; s++) {
      from = Object(arguments[s]);

      for (var key in from) {
        if (hasOwnProperty.call(from, key)) {
          to[key] = from[key];
        }
      }

      if (getOwnPropertySymbols) {
        symbols = getOwnPropertySymbols(from);

        for (var i = 0; i < symbols.length; i++) {
          if (propIsEnumerable.call(from, symbols[i])) {
            to[symbols[i]] = from[symbols[i]];
          }
        }
      }
    }

    return to;
  };

  var reactorObjectAssign = objectAssign;

  /**
   * Checks if `value` is `null` or `undefined`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
   * @example
   *
   * _.isNil(null);
   * // => true
   *
   * _.isNil(void 0);
   * // => true
   *
   * _.isNil(NaN);
   * // => false
   */
  function isNil(value) {
    return value == null;
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  const {
    isArray
  } = Array;

  const {
    prototype: objectProto
  } = Object;
  const {
    toString: nativeObjectToString
  } = objectProto;

  function objectToString(value) {
    return nativeObjectToString.call(value);
  }
  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */


  function baseGetTag(value) {
    return objectToString(value);
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    const type = typeof value;
    /* eslint-disable */

    const notNull = value != null;
    /* eslint-enable */

    return notNull && (type === "object" || type === "function");
  }

  /** `Object#toString` result references. */

  const funcTag = "[object Function]";
  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */

  function isFunction(value) {
    if (!isObject(value)) {
      return false;
    } // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.


    return baseGetTag(value) === funcTag;
  }

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity(value) {
    return value;
  }

  /**
   * Casts `value` to `identity` if it's not a function.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Function} Returns cast function.
   */

  function castFunction(value) {
    return isFunction(value) ? value : identity;
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */

  function keys(object) {
    if (isNil(object)) {
      return [];
    }

    return Object.keys(object);
  }

  const arrayEach = (iteratee, collection) => collection.forEach(iteratee);

  const baseEach = (iteratee, collection) => {
    arrayEach(key => iteratee(collection[key], key), keys(collection));
  };

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */

  function flatten(array) {
    if (isNil(array)) {
      return [];
    }
    /* eslint-disable */


    return [].concat.apply([], array);
    /* eslint-enable */
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    /* eslint-disable */
    const notNull = value != null;
    /* eslint-enable */

    return notNull && typeof value === "object";
  }

  /** `Object#toString` result references. */

  const stringTag = "[object String]";
  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a string, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */

  function isString(value) {
    return typeof value === "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) === stringTag;
  }

  /** Used as references for various `Number` constants. */
  const MAX_SAFE_INTEGER = 9007199254740991;
  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */

  function isLength(value) {
    return typeof value === "number" && value > -1 && value % 1 === 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */

  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  const arrayMap = (iteratee, collection) => collection.map(iteratee);

  function baseValues(props, object) {
    return arrayMap(key => object[key], props);
  }

  function copyArray(source) {
    let index = 0;
    const {
      length
    } = source;
    const array = Array(length);

    while (index < length) {
      array[index] = source[index];
      index += 1;
    }

    return array;
  }

  function stringToArray(str) {
    return str.split("");
  }
  /**
   * Converts `value` to an array.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Array} Returns the converted array.
   * @example
   *
   * _.toArray({ 'a': 1, 'b': 2 });
   * // => [1, 2]
   *
   * _.toArray('abc');
   * // => ['a', 'b', 'c']
   *
   * _.toArray(1);
   * // => []
   *
   * _.toArray(null);
   * // => []
   */


  function toArray(value) {
    if (isNil(value)) {
      return [];
    }

    if (isArrayLike(value)) {
      return isString(value) ? stringToArray(value) : copyArray(value);
    }

    return baseValues(keys(value), value);
  }

  /**
   * Checks if `value` is in `collection`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Array|Object} collection The collection to inspect.
   * @param {*} value The value to search for.
   * @returns {boolean} Returns `true` if `value` is found, else `false`.
   * @example
   *
   * _.includes([1, 2, 3], 1);
   * // => true
   *
   * _.includes([1, 2, 3], 1, 2);
   * // => false
   *
   * _.includes({ 'a': 1, 'b': 2 }, 1);
   * // => true
   *
   */

  function includes(value, collection) {
    const coll = isArrayLike(collection) ? collection : toArray(collection);
    return coll.indexOf(value) > -1;
  }

  const {
    prototype: objectProto$1
  } = Object;
  const {
    hasOwnProperty: hasOwnProperty$1
  } = objectProto$1;
  /**
   * Checks if `value` is an empty object, collection, map, or set.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */

  function isEmpty(value) {
    if (value == null) {
      return true;
    }

    if (isArrayLike(value) && (isArray(value) || isString(value) || isFunction(value.splice))) {
      return !value.length;
    }
    /* eslint-disable */


    for (const key in value) {
      if (hasOwnProperty$1.call(value, key)) {
        return false;
      }
    }
    /* eslint-enable */


    return true;
  }

  const {
    prototype: stringProto
  } = String;
  const {
    trim: nativeStringTrim
  } = stringProto;

  function trim(string) {
    return isNil(string) ? "" : nativeStringTrim.call(string);
  }

  /**
   * Checks if `value` is a blank string.
   *
   * Objects are considered empty if they have no own enumerable string keyed
   * properties.
   *
   * Array-like values such as `arguments` objects, arrays, buffers, strings, or
   * jQuery-like collections are considered empty if they have a `length` of `0`.
   * Similarly, maps and sets are considered empty if they have a `size` of `0`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isBlank(null);
   * // => true
   *
   * _.isBlank(undefined);
   * // => true
   *
   * _.isBlank('');
   * // => true
   *
   * * _.isBlank('   ');
   * // => true
   */

  function isBlank(value) {
    return isString(value) ? !trim(value) : isEmpty(value);
  }

  /** `Object#toString` result references. */

  const numberTag = "[object Number]";
  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
   * classified as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a number, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */

  function isNumber(value) {
    return typeof value === "number" || isObjectLike(value) && baseGetTag(value) === numberTag;
  }

  const objectTag = "[object Object]";
  const {
    prototype: funcProto
  } = Function;
  const {
    prototype: objectProto$2
  } = Object;
  const {
    toString: funcToString
  } = funcProto;
  const {
    hasOwnProperty: hasOwnProperty$2
  } = objectProto$2;
  const objectCtorString = funcToString.call(Object);

  function getPrototype(value) {
    return Object.getPrototypeOf(Object(value));
  }
  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */


  function isPlainObject(value) {
    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {
      return false;
    }

    const proto = getPrototype(value);

    if (proto === null) {
      return true;
    }

    const Ctor = hasOwnProperty$2.call(proto, "constructor") && proto.constructor;
    return typeof Ctor === "function" && Ctor instanceof Ctor && funcToString.call(Ctor) === objectCtorString;
  }

  function join(joiner, collection) {
    if (!isArray(collection)) {
      return "";
    }

    return collection.join(joiner || "");
  }

  function now() {
    return new Date().getTime();
  }

  const arrayReduce = (iteratee, accumulator, collection) => collection.reduce(iteratee, accumulator);

  const baseReduce = (iteratee, accumulator, collection) => {
    let localAcc = accumulator;
    baseEach((value, key) => {
      localAcc = iteratee(localAcc, value, key);
    }, collection);
    return localAcc;
  };
  /**
   * Reduces `collection` to a value which is the accumulated result of running
   * each element in `collection` thru `iteratee`, where each successive
   * invocation is supplied the return value of the previous. If `accumulator`
   * is not given, the first element of `collection` is used as the initial
   * value. The iteratee is invoked with four arguments:
   * (accumulator, value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.reduce`, `_.reduceRight`, and `_.transform`.
   *
   * The guarded methods are:
   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
   * and `sortBy`
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Collection
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {Array|Object} collection The collection to iterate over.
   * @returns {*} Returns the accumulated value.
   * @see _.reduceRight
   * @example
   *
   * _.reduce(function(sum, n) {
   *   return sum + n;
   * }, 0, [1, 2]);
   * // => 3
   *
   * _.reduce(function(result, value, key) {
   *   (result[value] || (result[value] = [])).push(key);
   *   return result;
   * }, {}, { 'a': 1, 'b': 2, 'c': 1 });
   * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
   */


  function reduce(iteratee, accumulator, collection) {
    if (isNil(collection)) {
      return accumulator;
    }

    const func = isArray(collection) ? arrayReduce : baseReduce;
    return func(castFunction(iteratee), accumulator, collection);
  }

  /**
   *
   * @param {Object<any,any>} obj
   * @return {Array<any>}
   */
  function values(obj) {
    if (obj === null || typeof obj !== "object") {
      return [];
    }

    return Object.keys(obj).map(key => obj[key]);
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      enumerableOnly && (symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      })), keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = null != arguments[i] ? arguments[i] : {};
      i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  /* eslint-disable import/prefer-default-export */
  const DECISIONING_METHOD = {
    ON_DEVICE: "on-device",
    SERVER_SIDE: "server-side",
    HYBRID: "hybrid"
  };
  const EXECUTION_MODE = {
    EDGE: "edge",
    LOCAL: "local"
  };

  /* eslint-disable import/prefer-default-export */
  const AT_PREFIX = "AT:";
  const NOOP_LOGGER = {
    // eslint-disable-next-line no-unused-vars
    debug() {},

    // eslint-disable-next-line no-unused-vars
    error() {}

  };
  function getLogger() {
    let logger = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    // don't do anything if the logger was previously built
    if (logger.built) {
      return logger;
    }

    const {
      debug,
      error
    } = logger;
    const targetLogger = reactorObjectAssign({
      built: true
    }, NOOP_LOGGER);

    if (isFunction(debug)) {
      targetLogger.debug = function () {
        for (var _len = arguments.length, messages = new Array(_len), _key = 0; _key < _len; _key++) {
          messages[_key] = arguments[_key];
        }

        logger.debug.apply(null, [AT_PREFIX, ...messages]);
      };
    }

    if (isFunction(error)) {
      targetLogger.error = function () {
        for (var _len2 = arguments.length, messages = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          messages[_key2] = arguments[_key2];
        }

        logger.error.apply(null, [AT_PREFIX, ...messages]);
      };
    }

    return targetLogger;
  }

  /* eslint-disable import/prefer-default-export */
  const ATTRIBUTE_NOT_EXIST = (keyName, mboxName) => `Attribute '${keyName}' does not exist for mbox '${mboxName}'`;
  const DECISIONING_ENGINE_NOT_READY = "Unable to fulfill request; decisioning engine not ready.";
  const PROPERTY_TOKEN_MISMATCH = (requestProperty, configProperty) => `The property token specified in the request "${requestProperty}" does not match the one specified in the config "${configProperty}".`;
  const NOTIFICATIONS_REQUIRED = "Notifications array is required in request";

  /* eslint-disable import/prefer-default-export */
  const DEFAULT_GLOBAL_MBOX = "target-global-mbox";
  const DEFAULT_NUM_FETCH_RETRIES = 10;

  /**
   *
   * @type {{Web: string, Mobile: string}}
   */

  const ChannelType = {
    Mobile: "mobile",
    Web: "web"
  };
  /**
   *
   * @type {{Click: string, Display: string}}
   */

  const MetricType = {
    Click: "click",
    Display: "display"
  };
  /**
   *
   * @type {{Authenticated: string, Unknown: string, LoggedOut: string}}
   */

  const AuthenticatedState = {
    Unknown: "unknown",
    Authenticated: "authenticated",
    LoggedOut: "logged_out"
  };
  const EMPTY_REQUEST = {
    context: {
      channel: ChannelType.Web
    }
  };
  const ENVIRONMENT_PROD = "production";
  const UNKNOWN_IP_ADDRESS = "unknownIpAddress";

  const VIEWS = "views";
  const MBOXES = "mboxes";
  function isUndefined(value) {
    return typeof value === "undefined";
  }
  function isDefined(value) {
    return !isUndefined(value);
  }
  function isPojo(obj) {
    if (isUndefined(obj) || obj === null || !isObject(obj)) {
      return false;
    }

    return Object.getPrototypeOf(obj) === Object.prototype;
  }
  /**
   *
   * @param {"mboxes"|"views"} itemsKey
   * @param {import("../delivery-api-client/models/DeliveryRequest").DeliveryRequest} deliveryRequest Target Delivery API request
   * @returns {Set<String>} Set of names
   */

  function getNamesForRequested(itemsKey, deliveryRequest) {
    const resultSet = new Set();
    ["prefetch", "execute"].forEach(type => {
      if (!deliveryRequest || !deliveryRequest[type]) {
        return;
      }

      const items = deliveryRequest[type][itemsKey] instanceof Array ? deliveryRequest[type][itemsKey] : [];
      items.filter(item => isDefined(item.name)).forEach(item => {
        resultSet.add(item.name);
      });
    });
    return resultSet;
  }
  /**
   * @param {import("../delivery-api-client/models/DeliveryRequest").DeliveryRequest} deliveryRequest Target Delivery API request, required
   * @returns {Set<String>} Set of mbox names
   */


  function getMboxNames(deliveryRequest) {
    return getNamesForRequested(MBOXES, deliveryRequest);
  }
  /**
   * @param {import("../delivery-api-client/models/DeliveryRequest").DeliveryRequest} deliveryRequest Target Delivery API request, required
   * @returns {Set<String>} Set of view names
   */

  function getViewNames(deliveryRequest) {
    return getNamesForRequested(VIEWS, deliveryRequest);
  }
  /**
   * @param {"mboxes"|"views"} itemsKey
   * @param {import("../delivery-api-client/models/DeliveryRequest").DeliveryRequest} deliveryRequest Target Delivery API request, required
   * @returns {boolean}
   */

  function hasRequested(itemsKey, deliveryRequest) {
    const types = ["prefetch", "execute"];

    for (let i = 0; i < types.length; i += 1) {
      const type = types[i];
      const items = deliveryRequest && deliveryRequest[type] && deliveryRequest[type][itemsKey] instanceof Array ? deliveryRequest[type][itemsKey] : undefined;

      if (isDefined(items) && items instanceof Array) {
        return true;
      }
    }

    return false;
  }
  /**
   *
   * @param {import("../delivery-api-client/models/DeliveryRequest").DeliveryRequest} deliveryRequest Target Delivery API request, required
   * @returns {boolean}
   */


  function hasRequestedViews(deliveryRequest) {
    return hasRequested(VIEWS, deliveryRequest);
  }
  /**
   * addMboxesToRequest method.  Ensures the mboxes specified are part of the returned delivery request
   * @param {Array<String>} mboxNames A list of mbox names that contains JSON content attributes, required
   * @param {import("../delivery-api-client/models/DeliveryRequest").DeliveryRequest} request Target View Delivery API request, required
   * @param { 'execute'|'prefetch' } requestType
   */

  function addMboxesToRequest(mboxNames, request) {
    let requestType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "execute";
    const requestedMboxes = getMboxNames(request); // returns a set

    const mboxes = [];

    if (request && request[requestType] && request[requestType].mboxes instanceof Array) {
      Array.prototype.push.apply(mboxes, request[requestType].mboxes);
    }

    const highestUserSpecifiedIndex = mboxes.reduce((highest, mbox) => Math.max(highest, isNumber(mbox.index) ? mbox.index : 0), 0);
    let nextIndex = highestUserSpecifiedIndex + 1;
    mboxNames.filter(mboxName => !requestedMboxes.has(mboxName)).forEach(mboxName => {
      mboxes.push({
        name: mboxName,
        index: nextIndex
      });
      nextIndex += 1;
    });

    const result = _objectSpread2({}, request);

    result[requestType] = _objectSpread2(_objectSpread2({}, request[requestType]), {}, {
      mboxes
    });
    return result;
  }
  function isBrowser() {
    return typeof window !== "undefined";
  }
  function isNodeJS() {
    return typeof global !== "undefined";
  }
  const noop = () => undefined;
  const noopPromise = value => Promise.resolve(value);
  function requiresDecisioningEngine(decisioningMethod) {
    return includes(decisioningMethod, [DECISIONING_METHOD.ON_DEVICE, DECISIONING_METHOD.HYBRID]);
  }
  function decisioningEngineReady(decisioningEngine) {
    return isDefined(decisioningEngine) && decisioningEngine.isReady();
  }
  function objectWithoutUndefinedValues(obj) {
    const result = _objectSpread2({}, obj);

    Object.keys(result).forEach(key => {
      if (isUndefined(result[key])) {
        delete result[key];
      }
    });
    return result;
  }
  /**
   *
   * @param { import("../delivery-api-client/models/Property").Property } property
   */

  function getPropertyToken() {
    let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      token: undefined
    };
    const {
      token = undefined
    } = property;
    return token;
  }
  function getProperty() {
    let config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let request = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let logger = arguments.length > 2 ? arguments[2] : undefined;
    const configPropertyToken = config.propertyToken;
    const requestPropertyToken = getPropertyToken(request.property);
    const propertyToken = requestPropertyToken || configPropertyToken;

    if (isDefined(requestPropertyToken) && requestPropertyToken !== configPropertyToken) {
      getLogger(logger).debug(PROPERTY_TOKEN_MISMATCH(requestPropertyToken, configPropertyToken));
    }

    return propertyToken ? {
      token: propertyToken
    } : undefined;
  }
  function isValidIpAddress(ipAddress) {
    const IP_ADDRESS = /((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))/g;
    return isString(ipAddress) && IP_ADDRESS.test(ipAddress);
  }
  function memoize(func) {
    let keyResolverFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : arr => arr[0];
    const memoizedValues = {};
    return function memoized() {
      for (var _len = arguments.length, funcArgs = new Array(_len), _key = 0; _key < _len; _key++) {
        funcArgs[_key] = arguments[_key];
      }

      const key = keyResolverFunc.call(this, funcArgs);

      if (!isDefined(memoizedValues[key])) {
        memoizedValues[key] = func.call(null, ...funcArgs);
      }

      return memoizedValues[key];
    };
  }
  function isExecutePageLoad(request) {
    return !!request.execute && !!request.execute.pageLoad;
  }
  function executeMboxCount(request) {
    return !!request.execute && !!request.execute.mboxes && request.execute.mboxes.length || 0;
  }
  function isPrefetchPageLoad(request) {
    return !!request.prefetch && !!request.prefetch.pageLoad;
  }
  function prefetchMboxCount(request) {
    return !!request.prefetch && !!request.prefetch.mboxes && request.prefetch.mboxes.length || 0;
  }
  function prefetchViewCount(request) {
    return !!request.prefetch && !!request.prefetch.views && request.prefetch.views.length || 0;
  }
  function formatDecimal(value) {
    let digits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

    if (!value || !isNumber(value)) {
      return undefined;
    }

    return +value.toFixed(digits);
  }

  const NOT_MODIFIED = 304;
  function getFetchApi(fetchApi) {
    if (isFunction(fetchApi)) {
      return fetchApi;
    }

    let api;

    if (isNodeJS() && typeof global.fetch === "function") {
      api = global.fetch;
    } else if (isBrowser() && // eslint-disable-next-line no-undef
    typeof window.fetch === "function") {
      // eslint-disable-next-line no-undef
      api = window.fetch.bind(window);
    }

    return api;
  }
  function getFetchWithRetry(fetchApi) {
    let maxRetries = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_NUM_FETCH_RETRIES;
    let errorFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : errorMessage => errorMessage;
    let incidentalFailureCallback = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noop;
    return function fetchWithRetry(url, options) {
      let numRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : maxRetries;
      return fetchApi(url, options).then(res => {
        if (!res.ok && res.status !== NOT_MODIFIED) {
          throw Error(res.statusText);
        }

        return res;
      }).catch(err => {
        if (isFunction(incidentalFailureCallback)) {
          incidentalFailureCallback.call(undefined, err);
        }

        if (numRetries < 1) {
          throw new Error(errorFunc(err.message));
        } // TODO: Enhance this to do Exponential Backoff


        return fetchWithRetry(url, options, numRetries - 1);
      });
    };
  }

  /**
   * @param {import("../delivery-api-client/models/DeliveryResponse").DeliveryResponse} response
   */

  function createIndexed(response) {
    const result = {};
    ["prefetch", "execute"].forEach(requestType => {
      if (isDefined(response[requestType]) && isDefined(response[requestType].mboxes) && response[requestType].mboxes instanceof Array) {
        response[requestType].mboxes.forEach(mbox => {
          const {
            name,
            options = []
          } = mbox;
          options.forEach(option => {
            const {
              type,
              content
            } = option;

            if (type === "json" && isDefined(content)) {
              result[name] = reactorObjectAssign({}, result[name], content);
            }
          });
        });
      }
    });
    return result;
  }
  /**
   * @param { TargetDeliveryResponse } offersResponse
   */


  function AttributesProvider(offersResponse) {
    const indexed = createIndexed(offersResponse.response);

    function getValue(mboxName, key) {
      if (!Object.prototype.hasOwnProperty.call(indexed, mboxName) || !Object.prototype.hasOwnProperty.call(indexed[mboxName], key)) {
        return new Error(ATTRIBUTE_NOT_EXIST(key, mboxName));
      }

      return indexed[mboxName][key];
    }
    /**
     * @param {string} mboxName
     */


    function getAsObject(mboxName) {
      if (isUndefined(mboxName)) {
        return _objectSpread2({}, indexed);
      }

      return _objectSpread2({}, indexed[mboxName]);
    }

    return {
      getValue: (mboxName, key) => getValue(mboxName, key),
      asObject: mboxName => getAsObject(mboxName),
      toJSON: () => getAsObject(undefined),
      getResponse: () => offersResponse
    };
  }

  /* eslint-disable import/prefer-default-export */

  function TargetEvent(type) {
    let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.type = type;
    Object.keys(payload).forEach(key => {
      this[key] = payload[key];
    });
  }
  /**
   *
   * @param {Object.<String, Function>} events
   */


  function EventProvider() {
    let events = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const subscriptions = {};
    let subscriptionCount = 0;
    /**
     *
     * @param {String} eventName
     * @param {Function} callbackFunc
     * @return {string}
     */

    function subscribe(eventName, callbackFunc) {
      subscriptionCount += 1;

      if (isUndefined(subscriptions[eventName])) {
        subscriptions[eventName] = {};
      }

      subscriptions[eventName][subscriptionCount] = callbackFunc;
      return `${eventName}:${subscriptionCount}`;
    }
    /**
     *
     * @param {String} id
     */


    function unsubscribe(id) {
      const [eventName, eventId] = id.split(":");

      if (isDefined(subscriptions[eventName])) {
        delete subscriptions[eventName][eventId];
      }
    }
    /**
     *
     * @param {String} eventName
     * @param {Object} payload
     */


    function emit(eventName) {
      let payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      const subscribed = subscriptions[eventName] || [];
      values(subscribed).forEach(subscriber => subscriber.call(undefined, new TargetEvent(eventName, payload)));
    }

    Object.keys(events).forEach(eventName => subscribe(eventName, events[eventName]));
    return {
      subscribe,
      unsubscribe,
      emit
    };
  }

  /*
  Copyright 2021 Adobe. All rights reserved.
  This file is licensed to you under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under
  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
  OF ANY KIND, either express or implied. See the License for the specific language
  governing permissions and limitations under the License.
  */
  function InMemoryTelemetryStore() {
    let telemetryEntries = [];

    function addEntry(entry) {
      telemetryEntries.push(entry);
    }

    function getAndClearEntries() {
      const allEntries = telemetryEntries;
      telemetryEntries = [];
      return allEntries;
    }

    function hasEntries() {
      return telemetryEntries.length > 0;
    }

    return {
      addEntry,
      getAndClearEntries,
      hasEntries
    };
  }

  /* eslint-disable import/prefer-default-export */
  /**
   * The get TelemetryProvider initialization method
   * @param {Boolean} telemetryEnabled whether or not the SDK will collect telemetry data - default: true, optional
   * @param {String} method offer decisioning method that was configured during TargetClient.create() - default: server-side, optional
   * @param {Function} telemetryStore data store for collected telemetry - default: InMemoryTelemetryStore, optional
   */

  function TelemetryProvider() {
    let telemetryEnabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    let method = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DECISIONING_METHOD.SERVER_SIDE;
    let telemetryStore = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : InMemoryTelemetryStore();

    function getMode(response) {
      return response.edgeHost ? EXECUTION_MODE.EDGE : EXECUTION_MODE.LOCAL;
    }

    function getFeatures(request) {
      const features = {};
      const executePageLoad = isExecutePageLoad(request);
      const executeMbox = executeMboxCount(request);
      const prefetchPageLoad = isPrefetchPageLoad(request);
      const prefetchMbox = prefetchMboxCount(request);
      const prefetchView = prefetchViewCount(request);

      if (executePageLoad) {
        features.executePageLoad = executePageLoad;
      }

      if (executeMbox) {
        features.executeMboxCount = executeMbox;
      }

      if (prefetchPageLoad) {
        features.prefetchPageLoad = prefetchPageLoad;
      }

      if (prefetchMbox) {
        features.prefetchMboxCount = prefetchMbox;
      }

      if (prefetchView) {
        features.prefetchViewCount = prefetchView;
      }

      return features;
    }

    function normalizeEntryRequest(entryRequest) {
      const normalized = {};

      if (entryRequest.dns) {
        normalized.dns = formatDecimal(entryRequest.dns);
      }

      if (entryRequest.tls) {
        normalized.tls = formatDecimal(entryRequest.tls);
      }

      if (entryRequest.timeToFirstByte) {
        normalized.timeToFirstByte = formatDecimal(entryRequest.timeToFirstByte);
      }

      if (entryRequest.download) {
        normalized.download = formatDecimal(entryRequest.download);
      }

      if (entryRequest.responseSize) {
        normalized.responseSize = formatDecimal(entryRequest.responseSize);
      }

      return normalized;
    }

    function normalizeEntry(entry) {
      const normalized = {};

      if (entry.execution) {
        normalized.execution = formatDecimal(entry.execution);
      }

      if (entry.parsing) {
        normalized.parsing = formatDecimal(entry.parsing);
      }

      if (entry.request) {
        normalized.request = normalizeEntryRequest(entry.request);
      }

      return reactorObjectAssign(entry, normalized);
    }

    function normalizeAndAddEntry(entry) {
      telemetryStore.addEntry(normalizeEntry(entry));
    }

    function addServerStateEntry(request) {
      if (!telemetryEnabled) {
        return;
      }

      normalizeAndAddEntry({
        requestId: request.requestId,
        timestamp: now()
      });
    }

    function addRenderEntry(renderId, execution) {
      if (!telemetryEnabled) {
        return;
      }

      normalizeAndAddEntry({
        requestId: renderId,
        timestamp: now(),
        execution
      });
    }

    function addRequestEntry(requestId, entry) {
      const requestEntry = reactorObjectAssign(entry, {
        requestId,
        timestamp: now()
      });
      normalizeAndAddEntry(requestEntry);
    }
    /**
     * @param requestId
     * @param {import("@adobe/target-tools/delivery-api-client/models/TelemetryEntry").TelemetryEntry} entry
     */


    function addArtifactRequestEntry(requestId, entry) {
      if (!telemetryEnabled || !entry) {
        return;
      }

      addRequestEntry(requestId, entry);
    }
    /**
     * @param request
     * @param {import("@adobe/target-tools/delivery-api-client/models/TelemetryEntry").TelemetryEntry} entry
     * @param response
     * @param decisioningMethod
     */


    function addDeliveryRequestEntry(request, entry, response) {
      let decisioningMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : method;

      if (!telemetryEnabled || !entry) {
        return;
      }

      const {
        requestId
      } = request;
      const features = reactorObjectAssign(getFeatures(request), {
        decisioningMethod
      });
      const baseEntry = {
        mode: getMode(response),
        features
      };
      const deliveryRequestEntry = reactorObjectAssign(entry, baseEntry);
      addRequestEntry(requestId, deliveryRequestEntry);
    }

    function getAndClearEntries() {
      return telemetryStore.getAndClearEntries();
    }

    function hasEntries() {
      return telemetryStore.hasEntries();
    }

    function addTelemetryToDeliveryRequest(deliveryRequest) {
      if (hasEntries()) {
        return reactorObjectAssign(deliveryRequest, {
          telemetry: {
            entries: getAndClearEntries()
          }
        });
      }

      return deliveryRequest;
    }

    return {
      addDeliveryRequestEntry,
      addArtifactRequestEntry,
      addRenderEntry,
      addServerStateEntry,
      getAndClearEntries,
      hasEntries,
      addTelemetryToDeliveryRequest
    };
  }

  const UNKNOWN = "unknown";

  const withVersion = (matcher, matches) => {
    const version = (matches && matches.length > matcher.versionGroupIndex ? matches[matcher.versionGroupIndex] : matcher.version) || "-1";
    const majorVersion = typeof version === "string" ? parseInt(version.split(".")[0], 10) : -1;
    return {
      name: matcher.name,
      version: majorVersion
    };
  };
  /**
   *
   * @param {Array<Object>} matchersList
   */


  function matchUserAgent(matchersList, processFunc) {
    // eslint-disable-next-line no-param-reassign
    processFunc = typeof processFunc === "function" ? processFunc : matcher => matcher.name;
    return function checkMatches(userAgent) {
      for (let i = 0; i < matchersList.length; i += 1) {
        const matcher = matchersList[i];
        const matches = userAgent.match(matcher.regex);

        if (matches) {
          return processFunc(matcher, matches);
        }
      }

      return processFunc({
        name: UNKNOWN
      });
    };
  }
  /**
   *
   * @param {string} userAgent
   * @return {{name: string, version: number}}
   */


  const browserFromUserAgent = function () {
    let userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return matchUserAgent([{
      name: "Edge",
      regex: /(edge|edgios|edga|edg)\/((\d+)?[\w.]+)/i,
      versionGroupIndex: 2
    }, {
      name: "Mobile Safari",
      regex: /version\/([\w.]+).+?mobile\/\w+\s(safari)/i,
      versionGroupIndex: 1
    }, {
      name: "Safari",
      regex: /version\/([\w.]+).+?(mobile\s?safari|safari)/i,
      versionGroupIndex: 1
    }, {
      name: "Chrome",
      regex: /(chrome)\/v?([\w.]+)/i,
      versionGroupIndex: 2
    }, {
      name: "Firefox",
      regex: /(firefox)\/([\w.-]+)$/i,
      versionGroupIndex: 2
    }, {
      name: "IE",
      regex: /(?:ms|\()(ie)\s([\w.]+)/i,
      versionGroupIndex: 2
    }, {
      name: "IE",
      regex: /(trident).+rv[:\s]([\w.]+).+like\sgecko/i,
      versionGroupIndex: 2,
      version: 11
    }], withVersion)(userAgent);
  };
  /**
   *
   * @param {string} userAgent
   * @return {string}
   */

  const operatingSystemFromUserAgent = userAgent => matchUserAgent([{
    name: "iOS",
    regex: /iPhone|iPad|iPod/
  }, {
    name: "Android",
    regex: /Android [0-9.]+;/
  }, {
    name: "Linux",
    regex: / Linux /
  }, {
    name: "Unix",
    regex: /FreeBSD|OpenBSD|CrOS/
  }, {
    name: "Windows",
    regex: /[( ]Windows /
  }, {
    name: "Mac OS",
    regex: /Macintosh;/
  }])(userAgent);
  /**
   *
   * @param {string} browserUAWithVersion Sec-CH-UA or Sec-CH-UA-Full-Version-List
   * @return {{name: string, version: number}}
   */

  const browserFromClientHintsUA = function () {
    let browserUAWithVersion = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    return matchUserAgent([{
      name: "Chrome",
      versionGroupIndex: 1,
      regex: /Chrome";v="([0-9.]+)"/i
    }, {
      name: "Edge",
      versionGroupIndex: 1,
      regex: /Edge";v="([0-9.]+)"/i
    }, {
      name: "Safari",
      versionGroupIndex: 1,
      regex: /Safari";v="([0-9.]+)"/i
    }, {
      name: "Firefox",
      versionGroupIndex: 1,
      regex: /Firefox";v="([0-9.]+)"/i
    }], withVersion)(browserUAWithVersion);
  };
  /**
   *
   * @param {string} userAgent
   * @param {import("../delivery-api-client/models/ClientHints").ClientHints} clientHints
   * @return {{name: string, version: number}}
   */

  const browserFromUserAgentOrClientHintUA = function () {
    let userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
    let clientHints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const {
      browserUAWithFullVersion,
      browserUAWithMajorVersion
    } = clientHints;
    return reduce((accumulated, current) => ({
      name: current.name !== UNKNOWN ? current.name : accumulated.name,
      version: current.version >= 0 ? current.version : accumulated.version
    }), {
      name: UNKNOWN,
      version: -1
    }, [browserFromUserAgent(userAgent), browserFromClientHintsUA(browserUAWithFullVersion || browserUAWithMajorVersion)]);
  };
  /**
   *
   * @param {string} userAgent
   * @param {import("../delivery-api-client/models/ClientHints").ClientHints} clientHints
   * @return {string}
   */

  const operatingSystemFromUserAgentOrClientHints = function (userAgent) {
    let clientHints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    const {
      platform
    } = clientHints;
    return isDefined(platform) ? platform : operatingSystemFromUserAgent(userAgent);
  };

  /* eslint-disable no-bitwise */

  function mul32(m, n) {
    const nlo = n & 0xffff;
    const nhi = n - nlo;
    return (nhi * m | 0) + (nlo * m | 0) | 0;
  }
  /**
   * Optimized MurmurHash3 (32-bit) hashing algorithm to generate a signed numeric 10-digit hash
   * This method matches the java method used on Target Edge
   * @param stringValue
   * @param seed
   * @returns {number}
   */


  function hashUnencodedCharsRaw(stringValue) {
    let seed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let k1;
    const len = stringValue.length;
    const c1 = 0xcc9e2d51;
    const c2 = 0x1b873593;
    let h1 = seed;
    const roundedEnd = len & ~0x1;

    for (let i = 0; i < roundedEnd; i += 2) {
      k1 = stringValue.charCodeAt(i) | stringValue.charCodeAt(i + 1) << 16;
      k1 = mul32(k1, c1);
      k1 = (k1 & 0x1ffff) << 15 | k1 >>> 17; // ROTL32(k1,15);

      k1 = mul32(k1, c2);
      h1 ^= k1;
      h1 = (h1 & 0x7ffff) << 13 | h1 >>> 19; // ROTL32(h1,13);

      h1 = h1 * 5 + 0xe6546b64 | 0;
    }

    if (len % 2 === 1) {
      k1 = stringValue.charCodeAt(roundedEnd);
      k1 = mul32(k1, c1);
      k1 = (k1 & 0x1ffff) << 15 | k1 >>> 17; // ROTL32(k1,15);

      k1 = mul32(k1, c2);
      h1 ^= k1;
    } // finalization


    h1 ^= len << 1; // fmix(h1);

    h1 ^= h1 >>> 16;
    h1 = mul32(h1, 0x85ebca6b);
    h1 ^= h1 >>> 13;
    h1 = mul32(h1, 0xc2b2ae35);
    h1 ^= h1 >>> 16;
    return h1;
  }

  const hashUnencodedChars = memoize(hashUnencodedCharsRaw, arr => arr.join("-"));

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  var performanceNow = createCommonjsModule(function (module) {
    // Generated by CoffeeScript 1.12.2
    (function () {
      var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

      if (typeof performance !== "undefined" && performance !== null && performance.now) {
        module.exports = function () {
          return performance.now();
        };
      } else if (typeof process !== "undefined" && process !== null && process.hrtime) {
        module.exports = function () {
          return (getNanoSeconds() - nodeLoadTime) / 1e6;
        };

        hrtime = process.hrtime;

        getNanoSeconds = function () {
          var hr;
          hr = hrtime();
          return hr[0] * 1e9 + hr[1];
        };

        moduleLoadTime = getNanoSeconds();
        upTime = process.uptime() * 1e9;
        nodeLoadTime = moduleLoadTime - upTime;
      } else if (Date.now) {
        module.exports = function () {
          return Date.now() - loadTime;
        };

        loadTime = Date.now();
      } else {
        module.exports = function () {
          return new Date().getTime() - loadTime;
        };

        loadTime = new Date().getTime();
      }
    }).call(commonjsGlobal);
  });

  /* eslint-disable import/prefer-default-export */
  function createPerfToolInstance() {
    let timingIds = {};
    let startTimes = {};
    let timings = {};
    /**
     * getUniqueTimingId
     * @param {string} id
     * @return {string}
     */

    function getUniqueTimingId(id) {
      const count = (isDefined(timingIds[id]) ? timingIds[id] : 0) + 1;
      timingIds[id] = count;
      return `${id}${count}`;
    }
    /**
     * timeStart
     * @param {string} id
     * @param {boolean} incrementTimer
     * @return {string}
     */


    function timeStart(id) {
      let incrementTimer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      const timingId = incrementTimer ? getUniqueTimingId(id) : id;

      if (isUndefined(startTimes[timingId])) {
        startTimes[timingId] = performanceNow();
      }

      return timingId;
    }
    /**
     * timeEnd
     * @param {string} id
     * @param {number} offset
     * @return {number}
     */


    function timeEnd(id) {
      let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

      if (isUndefined(startTimes[id])) {
        return -1;
      }

      const timing = performanceNow() - startTimes[id] - offset;
      timings[id] = timing;
      return timing;
    }

    function clearTiming(id) {
      delete timingIds[id];
      delete startTimes[id];
      delete timings[id];
    }

    function reset() {
      timingIds = {};
      startTimes = {};
      timings = {};
    }

    return {
      timeStart,
      timeEnd,
      getTimings: () => timings,
      getTiming: key => timings[key],
      clearTiming,
      reset
    };
  }
  const perfTool = createPerfToolInstance();

  var src = function (str) {
    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!str) return undefined;
    const o = {
      key: ['source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'],
      q: {
        name: 'queryKey',
        parser: /(?:^|&)([^&=]*)=?([^&]*)/g
      },
      parser: {
        strict: /^(?:([^:/?#]+):)?(?:\/\/((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\d*))?))?((((?:[^?#/]*\/)*)([^?#]*))(?:\?([^#]*))?(?:#(.*))?)/,
        loose: /^(?:(?![^:@]+:[^:@/]*@)([^:/?#.]+):)?(?:\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#/]*\.[^?#/.]+(?:[?#]|$)))*\/?)?([^?#/]*))(?:\?([^#]*))?(?:#(.*))?)/
      }
    };
    const m = o.parser[opts.strictMode ? 'strict' : 'loose'].exec(str);
    const uri = {};
    let i = 14;

    while (i--) uri[o.key[i]] = m[i] || '';

    uri[o.q.name] = {};
    uri[o.key[12]].replace(o.q.parser, function ($0, $1, $2) {
      if ($1) uri[o.q.name][$1] = $2;
    });
    return uri;
  };

  var rules = [
  	"ac",
  	"com.ac",
  	"edu.ac",
  	"gov.ac",
  	"net.ac",
  	"mil.ac",
  	"org.ac",
  	"ad",
  	"nom.ad",
  	"ae",
  	"co.ae",
  	"net.ae",
  	"org.ae",
  	"sch.ae",
  	"ac.ae",
  	"gov.ae",
  	"mil.ae",
  	"aero",
  	"accident-investigation.aero",
  	"accident-prevention.aero",
  	"aerobatic.aero",
  	"aeroclub.aero",
  	"aerodrome.aero",
  	"agents.aero",
  	"aircraft.aero",
  	"airline.aero",
  	"airport.aero",
  	"air-surveillance.aero",
  	"airtraffic.aero",
  	"air-traffic-control.aero",
  	"ambulance.aero",
  	"amusement.aero",
  	"association.aero",
  	"author.aero",
  	"ballooning.aero",
  	"broker.aero",
  	"caa.aero",
  	"cargo.aero",
  	"catering.aero",
  	"certification.aero",
  	"championship.aero",
  	"charter.aero",
  	"civilaviation.aero",
  	"club.aero",
  	"conference.aero",
  	"consultant.aero",
  	"consulting.aero",
  	"control.aero",
  	"council.aero",
  	"crew.aero",
  	"design.aero",
  	"dgca.aero",
  	"educator.aero",
  	"emergency.aero",
  	"engine.aero",
  	"engineer.aero",
  	"entertainment.aero",
  	"equipment.aero",
  	"exchange.aero",
  	"express.aero",
  	"federation.aero",
  	"flight.aero",
  	"fuel.aero",
  	"gliding.aero",
  	"government.aero",
  	"groundhandling.aero",
  	"group.aero",
  	"hanggliding.aero",
  	"homebuilt.aero",
  	"insurance.aero",
  	"journal.aero",
  	"journalist.aero",
  	"leasing.aero",
  	"logistics.aero",
  	"magazine.aero",
  	"maintenance.aero",
  	"media.aero",
  	"microlight.aero",
  	"modelling.aero",
  	"navigation.aero",
  	"parachuting.aero",
  	"paragliding.aero",
  	"passenger-association.aero",
  	"pilot.aero",
  	"press.aero",
  	"production.aero",
  	"recreation.aero",
  	"repbody.aero",
  	"res.aero",
  	"research.aero",
  	"rotorcraft.aero",
  	"safety.aero",
  	"scientist.aero",
  	"services.aero",
  	"show.aero",
  	"skydiving.aero",
  	"software.aero",
  	"student.aero",
  	"trader.aero",
  	"trading.aero",
  	"trainer.aero",
  	"union.aero",
  	"workinggroup.aero",
  	"works.aero",
  	"af",
  	"gov.af",
  	"com.af",
  	"org.af",
  	"net.af",
  	"edu.af",
  	"ag",
  	"com.ag",
  	"org.ag",
  	"net.ag",
  	"co.ag",
  	"nom.ag",
  	"ai",
  	"off.ai",
  	"com.ai",
  	"net.ai",
  	"org.ai",
  	"al",
  	"com.al",
  	"edu.al",
  	"gov.al",
  	"mil.al",
  	"net.al",
  	"org.al",
  	"am",
  	"co.am",
  	"com.am",
  	"commune.am",
  	"net.am",
  	"org.am",
  	"ao",
  	"ed.ao",
  	"gv.ao",
  	"og.ao",
  	"co.ao",
  	"pb.ao",
  	"it.ao",
  	"aq",
  	"ar",
  	"bet.ar",
  	"com.ar",
  	"coop.ar",
  	"edu.ar",
  	"gob.ar",
  	"gov.ar",
  	"int.ar",
  	"mil.ar",
  	"musica.ar",
  	"mutual.ar",
  	"net.ar",
  	"org.ar",
  	"senasa.ar",
  	"tur.ar",
  	"arpa",
  	"e164.arpa",
  	"in-addr.arpa",
  	"ip6.arpa",
  	"iris.arpa",
  	"uri.arpa",
  	"urn.arpa",
  	"as",
  	"gov.as",
  	"asia",
  	"at",
  	"ac.at",
  	"co.at",
  	"gv.at",
  	"or.at",
  	"sth.ac.at",
  	"au",
  	"com.au",
  	"net.au",
  	"org.au",
  	"edu.au",
  	"gov.au",
  	"asn.au",
  	"id.au",
  	"info.au",
  	"conf.au",
  	"oz.au",
  	"act.au",
  	"nsw.au",
  	"nt.au",
  	"qld.au",
  	"sa.au",
  	"tas.au",
  	"vic.au",
  	"wa.au",
  	"act.edu.au",
  	"catholic.edu.au",
  	"nsw.edu.au",
  	"nt.edu.au",
  	"qld.edu.au",
  	"sa.edu.au",
  	"tas.edu.au",
  	"vic.edu.au",
  	"wa.edu.au",
  	"qld.gov.au",
  	"sa.gov.au",
  	"tas.gov.au",
  	"vic.gov.au",
  	"wa.gov.au",
  	"schools.nsw.edu.au",
  	"aw",
  	"com.aw",
  	"ax",
  	"az",
  	"com.az",
  	"net.az",
  	"int.az",
  	"gov.az",
  	"org.az",
  	"edu.az",
  	"info.az",
  	"pp.az",
  	"mil.az",
  	"name.az",
  	"pro.az",
  	"biz.az",
  	"ba",
  	"com.ba",
  	"edu.ba",
  	"gov.ba",
  	"mil.ba",
  	"net.ba",
  	"org.ba",
  	"bb",
  	"biz.bb",
  	"co.bb",
  	"com.bb",
  	"edu.bb",
  	"gov.bb",
  	"info.bb",
  	"net.bb",
  	"org.bb",
  	"store.bb",
  	"tv.bb",
  	"*.bd",
  	"be",
  	"ac.be",
  	"bf",
  	"gov.bf",
  	"bg",
  	"a.bg",
  	"b.bg",
  	"c.bg",
  	"d.bg",
  	"e.bg",
  	"f.bg",
  	"g.bg",
  	"h.bg",
  	"i.bg",
  	"j.bg",
  	"k.bg",
  	"l.bg",
  	"m.bg",
  	"n.bg",
  	"o.bg",
  	"p.bg",
  	"q.bg",
  	"r.bg",
  	"s.bg",
  	"t.bg",
  	"u.bg",
  	"v.bg",
  	"w.bg",
  	"x.bg",
  	"y.bg",
  	"z.bg",
  	"0.bg",
  	"1.bg",
  	"2.bg",
  	"3.bg",
  	"4.bg",
  	"5.bg",
  	"6.bg",
  	"7.bg",
  	"8.bg",
  	"9.bg",
  	"bh",
  	"com.bh",
  	"edu.bh",
  	"net.bh",
  	"org.bh",
  	"gov.bh",
  	"bi",
  	"co.bi",
  	"com.bi",
  	"edu.bi",
  	"or.bi",
  	"org.bi",
  	"biz",
  	"bj",
  	"asso.bj",
  	"barreau.bj",
  	"gouv.bj",
  	"bm",
  	"com.bm",
  	"edu.bm",
  	"gov.bm",
  	"net.bm",
  	"org.bm",
  	"bn",
  	"com.bn",
  	"edu.bn",
  	"gov.bn",
  	"net.bn",
  	"org.bn",
  	"bo",
  	"com.bo",
  	"edu.bo",
  	"gob.bo",
  	"int.bo",
  	"org.bo",
  	"net.bo",
  	"mil.bo",
  	"tv.bo",
  	"web.bo",
  	"academia.bo",
  	"agro.bo",
  	"arte.bo",
  	"blog.bo",
  	"bolivia.bo",
  	"ciencia.bo",
  	"cooperativa.bo",
  	"democracia.bo",
  	"deporte.bo",
  	"ecologia.bo",
  	"economia.bo",
  	"empresa.bo",
  	"indigena.bo",
  	"industria.bo",
  	"info.bo",
  	"medicina.bo",
  	"movimiento.bo",
  	"musica.bo",
  	"natural.bo",
  	"nombre.bo",
  	"noticias.bo",
  	"patria.bo",
  	"politica.bo",
  	"profesional.bo",
  	"plurinacional.bo",
  	"pueblo.bo",
  	"revista.bo",
  	"salud.bo",
  	"tecnologia.bo",
  	"tksat.bo",
  	"transporte.bo",
  	"wiki.bo",
  	"br",
  	"9guacu.br",
  	"abc.br",
  	"adm.br",
  	"adv.br",
  	"agr.br",
  	"aju.br",
  	"am.br",
  	"anani.br",
  	"aparecida.br",
  	"app.br",
  	"arq.br",
  	"art.br",
  	"ato.br",
  	"b.br",
  	"barueri.br",
  	"belem.br",
  	"bhz.br",
  	"bib.br",
  	"bio.br",
  	"blog.br",
  	"bmd.br",
  	"boavista.br",
  	"bsb.br",
  	"campinagrande.br",
  	"campinas.br",
  	"caxias.br",
  	"cim.br",
  	"cng.br",
  	"cnt.br",
  	"com.br",
  	"contagem.br",
  	"coop.br",
  	"coz.br",
  	"cri.br",
  	"cuiaba.br",
  	"curitiba.br",
  	"def.br",
  	"des.br",
  	"det.br",
  	"dev.br",
  	"ecn.br",
  	"eco.br",
  	"edu.br",
  	"emp.br",
  	"enf.br",
  	"eng.br",
  	"esp.br",
  	"etc.br",
  	"eti.br",
  	"far.br",
  	"feira.br",
  	"flog.br",
  	"floripa.br",
  	"fm.br",
  	"fnd.br",
  	"fortal.br",
  	"fot.br",
  	"foz.br",
  	"fst.br",
  	"g12.br",
  	"geo.br",
  	"ggf.br",
  	"goiania.br",
  	"gov.br",
  	"ac.gov.br",
  	"al.gov.br",
  	"am.gov.br",
  	"ap.gov.br",
  	"ba.gov.br",
  	"ce.gov.br",
  	"df.gov.br",
  	"es.gov.br",
  	"go.gov.br",
  	"ma.gov.br",
  	"mg.gov.br",
  	"ms.gov.br",
  	"mt.gov.br",
  	"pa.gov.br",
  	"pb.gov.br",
  	"pe.gov.br",
  	"pi.gov.br",
  	"pr.gov.br",
  	"rj.gov.br",
  	"rn.gov.br",
  	"ro.gov.br",
  	"rr.gov.br",
  	"rs.gov.br",
  	"sc.gov.br",
  	"se.gov.br",
  	"sp.gov.br",
  	"to.gov.br",
  	"gru.br",
  	"imb.br",
  	"ind.br",
  	"inf.br",
  	"jab.br",
  	"jampa.br",
  	"jdf.br",
  	"joinville.br",
  	"jor.br",
  	"jus.br",
  	"leg.br",
  	"lel.br",
  	"log.br",
  	"londrina.br",
  	"macapa.br",
  	"maceio.br",
  	"manaus.br",
  	"maringa.br",
  	"mat.br",
  	"med.br",
  	"mil.br",
  	"morena.br",
  	"mp.br",
  	"mus.br",
  	"natal.br",
  	"net.br",
  	"niteroi.br",
  	"*.nom.br",
  	"not.br",
  	"ntr.br",
  	"odo.br",
  	"ong.br",
  	"org.br",
  	"osasco.br",
  	"palmas.br",
  	"poa.br",
  	"ppg.br",
  	"pro.br",
  	"psc.br",
  	"psi.br",
  	"pvh.br",
  	"qsl.br",
  	"radio.br",
  	"rec.br",
  	"recife.br",
  	"rep.br",
  	"ribeirao.br",
  	"rio.br",
  	"riobranco.br",
  	"riopreto.br",
  	"salvador.br",
  	"sampa.br",
  	"santamaria.br",
  	"santoandre.br",
  	"saobernardo.br",
  	"saogonca.br",
  	"seg.br",
  	"sjc.br",
  	"slg.br",
  	"slz.br",
  	"sorocaba.br",
  	"srv.br",
  	"taxi.br",
  	"tc.br",
  	"tec.br",
  	"teo.br",
  	"the.br",
  	"tmp.br",
  	"trd.br",
  	"tur.br",
  	"tv.br",
  	"udi.br",
  	"vet.br",
  	"vix.br",
  	"vlog.br",
  	"wiki.br",
  	"zlg.br",
  	"bs",
  	"com.bs",
  	"net.bs",
  	"org.bs",
  	"edu.bs",
  	"gov.bs",
  	"bt",
  	"com.bt",
  	"edu.bt",
  	"gov.bt",
  	"net.bt",
  	"org.bt",
  	"bv",
  	"bw",
  	"co.bw",
  	"org.bw",
  	"by",
  	"gov.by",
  	"mil.by",
  	"com.by",
  	"of.by",
  	"bz",
  	"com.bz",
  	"net.bz",
  	"org.bz",
  	"edu.bz",
  	"gov.bz",
  	"ca",
  	"ab.ca",
  	"bc.ca",
  	"mb.ca",
  	"nb.ca",
  	"nf.ca",
  	"nl.ca",
  	"ns.ca",
  	"nt.ca",
  	"nu.ca",
  	"on.ca",
  	"pe.ca",
  	"qc.ca",
  	"sk.ca",
  	"yk.ca",
  	"gc.ca",
  	"cat",
  	"cc",
  	"cd",
  	"gov.cd",
  	"cf",
  	"cg",
  	"ch",
  	"ci",
  	"org.ci",
  	"or.ci",
  	"com.ci",
  	"co.ci",
  	"edu.ci",
  	"ed.ci",
  	"ac.ci",
  	"net.ci",
  	"go.ci",
  	"asso.ci",
  	"aéroport.ci",
  	"int.ci",
  	"presse.ci",
  	"md.ci",
  	"gouv.ci",
  	"*.ck",
  	"!www.ck",
  	"cl",
  	"co.cl",
  	"gob.cl",
  	"gov.cl",
  	"mil.cl",
  	"cm",
  	"co.cm",
  	"com.cm",
  	"gov.cm",
  	"net.cm",
  	"cn",
  	"ac.cn",
  	"com.cn",
  	"edu.cn",
  	"gov.cn",
  	"net.cn",
  	"org.cn",
  	"mil.cn",
  	"公司.cn",
  	"网络.cn",
  	"網絡.cn",
  	"ah.cn",
  	"bj.cn",
  	"cq.cn",
  	"fj.cn",
  	"gd.cn",
  	"gs.cn",
  	"gz.cn",
  	"gx.cn",
  	"ha.cn",
  	"hb.cn",
  	"he.cn",
  	"hi.cn",
  	"hl.cn",
  	"hn.cn",
  	"jl.cn",
  	"js.cn",
  	"jx.cn",
  	"ln.cn",
  	"nm.cn",
  	"nx.cn",
  	"qh.cn",
  	"sc.cn",
  	"sd.cn",
  	"sh.cn",
  	"sn.cn",
  	"sx.cn",
  	"tj.cn",
  	"xj.cn",
  	"xz.cn",
  	"yn.cn",
  	"zj.cn",
  	"hk.cn",
  	"mo.cn",
  	"tw.cn",
  	"co",
  	"arts.co",
  	"com.co",
  	"edu.co",
  	"firm.co",
  	"gov.co",
  	"info.co",
  	"int.co",
  	"mil.co",
  	"net.co",
  	"nom.co",
  	"org.co",
  	"rec.co",
  	"web.co",
  	"com",
  	"coop",
  	"cr",
  	"ac.cr",
  	"co.cr",
  	"ed.cr",
  	"fi.cr",
  	"go.cr",
  	"or.cr",
  	"sa.cr",
  	"cu",
  	"com.cu",
  	"edu.cu",
  	"org.cu",
  	"net.cu",
  	"gov.cu",
  	"inf.cu",
  	"cv",
  	"com.cv",
  	"edu.cv",
  	"int.cv",
  	"nome.cv",
  	"org.cv",
  	"cw",
  	"com.cw",
  	"edu.cw",
  	"net.cw",
  	"org.cw",
  	"cx",
  	"gov.cx",
  	"cy",
  	"ac.cy",
  	"biz.cy",
  	"com.cy",
  	"ekloges.cy",
  	"gov.cy",
  	"ltd.cy",
  	"mil.cy",
  	"net.cy",
  	"org.cy",
  	"press.cy",
  	"pro.cy",
  	"tm.cy",
  	"cz",
  	"de",
  	"dj",
  	"dk",
  	"dm",
  	"com.dm",
  	"net.dm",
  	"org.dm",
  	"edu.dm",
  	"gov.dm",
  	"do",
  	"art.do",
  	"com.do",
  	"edu.do",
  	"gob.do",
  	"gov.do",
  	"mil.do",
  	"net.do",
  	"org.do",
  	"sld.do",
  	"web.do",
  	"dz",
  	"art.dz",
  	"asso.dz",
  	"com.dz",
  	"edu.dz",
  	"gov.dz",
  	"org.dz",
  	"net.dz",
  	"pol.dz",
  	"soc.dz",
  	"tm.dz",
  	"ec",
  	"com.ec",
  	"info.ec",
  	"net.ec",
  	"fin.ec",
  	"k12.ec",
  	"med.ec",
  	"pro.ec",
  	"org.ec",
  	"edu.ec",
  	"gov.ec",
  	"gob.ec",
  	"mil.ec",
  	"edu",
  	"ee",
  	"edu.ee",
  	"gov.ee",
  	"riik.ee",
  	"lib.ee",
  	"med.ee",
  	"com.ee",
  	"pri.ee",
  	"aip.ee",
  	"org.ee",
  	"fie.ee",
  	"eg",
  	"com.eg",
  	"edu.eg",
  	"eun.eg",
  	"gov.eg",
  	"mil.eg",
  	"name.eg",
  	"net.eg",
  	"org.eg",
  	"sci.eg",
  	"*.er",
  	"es",
  	"com.es",
  	"nom.es",
  	"org.es",
  	"gob.es",
  	"edu.es",
  	"et",
  	"com.et",
  	"gov.et",
  	"org.et",
  	"edu.et",
  	"biz.et",
  	"name.et",
  	"info.et",
  	"net.et",
  	"eu",
  	"fi",
  	"aland.fi",
  	"fj",
  	"ac.fj",
  	"biz.fj",
  	"com.fj",
  	"gov.fj",
  	"info.fj",
  	"mil.fj",
  	"name.fj",
  	"net.fj",
  	"org.fj",
  	"pro.fj",
  	"*.fk",
  	"com.fm",
  	"edu.fm",
  	"net.fm",
  	"org.fm",
  	"fm",
  	"fo",
  	"fr",
  	"asso.fr",
  	"com.fr",
  	"gouv.fr",
  	"nom.fr",
  	"prd.fr",
  	"tm.fr",
  	"aeroport.fr",
  	"avocat.fr",
  	"avoues.fr",
  	"cci.fr",
  	"chambagri.fr",
  	"chirurgiens-dentistes.fr",
  	"experts-comptables.fr",
  	"geometre-expert.fr",
  	"greta.fr",
  	"huissier-justice.fr",
  	"medecin.fr",
  	"notaires.fr",
  	"pharmacien.fr",
  	"port.fr",
  	"veterinaire.fr",
  	"ga",
  	"gb",
  	"edu.gd",
  	"gov.gd",
  	"gd",
  	"ge",
  	"com.ge",
  	"edu.ge",
  	"gov.ge",
  	"org.ge",
  	"mil.ge",
  	"net.ge",
  	"pvt.ge",
  	"gf",
  	"gg",
  	"co.gg",
  	"net.gg",
  	"org.gg",
  	"gh",
  	"com.gh",
  	"edu.gh",
  	"gov.gh",
  	"org.gh",
  	"mil.gh",
  	"gi",
  	"com.gi",
  	"ltd.gi",
  	"gov.gi",
  	"mod.gi",
  	"edu.gi",
  	"org.gi",
  	"gl",
  	"co.gl",
  	"com.gl",
  	"edu.gl",
  	"net.gl",
  	"org.gl",
  	"gm",
  	"gn",
  	"ac.gn",
  	"com.gn",
  	"edu.gn",
  	"gov.gn",
  	"org.gn",
  	"net.gn",
  	"gov",
  	"gp",
  	"com.gp",
  	"net.gp",
  	"mobi.gp",
  	"edu.gp",
  	"org.gp",
  	"asso.gp",
  	"gq",
  	"gr",
  	"com.gr",
  	"edu.gr",
  	"net.gr",
  	"org.gr",
  	"gov.gr",
  	"gs",
  	"gt",
  	"com.gt",
  	"edu.gt",
  	"gob.gt",
  	"ind.gt",
  	"mil.gt",
  	"net.gt",
  	"org.gt",
  	"gu",
  	"com.gu",
  	"edu.gu",
  	"gov.gu",
  	"guam.gu",
  	"info.gu",
  	"net.gu",
  	"org.gu",
  	"web.gu",
  	"gw",
  	"gy",
  	"co.gy",
  	"com.gy",
  	"edu.gy",
  	"gov.gy",
  	"net.gy",
  	"org.gy",
  	"hk",
  	"com.hk",
  	"edu.hk",
  	"gov.hk",
  	"idv.hk",
  	"net.hk",
  	"org.hk",
  	"公司.hk",
  	"教育.hk",
  	"敎育.hk",
  	"政府.hk",
  	"個人.hk",
  	"个��.hk",
  	"箇人.hk",
  	"網络.hk",
  	"网络.hk",
  	"组織.hk",
  	"網絡.hk",
  	"网絡.hk",
  	"组织.hk",
  	"組織.hk",
  	"組织.hk",
  	"hm",
  	"hn",
  	"com.hn",
  	"edu.hn",
  	"org.hn",
  	"net.hn",
  	"mil.hn",
  	"gob.hn",
  	"hr",
  	"iz.hr",
  	"from.hr",
  	"name.hr",
  	"com.hr",
  	"ht",
  	"com.ht",
  	"shop.ht",
  	"firm.ht",
  	"info.ht",
  	"adult.ht",
  	"net.ht",
  	"pro.ht",
  	"org.ht",
  	"med.ht",
  	"art.ht",
  	"coop.ht",
  	"pol.ht",
  	"asso.ht",
  	"edu.ht",
  	"rel.ht",
  	"gouv.ht",
  	"perso.ht",
  	"hu",
  	"co.hu",
  	"info.hu",
  	"org.hu",
  	"priv.hu",
  	"sport.hu",
  	"tm.hu",
  	"2000.hu",
  	"agrar.hu",
  	"bolt.hu",
  	"casino.hu",
  	"city.hu",
  	"erotica.hu",
  	"erotika.hu",
  	"film.hu",
  	"forum.hu",
  	"games.hu",
  	"hotel.hu",
  	"ingatlan.hu",
  	"jogasz.hu",
  	"konyvelo.hu",
  	"lakas.hu",
  	"media.hu",
  	"news.hu",
  	"reklam.hu",
  	"sex.hu",
  	"shop.hu",
  	"suli.hu",
  	"szex.hu",
  	"tozsde.hu",
  	"utazas.hu",
  	"video.hu",
  	"id",
  	"ac.id",
  	"biz.id",
  	"co.id",
  	"desa.id",
  	"go.id",
  	"mil.id",
  	"my.id",
  	"net.id",
  	"or.id",
  	"ponpes.id",
  	"sch.id",
  	"web.id",
  	"ie",
  	"gov.ie",
  	"il",
  	"ac.il",
  	"co.il",
  	"gov.il",
  	"idf.il",
  	"k12.il",
  	"muni.il",
  	"net.il",
  	"org.il",
  	"im",
  	"ac.im",
  	"co.im",
  	"com.im",
  	"ltd.co.im",
  	"net.im",
  	"org.im",
  	"plc.co.im",
  	"tt.im",
  	"tv.im",
  	"in",
  	"co.in",
  	"firm.in",
  	"net.in",
  	"org.in",
  	"gen.in",
  	"ind.in",
  	"nic.in",
  	"ac.in",
  	"edu.in",
  	"res.in",
  	"gov.in",
  	"mil.in",
  	"info",
  	"int",
  	"eu.int",
  	"io",
  	"com.io",
  	"iq",
  	"gov.iq",
  	"edu.iq",
  	"mil.iq",
  	"com.iq",
  	"org.iq",
  	"net.iq",
  	"ir",
  	"ac.ir",
  	"co.ir",
  	"gov.ir",
  	"id.ir",
  	"net.ir",
  	"org.ir",
  	"sch.ir",
  	"ایران.ir",
  	"ايران.ir",
  	"is",
  	"net.is",
  	"com.is",
  	"edu.is",
  	"gov.is",
  	"org.is",
  	"int.is",
  	"it",
  	"gov.it",
  	"edu.it",
  	"abr.it",
  	"abruzzo.it",
  	"aosta-valley.it",
  	"aostavalley.it",
  	"bas.it",
  	"basilicata.it",
  	"cal.it",
  	"calabria.it",
  	"cam.it",
  	"campania.it",
  	"emilia-romagna.it",
  	"emiliaromagna.it",
  	"emr.it",
  	"friuli-v-giulia.it",
  	"friuli-ve-giulia.it",
  	"friuli-vegiulia.it",
  	"friuli-venezia-giulia.it",
  	"friuli-veneziagiulia.it",
  	"friuli-vgiulia.it",
  	"friuliv-giulia.it",
  	"friulive-giulia.it",
  	"friulivegiulia.it",
  	"friulivenezia-giulia.it",
  	"friuliveneziagiulia.it",
  	"friulivgiulia.it",
  	"fvg.it",
  	"laz.it",
  	"lazio.it",
  	"lig.it",
  	"liguria.it",
  	"lom.it",
  	"lombardia.it",
  	"lombardy.it",
  	"lucania.it",
  	"mar.it",
  	"marche.it",
  	"mol.it",
  	"molise.it",
  	"piedmont.it",
  	"piemonte.it",
  	"pmn.it",
  	"pug.it",
  	"puglia.it",
  	"sar.it",
  	"sardegna.it",
  	"sardinia.it",
  	"sic.it",
  	"sicilia.it",
  	"sicily.it",
  	"taa.it",
  	"tos.it",
  	"toscana.it",
  	"trentin-sud-tirol.it",
  	"trentin-süd-tirol.it",
  	"trentin-sudtirol.it",
  	"trentin-südtirol.it",
  	"trentin-sued-tirol.it",
  	"trentin-suedtirol.it",
  	"trentino-a-adige.it",
  	"trentino-aadige.it",
  	"trentino-alto-adige.it",
  	"trentino-altoadige.it",
  	"trentino-s-tirol.it",
  	"trentino-stirol.it",
  	"trentino-sud-tirol.it",
  	"trentino-süd-tirol.it",
  	"trentino-sudtirol.it",
  	"trentino-südtirol.it",
  	"trentino-sued-tirol.it",
  	"trentino-suedtirol.it",
  	"trentino.it",
  	"trentinoa-adige.it",
  	"trentinoaadige.it",
  	"trentinoalto-adige.it",
  	"trentinoaltoadige.it",
  	"trentinos-tirol.it",
  	"trentinostirol.it",
  	"trentinosud-tirol.it",
  	"trentinosüd-tirol.it",
  	"trentinosudtirol.it",
  	"trentinosüdtirol.it",
  	"trentinosued-tirol.it",
  	"trentinosuedtirol.it",
  	"trentinsud-tirol.it",
  	"trentinsüd-tirol.it",
  	"trentinsudtirol.it",
  	"trentinsüdtirol.it",
  	"trentinsued-tirol.it",
  	"trentinsuedtirol.it",
  	"tuscany.it",
  	"umb.it",
  	"umbria.it",
  	"val-d-aosta.it",
  	"val-daosta.it",
  	"vald-aosta.it",
  	"valdaosta.it",
  	"valle-aosta.it",
  	"valle-d-aosta.it",
  	"valle-daosta.it",
  	"valleaosta.it",
  	"valled-aosta.it",
  	"valledaosta.it",
  	"vallee-aoste.it",
  	"vallée-aoste.it",
  	"vallee-d-aoste.it",
  	"vallée-d-aoste.it",
  	"valleeaoste.it",
  	"valléeaoste.it",
  	"valleedaoste.it",
  	"valléedaoste.it",
  	"vao.it",
  	"vda.it",
  	"ven.it",
  	"veneto.it",
  	"ag.it",
  	"agrigento.it",
  	"al.it",
  	"alessandria.it",
  	"alto-adige.it",
  	"altoadige.it",
  	"an.it",
  	"ancona.it",
  	"andria-barletta-trani.it",
  	"andria-trani-barletta.it",
  	"andriabarlettatrani.it",
  	"andriatranibarletta.it",
  	"ao.it",
  	"aosta.it",
  	"aoste.it",
  	"ap.it",
  	"aq.it",
  	"aquila.it",
  	"ar.it",
  	"arezzo.it",
  	"ascoli-piceno.it",
  	"ascolipiceno.it",
  	"asti.it",
  	"at.it",
  	"av.it",
  	"avellino.it",
  	"ba.it",
  	"balsan-sudtirol.it",
  	"balsan-südtirol.it",
  	"balsan-suedtirol.it",
  	"balsan.it",
  	"bari.it",
  	"barletta-trani-andria.it",
  	"barlettatraniandria.it",
  	"belluno.it",
  	"benevento.it",
  	"bergamo.it",
  	"bg.it",
  	"bi.it",
  	"biella.it",
  	"bl.it",
  	"bn.it",
  	"bo.it",
  	"bologna.it",
  	"bolzano-altoadige.it",
  	"bolzano.it",
  	"bozen-sudtirol.it",
  	"bozen-südtirol.it",
  	"bozen-suedtirol.it",
  	"bozen.it",
  	"br.it",
  	"brescia.it",
  	"brindisi.it",
  	"bs.it",
  	"bt.it",
  	"bulsan-sudtirol.it",
  	"bulsan-südtirol.it",
  	"bulsan-suedtirol.it",
  	"bulsan.it",
  	"bz.it",
  	"ca.it",
  	"cagliari.it",
  	"caltanissetta.it",
  	"campidano-medio.it",
  	"campidanomedio.it",
  	"campobasso.it",
  	"carbonia-iglesias.it",
  	"carboniaiglesias.it",
  	"carrara-massa.it",
  	"carraramassa.it",
  	"caserta.it",
  	"catania.it",
  	"catanzaro.it",
  	"cb.it",
  	"ce.it",
  	"cesena-forli.it",
  	"cesena-forlì.it",
  	"cesenaforli.it",
  	"cesenaforlì.it",
  	"ch.it",
  	"chieti.it",
  	"ci.it",
  	"cl.it",
  	"cn.it",
  	"co.it",
  	"como.it",
  	"cosenza.it",
  	"cr.it",
  	"cremona.it",
  	"crotone.it",
  	"cs.it",
  	"ct.it",
  	"cuneo.it",
  	"cz.it",
  	"dell-ogliastra.it",
  	"dellogliastra.it",
  	"en.it",
  	"enna.it",
  	"fc.it",
  	"fe.it",
  	"fermo.it",
  	"ferrara.it",
  	"fg.it",
  	"fi.it",
  	"firenze.it",
  	"florence.it",
  	"fm.it",
  	"foggia.it",
  	"forli-cesena.it",
  	"forlì-cesena.it",
  	"forlicesena.it",
  	"forlìcesena.it",
  	"fr.it",
  	"frosinone.it",
  	"ge.it",
  	"genoa.it",
  	"genova.it",
  	"go.it",
  	"gorizia.it",
  	"gr.it",
  	"grosseto.it",
  	"iglesias-carbonia.it",
  	"iglesiascarbonia.it",
  	"im.it",
  	"imperia.it",
  	"is.it",
  	"isernia.it",
  	"kr.it",
  	"la-spezia.it",
  	"laquila.it",
  	"laspezia.it",
  	"latina.it",
  	"lc.it",
  	"le.it",
  	"lecce.it",
  	"lecco.it",
  	"li.it",
  	"livorno.it",
  	"lo.it",
  	"lodi.it",
  	"lt.it",
  	"lu.it",
  	"lucca.it",
  	"macerata.it",
  	"mantova.it",
  	"massa-carrara.it",
  	"massacarrara.it",
  	"matera.it",
  	"mb.it",
  	"mc.it",
  	"me.it",
  	"medio-campidano.it",
  	"mediocampidano.it",
  	"messina.it",
  	"mi.it",
  	"milan.it",
  	"milano.it",
  	"mn.it",
  	"mo.it",
  	"modena.it",
  	"monza-brianza.it",
  	"monza-e-della-brianza.it",
  	"monza.it",
  	"monzabrianza.it",
  	"monzaebrianza.it",
  	"monzaedellabrianza.it",
  	"ms.it",
  	"mt.it",
  	"na.it",
  	"naples.it",
  	"napoli.it",
  	"no.it",
  	"novara.it",
  	"nu.it",
  	"nuoro.it",
  	"og.it",
  	"ogliastra.it",
  	"olbia-tempio.it",
  	"olbiatempio.it",
  	"or.it",
  	"oristano.it",
  	"ot.it",
  	"pa.it",
  	"padova.it",
  	"padua.it",
  	"palermo.it",
  	"parma.it",
  	"pavia.it",
  	"pc.it",
  	"pd.it",
  	"pe.it",
  	"perugia.it",
  	"pesaro-urbino.it",
  	"pesarourbino.it",
  	"pescara.it",
  	"pg.it",
  	"pi.it",
  	"piacenza.it",
  	"pisa.it",
  	"pistoia.it",
  	"pn.it",
  	"po.it",
  	"pordenone.it",
  	"potenza.it",
  	"pr.it",
  	"prato.it",
  	"pt.it",
  	"pu.it",
  	"pv.it",
  	"pz.it",
  	"ra.it",
  	"ragusa.it",
  	"ravenna.it",
  	"rc.it",
  	"re.it",
  	"reggio-calabria.it",
  	"reggio-emilia.it",
  	"reggiocalabria.it",
  	"reggioemilia.it",
  	"rg.it",
  	"ri.it",
  	"rieti.it",
  	"rimini.it",
  	"rm.it",
  	"rn.it",
  	"ro.it",
  	"roma.it",
  	"rome.it",
  	"rovigo.it",
  	"sa.it",
  	"salerno.it",
  	"sassari.it",
  	"savona.it",
  	"si.it",
  	"siena.it",
  	"siracusa.it",
  	"so.it",
  	"sondrio.it",
  	"sp.it",
  	"sr.it",
  	"ss.it",
  	"suedtirol.it",
  	"südtirol.it",
  	"sv.it",
  	"ta.it",
  	"taranto.it",
  	"te.it",
  	"tempio-olbia.it",
  	"tempioolbia.it",
  	"teramo.it",
  	"terni.it",
  	"tn.it",
  	"to.it",
  	"torino.it",
  	"tp.it",
  	"tr.it",
  	"trani-andria-barletta.it",
  	"trani-barletta-andria.it",
  	"traniandriabarletta.it",
  	"tranibarlettaandria.it",
  	"trapani.it",
  	"trento.it",
  	"treviso.it",
  	"trieste.it",
  	"ts.it",
  	"turin.it",
  	"tv.it",
  	"ud.it",
  	"udine.it",
  	"urbino-pesaro.it",
  	"urbinopesaro.it",
  	"va.it",
  	"varese.it",
  	"vb.it",
  	"vc.it",
  	"ve.it",
  	"venezia.it",
  	"venice.it",
  	"verbania.it",
  	"vercelli.it",
  	"verona.it",
  	"vi.it",
  	"vibo-valentia.it",
  	"vibovalentia.it",
  	"vicenza.it",
  	"viterbo.it",
  	"vr.it",
  	"vs.it",
  	"vt.it",
  	"vv.it",
  	"je",
  	"co.je",
  	"net.je",
  	"org.je",
  	"*.jm",
  	"jo",
  	"com.jo",
  	"org.jo",
  	"net.jo",
  	"edu.jo",
  	"sch.jo",
  	"gov.jo",
  	"mil.jo",
  	"name.jo",
  	"jobs",
  	"jp",
  	"ac.jp",
  	"ad.jp",
  	"co.jp",
  	"ed.jp",
  	"go.jp",
  	"gr.jp",
  	"lg.jp",
  	"ne.jp",
  	"or.jp",
  	"aichi.jp",
  	"akita.jp",
  	"aomori.jp",
  	"chiba.jp",
  	"ehime.jp",
  	"fukui.jp",
  	"fukuoka.jp",
  	"fukushima.jp",
  	"gifu.jp",
  	"gunma.jp",
  	"hiroshima.jp",
  	"hokkaido.jp",
  	"hyogo.jp",
  	"ibaraki.jp",
  	"ishikawa.jp",
  	"iwate.jp",
  	"kagawa.jp",
  	"kagoshima.jp",
  	"kanagawa.jp",
  	"kochi.jp",
  	"kumamoto.jp",
  	"kyoto.jp",
  	"mie.jp",
  	"miyagi.jp",
  	"miyazaki.jp",
  	"nagano.jp",
  	"nagasaki.jp",
  	"nara.jp",
  	"niigata.jp",
  	"oita.jp",
  	"okayama.jp",
  	"okinawa.jp",
  	"osaka.jp",
  	"saga.jp",
  	"saitama.jp",
  	"shiga.jp",
  	"shimane.jp",
  	"shizuoka.jp",
  	"tochigi.jp",
  	"tokushima.jp",
  	"tokyo.jp",
  	"tottori.jp",
  	"toyama.jp",
  	"wakayama.jp",
  	"yamagata.jp",
  	"yamaguchi.jp",
  	"yamanashi.jp",
  	"栃木.jp",
  	"愛知.jp",
  	"愛媛.jp",
  	"兵庫.jp",
  	"熊本.jp",
  	"茨城.jp",
  	"北海道.jp",
  	"千葉.jp",
  	"和歌山.jp",
  	"長崎.jp",
  	"長野.jp",
  	"新潟.jp",
  	"青森.jp",
  	"静岡.jp",
  	"東京.jp",
  	"石川.jp",
  	"埼玉.jp",
  	"三重.jp",
  	"京都.jp",
  	"佐賀.jp",
  	"大分.jp",
  	"大阪.jp",
  	"奈良.jp",
  	"宮城.jp",
  	"宮崎.jp",
  	"富山.jp",
  	"山口.jp",
  	"山形.jp",
  	"山梨.jp",
  	"岩手.jp",
  	"岐阜.jp",
  	"岡山.jp",
  	"島根.jp",
  	"広島.jp",
  	"徳島.jp",
  	"沖縄.jp",
  	"滋賀.jp",
  	"神奈川.jp",
  	"福井.jp",
  	"福岡.jp",
  	"福島.jp",
  	"秋田.jp",
  	"群馬.jp",
  	"香川.jp",
  	"高知.jp",
  	"鳥取.jp",
  	"鹿児島.jp",
  	"*.kawasaki.jp",
  	"*.kitakyushu.jp",
  	"*.kobe.jp",
  	"*.nagoya.jp",
  	"*.sapporo.jp",
  	"*.sendai.jp",
  	"*.yokohama.jp",
  	"!city.kawasaki.jp",
  	"!city.kitakyushu.jp",
  	"!city.kobe.jp",
  	"!city.nagoya.jp",
  	"!city.sapporo.jp",
  	"!city.sendai.jp",
  	"!city.yokohama.jp",
  	"aisai.aichi.jp",
  	"ama.aichi.jp",
  	"anjo.aichi.jp",
  	"asuke.aichi.jp",
  	"chiryu.aichi.jp",
  	"chita.aichi.jp",
  	"fuso.aichi.jp",
  	"gamagori.aichi.jp",
  	"handa.aichi.jp",
  	"hazu.aichi.jp",
  	"hekinan.aichi.jp",
  	"higashiura.aichi.jp",
  	"ichinomiya.aichi.jp",
  	"inazawa.aichi.jp",
  	"inuyama.aichi.jp",
  	"isshiki.aichi.jp",
  	"iwakura.aichi.jp",
  	"kanie.aichi.jp",
  	"kariya.aichi.jp",
  	"kasugai.aichi.jp",
  	"kira.aichi.jp",
  	"kiyosu.aichi.jp",
  	"komaki.aichi.jp",
  	"konan.aichi.jp",
  	"kota.aichi.jp",
  	"mihama.aichi.jp",
  	"miyoshi.aichi.jp",
  	"nishio.aichi.jp",
  	"nisshin.aichi.jp",
  	"obu.aichi.jp",
  	"oguchi.aichi.jp",
  	"oharu.aichi.jp",
  	"okazaki.aichi.jp",
  	"owariasahi.aichi.jp",
  	"seto.aichi.jp",
  	"shikatsu.aichi.jp",
  	"shinshiro.aichi.jp",
  	"shitara.aichi.jp",
  	"tahara.aichi.jp",
  	"takahama.aichi.jp",
  	"tobishima.aichi.jp",
  	"toei.aichi.jp",
  	"togo.aichi.jp",
  	"tokai.aichi.jp",
  	"tokoname.aichi.jp",
  	"toyoake.aichi.jp",
  	"toyohashi.aichi.jp",
  	"toyokawa.aichi.jp",
  	"toyone.aichi.jp",
  	"toyota.aichi.jp",
  	"tsushima.aichi.jp",
  	"yatomi.aichi.jp",
  	"akita.akita.jp",
  	"daisen.akita.jp",
  	"fujisato.akita.jp",
  	"gojome.akita.jp",
  	"hachirogata.akita.jp",
  	"happou.akita.jp",
  	"higashinaruse.akita.jp",
  	"honjo.akita.jp",
  	"honjyo.akita.jp",
  	"ikawa.akita.jp",
  	"kamikoani.akita.jp",
  	"kamioka.akita.jp",
  	"katagami.akita.jp",
  	"kazuno.akita.jp",
  	"kitaakita.akita.jp",
  	"kosaka.akita.jp",
  	"kyowa.akita.jp",
  	"misato.akita.jp",
  	"mitane.akita.jp",
  	"moriyoshi.akita.jp",
  	"nikaho.akita.jp",
  	"noshiro.akita.jp",
  	"odate.akita.jp",
  	"oga.akita.jp",
  	"ogata.akita.jp",
  	"semboku.akita.jp",
  	"yokote.akita.jp",
  	"yurihonjo.akita.jp",
  	"aomori.aomori.jp",
  	"gonohe.aomori.jp",
  	"hachinohe.aomori.jp",
  	"hashikami.aomori.jp",
  	"hiranai.aomori.jp",
  	"hirosaki.aomori.jp",
  	"itayanagi.aomori.jp",
  	"kuroishi.aomori.jp",
  	"misawa.aomori.jp",
  	"mutsu.aomori.jp",
  	"nakadomari.aomori.jp",
  	"noheji.aomori.jp",
  	"oirase.aomori.jp",
  	"owani.aomori.jp",
  	"rokunohe.aomori.jp",
  	"sannohe.aomori.jp",
  	"shichinohe.aomori.jp",
  	"shingo.aomori.jp",
  	"takko.aomori.jp",
  	"towada.aomori.jp",
  	"tsugaru.aomori.jp",
  	"tsuruta.aomori.jp",
  	"abiko.chiba.jp",
  	"asahi.chiba.jp",
  	"chonan.chiba.jp",
  	"chosei.chiba.jp",
  	"choshi.chiba.jp",
  	"chuo.chiba.jp",
  	"funabashi.chiba.jp",
  	"futtsu.chiba.jp",
  	"hanamigawa.chiba.jp",
  	"ichihara.chiba.jp",
  	"ichikawa.chiba.jp",
  	"ichinomiya.chiba.jp",
  	"inzai.chiba.jp",
  	"isumi.chiba.jp",
  	"kamagaya.chiba.jp",
  	"kamogawa.chiba.jp",
  	"kashiwa.chiba.jp",
  	"katori.chiba.jp",
  	"katsuura.chiba.jp",
  	"kimitsu.chiba.jp",
  	"kisarazu.chiba.jp",
  	"kozaki.chiba.jp",
  	"kujukuri.chiba.jp",
  	"kyonan.chiba.jp",
  	"matsudo.chiba.jp",
  	"midori.chiba.jp",
  	"mihama.chiba.jp",
  	"minamiboso.chiba.jp",
  	"mobara.chiba.jp",
  	"mutsuzawa.chiba.jp",
  	"nagara.chiba.jp",
  	"nagareyama.chiba.jp",
  	"narashino.chiba.jp",
  	"narita.chiba.jp",
  	"noda.chiba.jp",
  	"oamishirasato.chiba.jp",
  	"omigawa.chiba.jp",
  	"onjuku.chiba.jp",
  	"otaki.chiba.jp",
  	"sakae.chiba.jp",
  	"sakura.chiba.jp",
  	"shimofusa.chiba.jp",
  	"shirako.chiba.jp",
  	"shiroi.chiba.jp",
  	"shisui.chiba.jp",
  	"sodegaura.chiba.jp",
  	"sosa.chiba.jp",
  	"tako.chiba.jp",
  	"tateyama.chiba.jp",
  	"togane.chiba.jp",
  	"tohnosho.chiba.jp",
  	"tomisato.chiba.jp",
  	"urayasu.chiba.jp",
  	"yachimata.chiba.jp",
  	"yachiyo.chiba.jp",
  	"yokaichiba.chiba.jp",
  	"yokoshibahikari.chiba.jp",
  	"yotsukaido.chiba.jp",
  	"ainan.ehime.jp",
  	"honai.ehime.jp",
  	"ikata.ehime.jp",
  	"imabari.ehime.jp",
  	"iyo.ehime.jp",
  	"kamijima.ehime.jp",
  	"kihoku.ehime.jp",
  	"kumakogen.ehime.jp",
  	"masaki.ehime.jp",
  	"matsuno.ehime.jp",
  	"matsuyama.ehime.jp",
  	"namikata.ehime.jp",
  	"niihama.ehime.jp",
  	"ozu.ehime.jp",
  	"saijo.ehime.jp",
  	"seiyo.ehime.jp",
  	"shikokuchuo.ehime.jp",
  	"tobe.ehime.jp",
  	"toon.ehime.jp",
  	"uchiko.ehime.jp",
  	"uwajima.ehime.jp",
  	"yawatahama.ehime.jp",
  	"echizen.fukui.jp",
  	"eiheiji.fukui.jp",
  	"fukui.fukui.jp",
  	"ikeda.fukui.jp",
  	"katsuyama.fukui.jp",
  	"mihama.fukui.jp",
  	"minamiechizen.fukui.jp",
  	"obama.fukui.jp",
  	"ohi.fukui.jp",
  	"ono.fukui.jp",
  	"sabae.fukui.jp",
  	"sakai.fukui.jp",
  	"takahama.fukui.jp",
  	"tsuruga.fukui.jp",
  	"wakasa.fukui.jp",
  	"ashiya.fukuoka.jp",
  	"buzen.fukuoka.jp",
  	"chikugo.fukuoka.jp",
  	"chikuho.fukuoka.jp",
  	"chikujo.fukuoka.jp",
  	"chikushino.fukuoka.jp",
  	"chikuzen.fukuoka.jp",
  	"chuo.fukuoka.jp",
  	"dazaifu.fukuoka.jp",
  	"fukuchi.fukuoka.jp",
  	"hakata.fukuoka.jp",
  	"higashi.fukuoka.jp",
  	"hirokawa.fukuoka.jp",
  	"hisayama.fukuoka.jp",
  	"iizuka.fukuoka.jp",
  	"inatsuki.fukuoka.jp",
  	"kaho.fukuoka.jp",
  	"kasuga.fukuoka.jp",
  	"kasuya.fukuoka.jp",
  	"kawara.fukuoka.jp",
  	"keisen.fukuoka.jp",
  	"koga.fukuoka.jp",
  	"kurate.fukuoka.jp",
  	"kurogi.fukuoka.jp",
  	"kurume.fukuoka.jp",
  	"minami.fukuoka.jp",
  	"miyako.fukuoka.jp",
  	"miyama.fukuoka.jp",
  	"miyawaka.fukuoka.jp",
  	"mizumaki.fukuoka.jp",
  	"munakata.fukuoka.jp",
  	"nakagawa.fukuoka.jp",
  	"nakama.fukuoka.jp",
  	"nishi.fukuoka.jp",
  	"nogata.fukuoka.jp",
  	"ogori.fukuoka.jp",
  	"okagaki.fukuoka.jp",
  	"okawa.fukuoka.jp",
  	"oki.fukuoka.jp",
  	"omuta.fukuoka.jp",
  	"onga.fukuoka.jp",
  	"onojo.fukuoka.jp",
  	"oto.fukuoka.jp",
  	"saigawa.fukuoka.jp",
  	"sasaguri.fukuoka.jp",
  	"shingu.fukuoka.jp",
  	"shinyoshitomi.fukuoka.jp",
  	"shonai.fukuoka.jp",
  	"soeda.fukuoka.jp",
  	"sue.fukuoka.jp",
  	"tachiarai.fukuoka.jp",
  	"tagawa.fukuoka.jp",
  	"takata.fukuoka.jp",
  	"toho.fukuoka.jp",
  	"toyotsu.fukuoka.jp",
  	"tsuiki.fukuoka.jp",
  	"ukiha.fukuoka.jp",
  	"umi.fukuoka.jp",
  	"usui.fukuoka.jp",
  	"yamada.fukuoka.jp",
  	"yame.fukuoka.jp",
  	"yanagawa.fukuoka.jp",
  	"yukuhashi.fukuoka.jp",
  	"aizubange.fukushima.jp",
  	"aizumisato.fukushima.jp",
  	"aizuwakamatsu.fukushima.jp",
  	"asakawa.fukushima.jp",
  	"bandai.fukushima.jp",
  	"date.fukushima.jp",
  	"fukushima.fukushima.jp",
  	"furudono.fukushima.jp",
  	"futaba.fukushima.jp",
  	"hanawa.fukushima.jp",
  	"higashi.fukushima.jp",
  	"hirata.fukushima.jp",
  	"hirono.fukushima.jp",
  	"iitate.fukushima.jp",
  	"inawashiro.fukushima.jp",
  	"ishikawa.fukushima.jp",
  	"iwaki.fukushima.jp",
  	"izumizaki.fukushima.jp",
  	"kagamiishi.fukushima.jp",
  	"kaneyama.fukushima.jp",
  	"kawamata.fukushima.jp",
  	"kitakata.fukushima.jp",
  	"kitashiobara.fukushima.jp",
  	"koori.fukushima.jp",
  	"koriyama.fukushima.jp",
  	"kunimi.fukushima.jp",
  	"miharu.fukushima.jp",
  	"mishima.fukushima.jp",
  	"namie.fukushima.jp",
  	"nango.fukushima.jp",
  	"nishiaizu.fukushima.jp",
  	"nishigo.fukushima.jp",
  	"okuma.fukushima.jp",
  	"omotego.fukushima.jp",
  	"ono.fukushima.jp",
  	"otama.fukushima.jp",
  	"samegawa.fukushima.jp",
  	"shimogo.fukushima.jp",
  	"shirakawa.fukushima.jp",
  	"showa.fukushima.jp",
  	"soma.fukushima.jp",
  	"sukagawa.fukushima.jp",
  	"taishin.fukushima.jp",
  	"tamakawa.fukushima.jp",
  	"tanagura.fukushima.jp",
  	"tenei.fukushima.jp",
  	"yabuki.fukushima.jp",
  	"yamato.fukushima.jp",
  	"yamatsuri.fukushima.jp",
  	"yanaizu.fukushima.jp",
  	"yugawa.fukushima.jp",
  	"anpachi.gifu.jp",
  	"ena.gifu.jp",
  	"gifu.gifu.jp",
  	"ginan.gifu.jp",
  	"godo.gifu.jp",
  	"gujo.gifu.jp",
  	"hashima.gifu.jp",
  	"hichiso.gifu.jp",
  	"hida.gifu.jp",
  	"higashishirakawa.gifu.jp",
  	"ibigawa.gifu.jp",
  	"ikeda.gifu.jp",
  	"kakamigahara.gifu.jp",
  	"kani.gifu.jp",
  	"kasahara.gifu.jp",
  	"kasamatsu.gifu.jp",
  	"kawaue.gifu.jp",
  	"kitagata.gifu.jp",
  	"mino.gifu.jp",
  	"minokamo.gifu.jp",
  	"mitake.gifu.jp",
  	"mizunami.gifu.jp",
  	"motosu.gifu.jp",
  	"nakatsugawa.gifu.jp",
  	"ogaki.gifu.jp",
  	"sakahogi.gifu.jp",
  	"seki.gifu.jp",
  	"sekigahara.gifu.jp",
  	"shirakawa.gifu.jp",
  	"tajimi.gifu.jp",
  	"takayama.gifu.jp",
  	"tarui.gifu.jp",
  	"toki.gifu.jp",
  	"tomika.gifu.jp",
  	"wanouchi.gifu.jp",
  	"yamagata.gifu.jp",
  	"yaotsu.gifu.jp",
  	"yoro.gifu.jp",
  	"annaka.gunma.jp",
  	"chiyoda.gunma.jp",
  	"fujioka.gunma.jp",
  	"higashiagatsuma.gunma.jp",
  	"isesaki.gunma.jp",
  	"itakura.gunma.jp",
  	"kanna.gunma.jp",
  	"kanra.gunma.jp",
  	"katashina.gunma.jp",
  	"kawaba.gunma.jp",
  	"kiryu.gunma.jp",
  	"kusatsu.gunma.jp",
  	"maebashi.gunma.jp",
  	"meiwa.gunma.jp",
  	"midori.gunma.jp",
  	"minakami.gunma.jp",
  	"naganohara.gunma.jp",
  	"nakanojo.gunma.jp",
  	"nanmoku.gunma.jp",
  	"numata.gunma.jp",
  	"oizumi.gunma.jp",
  	"ora.gunma.jp",
  	"ota.gunma.jp",
  	"shibukawa.gunma.jp",
  	"shimonita.gunma.jp",
  	"shinto.gunma.jp",
  	"showa.gunma.jp",
  	"takasaki.gunma.jp",
  	"takayama.gunma.jp",
  	"tamamura.gunma.jp",
  	"tatebayashi.gunma.jp",
  	"tomioka.gunma.jp",
  	"tsukiyono.gunma.jp",
  	"tsumagoi.gunma.jp",
  	"ueno.gunma.jp",
  	"yoshioka.gunma.jp",
  	"asaminami.hiroshima.jp",
  	"daiwa.hiroshima.jp",
  	"etajima.hiroshima.jp",
  	"fuchu.hiroshima.jp",
  	"fukuyama.hiroshima.jp",
  	"hatsukaichi.hiroshima.jp",
  	"higashihiroshima.hiroshima.jp",
  	"hongo.hiroshima.jp",
  	"jinsekikogen.hiroshima.jp",
  	"kaita.hiroshima.jp",
  	"kui.hiroshima.jp",
  	"kumano.hiroshima.jp",
  	"kure.hiroshima.jp",
  	"mihara.hiroshima.jp",
  	"miyoshi.hiroshima.jp",
  	"naka.hiroshima.jp",
  	"onomichi.hiroshima.jp",
  	"osakikamijima.hiroshima.jp",
  	"otake.hiroshima.jp",
  	"saka.hiroshima.jp",
  	"sera.hiroshima.jp",
  	"seranishi.hiroshima.jp",
  	"shinichi.hiroshima.jp",
  	"shobara.hiroshima.jp",
  	"takehara.hiroshima.jp",
  	"abashiri.hokkaido.jp",
  	"abira.hokkaido.jp",
  	"aibetsu.hokkaido.jp",
  	"akabira.hokkaido.jp",
  	"akkeshi.hokkaido.jp",
  	"asahikawa.hokkaido.jp",
  	"ashibetsu.hokkaido.jp",
  	"ashoro.hokkaido.jp",
  	"assabu.hokkaido.jp",
  	"atsuma.hokkaido.jp",
  	"bibai.hokkaido.jp",
  	"biei.hokkaido.jp",
  	"bifuka.hokkaido.jp",
  	"bihoro.hokkaido.jp",
  	"biratori.hokkaido.jp",
  	"chippubetsu.hokkaido.jp",
  	"chitose.hokkaido.jp",
  	"date.hokkaido.jp",
  	"ebetsu.hokkaido.jp",
  	"embetsu.hokkaido.jp",
  	"eniwa.hokkaido.jp",
  	"erimo.hokkaido.jp",
  	"esan.hokkaido.jp",
  	"esashi.hokkaido.jp",
  	"fukagawa.hokkaido.jp",
  	"fukushima.hokkaido.jp",
  	"furano.hokkaido.jp",
  	"furubira.hokkaido.jp",
  	"haboro.hokkaido.jp",
  	"hakodate.hokkaido.jp",
  	"hamatonbetsu.hokkaido.jp",
  	"hidaka.hokkaido.jp",
  	"higashikagura.hokkaido.jp",
  	"higashikawa.hokkaido.jp",
  	"hiroo.hokkaido.jp",
  	"hokuryu.hokkaido.jp",
  	"hokuto.hokkaido.jp",
  	"honbetsu.hokkaido.jp",
  	"horokanai.hokkaido.jp",
  	"horonobe.hokkaido.jp",
  	"ikeda.hokkaido.jp",
  	"imakane.hokkaido.jp",
  	"ishikari.hokkaido.jp",
  	"iwamizawa.hokkaido.jp",
  	"iwanai.hokkaido.jp",
  	"kamifurano.hokkaido.jp",
  	"kamikawa.hokkaido.jp",
  	"kamishihoro.hokkaido.jp",
  	"kamisunagawa.hokkaido.jp",
  	"kamoenai.hokkaido.jp",
  	"kayabe.hokkaido.jp",
  	"kembuchi.hokkaido.jp",
  	"kikonai.hokkaido.jp",
  	"kimobetsu.hokkaido.jp",
  	"kitahiroshima.hokkaido.jp",
  	"kitami.hokkaido.jp",
  	"kiyosato.hokkaido.jp",
  	"koshimizu.hokkaido.jp",
  	"kunneppu.hokkaido.jp",
  	"kuriyama.hokkaido.jp",
  	"kuromatsunai.hokkaido.jp",
  	"kushiro.hokkaido.jp",
  	"kutchan.hokkaido.jp",
  	"kyowa.hokkaido.jp",
  	"mashike.hokkaido.jp",
  	"matsumae.hokkaido.jp",
  	"mikasa.hokkaido.jp",
  	"minamifurano.hokkaido.jp",
  	"mombetsu.hokkaido.jp",
  	"moseushi.hokkaido.jp",
  	"mukawa.hokkaido.jp",
  	"muroran.hokkaido.jp",
  	"naie.hokkaido.jp",
  	"nakagawa.hokkaido.jp",
  	"nakasatsunai.hokkaido.jp",
  	"nakatombetsu.hokkaido.jp",
  	"nanae.hokkaido.jp",
  	"nanporo.hokkaido.jp",
  	"nayoro.hokkaido.jp",
  	"nemuro.hokkaido.jp",
  	"niikappu.hokkaido.jp",
  	"niki.hokkaido.jp",
  	"nishiokoppe.hokkaido.jp",
  	"noboribetsu.hokkaido.jp",
  	"numata.hokkaido.jp",
  	"obihiro.hokkaido.jp",
  	"obira.hokkaido.jp",
  	"oketo.hokkaido.jp",
  	"okoppe.hokkaido.jp",
  	"otaru.hokkaido.jp",
  	"otobe.hokkaido.jp",
  	"otofuke.hokkaido.jp",
  	"otoineppu.hokkaido.jp",
  	"oumu.hokkaido.jp",
  	"ozora.hokkaido.jp",
  	"pippu.hokkaido.jp",
  	"rankoshi.hokkaido.jp",
  	"rebun.hokkaido.jp",
  	"rikubetsu.hokkaido.jp",
  	"rishiri.hokkaido.jp",
  	"rishirifuji.hokkaido.jp",
  	"saroma.hokkaido.jp",
  	"sarufutsu.hokkaido.jp",
  	"shakotan.hokkaido.jp",
  	"shari.hokkaido.jp",
  	"shibecha.hokkaido.jp",
  	"shibetsu.hokkaido.jp",
  	"shikabe.hokkaido.jp",
  	"shikaoi.hokkaido.jp",
  	"shimamaki.hokkaido.jp",
  	"shimizu.hokkaido.jp",
  	"shimokawa.hokkaido.jp",
  	"shinshinotsu.hokkaido.jp",
  	"shintoku.hokkaido.jp",
  	"shiranuka.hokkaido.jp",
  	"shiraoi.hokkaido.jp",
  	"shiriuchi.hokkaido.jp",
  	"sobetsu.hokkaido.jp",
  	"sunagawa.hokkaido.jp",
  	"taiki.hokkaido.jp",
  	"takasu.hokkaido.jp",
  	"takikawa.hokkaido.jp",
  	"takinoue.hokkaido.jp",
  	"teshikaga.hokkaido.jp",
  	"tobetsu.hokkaido.jp",
  	"tohma.hokkaido.jp",
  	"tomakomai.hokkaido.jp",
  	"tomari.hokkaido.jp",
  	"toya.hokkaido.jp",
  	"toyako.hokkaido.jp",
  	"toyotomi.hokkaido.jp",
  	"toyoura.hokkaido.jp",
  	"tsubetsu.hokkaido.jp",
  	"tsukigata.hokkaido.jp",
  	"urakawa.hokkaido.jp",
  	"urausu.hokkaido.jp",
  	"uryu.hokkaido.jp",
  	"utashinai.hokkaido.jp",
  	"wakkanai.hokkaido.jp",
  	"wassamu.hokkaido.jp",
  	"yakumo.hokkaido.jp",
  	"yoichi.hokkaido.jp",
  	"aioi.hyogo.jp",
  	"akashi.hyogo.jp",
  	"ako.hyogo.jp",
  	"amagasaki.hyogo.jp",
  	"aogaki.hyogo.jp",
  	"asago.hyogo.jp",
  	"ashiya.hyogo.jp",
  	"awaji.hyogo.jp",
  	"fukusaki.hyogo.jp",
  	"goshiki.hyogo.jp",
  	"harima.hyogo.jp",
  	"himeji.hyogo.jp",
  	"ichikawa.hyogo.jp",
  	"inagawa.hyogo.jp",
  	"itami.hyogo.jp",
  	"kakogawa.hyogo.jp",
  	"kamigori.hyogo.jp",
  	"kamikawa.hyogo.jp",
  	"kasai.hyogo.jp",
  	"kasuga.hyogo.jp",
  	"kawanishi.hyogo.jp",
  	"miki.hyogo.jp",
  	"minamiawaji.hyogo.jp",
  	"nishinomiya.hyogo.jp",
  	"nishiwaki.hyogo.jp",
  	"ono.hyogo.jp",
  	"sanda.hyogo.jp",
  	"sannan.hyogo.jp",
  	"sasayama.hyogo.jp",
  	"sayo.hyogo.jp",
  	"shingu.hyogo.jp",
  	"shinonsen.hyogo.jp",
  	"shiso.hyogo.jp",
  	"sumoto.hyogo.jp",
  	"taishi.hyogo.jp",
  	"taka.hyogo.jp",
  	"takarazuka.hyogo.jp",
  	"takasago.hyogo.jp",
  	"takino.hyogo.jp",
  	"tamba.hyogo.jp",
  	"tatsuno.hyogo.jp",
  	"toyooka.hyogo.jp",
  	"yabu.hyogo.jp",
  	"yashiro.hyogo.jp",
  	"yoka.hyogo.jp",
  	"yokawa.hyogo.jp",
  	"ami.ibaraki.jp",
  	"asahi.ibaraki.jp",
  	"bando.ibaraki.jp",
  	"chikusei.ibaraki.jp",
  	"daigo.ibaraki.jp",
  	"fujishiro.ibaraki.jp",
  	"hitachi.ibaraki.jp",
  	"hitachinaka.ibaraki.jp",
  	"hitachiomiya.ibaraki.jp",
  	"hitachiota.ibaraki.jp",
  	"ibaraki.ibaraki.jp",
  	"ina.ibaraki.jp",
  	"inashiki.ibaraki.jp",
  	"itako.ibaraki.jp",
  	"iwama.ibaraki.jp",
  	"joso.ibaraki.jp",
  	"kamisu.ibaraki.jp",
  	"kasama.ibaraki.jp",
  	"kashima.ibaraki.jp",
  	"kasumigaura.ibaraki.jp",
  	"koga.ibaraki.jp",
  	"miho.ibaraki.jp",
  	"mito.ibaraki.jp",
  	"moriya.ibaraki.jp",
  	"naka.ibaraki.jp",
  	"namegata.ibaraki.jp",
  	"oarai.ibaraki.jp",
  	"ogawa.ibaraki.jp",
  	"omitama.ibaraki.jp",
  	"ryugasaki.ibaraki.jp",
  	"sakai.ibaraki.jp",
  	"sakuragawa.ibaraki.jp",
  	"shimodate.ibaraki.jp",
  	"shimotsuma.ibaraki.jp",
  	"shirosato.ibaraki.jp",
  	"sowa.ibaraki.jp",
  	"suifu.ibaraki.jp",
  	"takahagi.ibaraki.jp",
  	"tamatsukuri.ibaraki.jp",
  	"tokai.ibaraki.jp",
  	"tomobe.ibaraki.jp",
  	"tone.ibaraki.jp",
  	"toride.ibaraki.jp",
  	"tsuchiura.ibaraki.jp",
  	"tsukuba.ibaraki.jp",
  	"uchihara.ibaraki.jp",
  	"ushiku.ibaraki.jp",
  	"yachiyo.ibaraki.jp",
  	"yamagata.ibaraki.jp",
  	"yawara.ibaraki.jp",
  	"yuki.ibaraki.jp",
  	"anamizu.ishikawa.jp",
  	"hakui.ishikawa.jp",
  	"hakusan.ishikawa.jp",
  	"kaga.ishikawa.jp",
  	"kahoku.ishikawa.jp",
  	"kanazawa.ishikawa.jp",
  	"kawakita.ishikawa.jp",
  	"komatsu.ishikawa.jp",
  	"nakanoto.ishikawa.jp",
  	"nanao.ishikawa.jp",
  	"nomi.ishikawa.jp",
  	"nonoichi.ishikawa.jp",
  	"noto.ishikawa.jp",
  	"shika.ishikawa.jp",
  	"suzu.ishikawa.jp",
  	"tsubata.ishikawa.jp",
  	"tsurugi.ishikawa.jp",
  	"uchinada.ishikawa.jp",
  	"wajima.ishikawa.jp",
  	"fudai.iwate.jp",
  	"fujisawa.iwate.jp",
  	"hanamaki.iwate.jp",
  	"hiraizumi.iwate.jp",
  	"hirono.iwate.jp",
  	"ichinohe.iwate.jp",
  	"ichinoseki.iwate.jp",
  	"iwaizumi.iwate.jp",
  	"iwate.iwate.jp",
  	"joboji.iwate.jp",
  	"kamaishi.iwate.jp",
  	"kanegasaki.iwate.jp",
  	"karumai.iwate.jp",
  	"kawai.iwate.jp",
  	"kitakami.iwate.jp",
  	"kuji.iwate.jp",
  	"kunohe.iwate.jp",
  	"kuzumaki.iwate.jp",
  	"miyako.iwate.jp",
  	"mizusawa.iwate.jp",
  	"morioka.iwate.jp",
  	"ninohe.iwate.jp",
  	"noda.iwate.jp",
  	"ofunato.iwate.jp",
  	"oshu.iwate.jp",
  	"otsuchi.iwate.jp",
  	"rikuzentakata.iwate.jp",
  	"shiwa.iwate.jp",
  	"shizukuishi.iwate.jp",
  	"sumita.iwate.jp",
  	"tanohata.iwate.jp",
  	"tono.iwate.jp",
  	"yahaba.iwate.jp",
  	"yamada.iwate.jp",
  	"ayagawa.kagawa.jp",
  	"higashikagawa.kagawa.jp",
  	"kanonji.kagawa.jp",
  	"kotohira.kagawa.jp",
  	"manno.kagawa.jp",
  	"marugame.kagawa.jp",
  	"mitoyo.kagawa.jp",
  	"naoshima.kagawa.jp",
  	"sanuki.kagawa.jp",
  	"tadotsu.kagawa.jp",
  	"takamatsu.kagawa.jp",
  	"tonosho.kagawa.jp",
  	"uchinomi.kagawa.jp",
  	"utazu.kagawa.jp",
  	"zentsuji.kagawa.jp",
  	"akune.kagoshima.jp",
  	"amami.kagoshima.jp",
  	"hioki.kagoshima.jp",
  	"isa.kagoshima.jp",
  	"isen.kagoshima.jp",
  	"izumi.kagoshima.jp",
  	"kagoshima.kagoshima.jp",
  	"kanoya.kagoshima.jp",
  	"kawanabe.kagoshima.jp",
  	"kinko.kagoshima.jp",
  	"kouyama.kagoshima.jp",
  	"makurazaki.kagoshima.jp",
  	"matsumoto.kagoshima.jp",
  	"minamitane.kagoshima.jp",
  	"nakatane.kagoshima.jp",
  	"nishinoomote.kagoshima.jp",
  	"satsumasendai.kagoshima.jp",
  	"soo.kagoshima.jp",
  	"tarumizu.kagoshima.jp",
  	"yusui.kagoshima.jp",
  	"aikawa.kanagawa.jp",
  	"atsugi.kanagawa.jp",
  	"ayase.kanagawa.jp",
  	"chigasaki.kanagawa.jp",
  	"ebina.kanagawa.jp",
  	"fujisawa.kanagawa.jp",
  	"hadano.kanagawa.jp",
  	"hakone.kanagawa.jp",
  	"hiratsuka.kanagawa.jp",
  	"isehara.kanagawa.jp",
  	"kaisei.kanagawa.jp",
  	"kamakura.kanagawa.jp",
  	"kiyokawa.kanagawa.jp",
  	"matsuda.kanagawa.jp",
  	"minamiashigara.kanagawa.jp",
  	"miura.kanagawa.jp",
  	"nakai.kanagawa.jp",
  	"ninomiya.kanagawa.jp",
  	"odawara.kanagawa.jp",
  	"oi.kanagawa.jp",
  	"oiso.kanagawa.jp",
  	"sagamihara.kanagawa.jp",
  	"samukawa.kanagawa.jp",
  	"tsukui.kanagawa.jp",
  	"yamakita.kanagawa.jp",
  	"yamato.kanagawa.jp",
  	"yokosuka.kanagawa.jp",
  	"yugawara.kanagawa.jp",
  	"zama.kanagawa.jp",
  	"zushi.kanagawa.jp",
  	"aki.kochi.jp",
  	"geisei.kochi.jp",
  	"hidaka.kochi.jp",
  	"higashitsuno.kochi.jp",
  	"ino.kochi.jp",
  	"kagami.kochi.jp",
  	"kami.kochi.jp",
  	"kitagawa.kochi.jp",
  	"kochi.kochi.jp",
  	"mihara.kochi.jp",
  	"motoyama.kochi.jp",
  	"muroto.kochi.jp",
  	"nahari.kochi.jp",
  	"nakamura.kochi.jp",
  	"nankoku.kochi.jp",
  	"nishitosa.kochi.jp",
  	"niyodogawa.kochi.jp",
  	"ochi.kochi.jp",
  	"okawa.kochi.jp",
  	"otoyo.kochi.jp",
  	"otsuki.kochi.jp",
  	"sakawa.kochi.jp",
  	"sukumo.kochi.jp",
  	"susaki.kochi.jp",
  	"tosa.kochi.jp",
  	"tosashimizu.kochi.jp",
  	"toyo.kochi.jp",
  	"tsuno.kochi.jp",
  	"umaji.kochi.jp",
  	"yasuda.kochi.jp",
  	"yusuhara.kochi.jp",
  	"amakusa.kumamoto.jp",
  	"arao.kumamoto.jp",
  	"aso.kumamoto.jp",
  	"choyo.kumamoto.jp",
  	"gyokuto.kumamoto.jp",
  	"kamiamakusa.kumamoto.jp",
  	"kikuchi.kumamoto.jp",
  	"kumamoto.kumamoto.jp",
  	"mashiki.kumamoto.jp",
  	"mifune.kumamoto.jp",
  	"minamata.kumamoto.jp",
  	"minamioguni.kumamoto.jp",
  	"nagasu.kumamoto.jp",
  	"nishihara.kumamoto.jp",
  	"oguni.kumamoto.jp",
  	"ozu.kumamoto.jp",
  	"sumoto.kumamoto.jp",
  	"takamori.kumamoto.jp",
  	"uki.kumamoto.jp",
  	"uto.kumamoto.jp",
  	"yamaga.kumamoto.jp",
  	"yamato.kumamoto.jp",
  	"yatsushiro.kumamoto.jp",
  	"ayabe.kyoto.jp",
  	"fukuchiyama.kyoto.jp",
  	"higashiyama.kyoto.jp",
  	"ide.kyoto.jp",
  	"ine.kyoto.jp",
  	"joyo.kyoto.jp",
  	"kameoka.kyoto.jp",
  	"kamo.kyoto.jp",
  	"kita.kyoto.jp",
  	"kizu.kyoto.jp",
  	"kumiyama.kyoto.jp",
  	"kyotamba.kyoto.jp",
  	"kyotanabe.kyoto.jp",
  	"kyotango.kyoto.jp",
  	"maizuru.kyoto.jp",
  	"minami.kyoto.jp",
  	"minamiyamashiro.kyoto.jp",
  	"miyazu.kyoto.jp",
  	"muko.kyoto.jp",
  	"nagaokakyo.kyoto.jp",
  	"nakagyo.kyoto.jp",
  	"nantan.kyoto.jp",
  	"oyamazaki.kyoto.jp",
  	"sakyo.kyoto.jp",
  	"seika.kyoto.jp",
  	"tanabe.kyoto.jp",
  	"uji.kyoto.jp",
  	"ujitawara.kyoto.jp",
  	"wazuka.kyoto.jp",
  	"yamashina.kyoto.jp",
  	"yawata.kyoto.jp",
  	"asahi.mie.jp",
  	"inabe.mie.jp",
  	"ise.mie.jp",
  	"kameyama.mie.jp",
  	"kawagoe.mie.jp",
  	"kiho.mie.jp",
  	"kisosaki.mie.jp",
  	"kiwa.mie.jp",
  	"komono.mie.jp",
  	"kumano.mie.jp",
  	"kuwana.mie.jp",
  	"matsusaka.mie.jp",
  	"meiwa.mie.jp",
  	"mihama.mie.jp",
  	"minamiise.mie.jp",
  	"misugi.mie.jp",
  	"miyama.mie.jp",
  	"nabari.mie.jp",
  	"shima.mie.jp",
  	"suzuka.mie.jp",
  	"tado.mie.jp",
  	"taiki.mie.jp",
  	"taki.mie.jp",
  	"tamaki.mie.jp",
  	"toba.mie.jp",
  	"tsu.mie.jp",
  	"udono.mie.jp",
  	"ureshino.mie.jp",
  	"watarai.mie.jp",
  	"yokkaichi.mie.jp",
  	"furukawa.miyagi.jp",
  	"higashimatsushima.miyagi.jp",
  	"ishinomaki.miyagi.jp",
  	"iwanuma.miyagi.jp",
  	"kakuda.miyagi.jp",
  	"kami.miyagi.jp",
  	"kawasaki.miyagi.jp",
  	"marumori.miyagi.jp",
  	"matsushima.miyagi.jp",
  	"minamisanriku.miyagi.jp",
  	"misato.miyagi.jp",
  	"murata.miyagi.jp",
  	"natori.miyagi.jp",
  	"ogawara.miyagi.jp",
  	"ohira.miyagi.jp",
  	"onagawa.miyagi.jp",
  	"osaki.miyagi.jp",
  	"rifu.miyagi.jp",
  	"semine.miyagi.jp",
  	"shibata.miyagi.jp",
  	"shichikashuku.miyagi.jp",
  	"shikama.miyagi.jp",
  	"shiogama.miyagi.jp",
  	"shiroishi.miyagi.jp",
  	"tagajo.miyagi.jp",
  	"taiwa.miyagi.jp",
  	"tome.miyagi.jp",
  	"tomiya.miyagi.jp",
  	"wakuya.miyagi.jp",
  	"watari.miyagi.jp",
  	"yamamoto.miyagi.jp",
  	"zao.miyagi.jp",
  	"aya.miyazaki.jp",
  	"ebino.miyazaki.jp",
  	"gokase.miyazaki.jp",
  	"hyuga.miyazaki.jp",
  	"kadogawa.miyazaki.jp",
  	"kawaminami.miyazaki.jp",
  	"kijo.miyazaki.jp",
  	"kitagawa.miyazaki.jp",
  	"kitakata.miyazaki.jp",
  	"kitaura.miyazaki.jp",
  	"kobayashi.miyazaki.jp",
  	"kunitomi.miyazaki.jp",
  	"kushima.miyazaki.jp",
  	"mimata.miyazaki.jp",
  	"miyakonojo.miyazaki.jp",
  	"miyazaki.miyazaki.jp",
  	"morotsuka.miyazaki.jp",
  	"nichinan.miyazaki.jp",
  	"nishimera.miyazaki.jp",
  	"nobeoka.miyazaki.jp",
  	"saito.miyazaki.jp",
  	"shiiba.miyazaki.jp",
  	"shintomi.miyazaki.jp",
  	"takaharu.miyazaki.jp",
  	"takanabe.miyazaki.jp",
  	"takazaki.miyazaki.jp",
  	"tsuno.miyazaki.jp",
  	"achi.nagano.jp",
  	"agematsu.nagano.jp",
  	"anan.nagano.jp",
  	"aoki.nagano.jp",
  	"asahi.nagano.jp",
  	"azumino.nagano.jp",
  	"chikuhoku.nagano.jp",
  	"chikuma.nagano.jp",
  	"chino.nagano.jp",
  	"fujimi.nagano.jp",
  	"hakuba.nagano.jp",
  	"hara.nagano.jp",
  	"hiraya.nagano.jp",
  	"iida.nagano.jp",
  	"iijima.nagano.jp",
  	"iiyama.nagano.jp",
  	"iizuna.nagano.jp",
  	"ikeda.nagano.jp",
  	"ikusaka.nagano.jp",
  	"ina.nagano.jp",
  	"karuizawa.nagano.jp",
  	"kawakami.nagano.jp",
  	"kiso.nagano.jp",
  	"kisofukushima.nagano.jp",
  	"kitaaiki.nagano.jp",
  	"komagane.nagano.jp",
  	"komoro.nagano.jp",
  	"matsukawa.nagano.jp",
  	"matsumoto.nagano.jp",
  	"miasa.nagano.jp",
  	"minamiaiki.nagano.jp",
  	"minamimaki.nagano.jp",
  	"minamiminowa.nagano.jp",
  	"minowa.nagano.jp",
  	"miyada.nagano.jp",
  	"miyota.nagano.jp",
  	"mochizuki.nagano.jp",
  	"nagano.nagano.jp",
  	"nagawa.nagano.jp",
  	"nagiso.nagano.jp",
  	"nakagawa.nagano.jp",
  	"nakano.nagano.jp",
  	"nozawaonsen.nagano.jp",
  	"obuse.nagano.jp",
  	"ogawa.nagano.jp",
  	"okaya.nagano.jp",
  	"omachi.nagano.jp",
  	"omi.nagano.jp",
  	"ookuwa.nagano.jp",
  	"ooshika.nagano.jp",
  	"otaki.nagano.jp",
  	"otari.nagano.jp",
  	"sakae.nagano.jp",
  	"sakaki.nagano.jp",
  	"saku.nagano.jp",
  	"sakuho.nagano.jp",
  	"shimosuwa.nagano.jp",
  	"shinanomachi.nagano.jp",
  	"shiojiri.nagano.jp",
  	"suwa.nagano.jp",
  	"suzaka.nagano.jp",
  	"takagi.nagano.jp",
  	"takamori.nagano.jp",
  	"takayama.nagano.jp",
  	"tateshina.nagano.jp",
  	"tatsuno.nagano.jp",
  	"togakushi.nagano.jp",
  	"togura.nagano.jp",
  	"tomi.nagano.jp",
  	"ueda.nagano.jp",
  	"wada.nagano.jp",
  	"yamagata.nagano.jp",
  	"yamanouchi.nagano.jp",
  	"yasaka.nagano.jp",
  	"yasuoka.nagano.jp",
  	"chijiwa.nagasaki.jp",
  	"futsu.nagasaki.jp",
  	"goto.nagasaki.jp",
  	"hasami.nagasaki.jp",
  	"hirado.nagasaki.jp",
  	"iki.nagasaki.jp",
  	"isahaya.nagasaki.jp",
  	"kawatana.nagasaki.jp",
  	"kuchinotsu.nagasaki.jp",
  	"matsuura.nagasaki.jp",
  	"nagasaki.nagasaki.jp",
  	"obama.nagasaki.jp",
  	"omura.nagasaki.jp",
  	"oseto.nagasaki.jp",
  	"saikai.nagasaki.jp",
  	"sasebo.nagasaki.jp",
  	"seihi.nagasaki.jp",
  	"shimabara.nagasaki.jp",
  	"shinkamigoto.nagasaki.jp",
  	"togitsu.nagasaki.jp",
  	"tsushima.nagasaki.jp",
  	"unzen.nagasaki.jp",
  	"ando.nara.jp",
  	"gose.nara.jp",
  	"heguri.nara.jp",
  	"higashiyoshino.nara.jp",
  	"ikaruga.nara.jp",
  	"ikoma.nara.jp",
  	"kamikitayama.nara.jp",
  	"kanmaki.nara.jp",
  	"kashiba.nara.jp",
  	"kashihara.nara.jp",
  	"katsuragi.nara.jp",
  	"kawai.nara.jp",
  	"kawakami.nara.jp",
  	"kawanishi.nara.jp",
  	"koryo.nara.jp",
  	"kurotaki.nara.jp",
  	"mitsue.nara.jp",
  	"miyake.nara.jp",
  	"nara.nara.jp",
  	"nosegawa.nara.jp",
  	"oji.nara.jp",
  	"ouda.nara.jp",
  	"oyodo.nara.jp",
  	"sakurai.nara.jp",
  	"sango.nara.jp",
  	"shimoichi.nara.jp",
  	"shimokitayama.nara.jp",
  	"shinjo.nara.jp",
  	"soni.nara.jp",
  	"takatori.nara.jp",
  	"tawaramoto.nara.jp",
  	"tenkawa.nara.jp",
  	"tenri.nara.jp",
  	"uda.nara.jp",
  	"yamatokoriyama.nara.jp",
  	"yamatotakada.nara.jp",
  	"yamazoe.nara.jp",
  	"yoshino.nara.jp",
  	"aga.niigata.jp",
  	"agano.niigata.jp",
  	"gosen.niigata.jp",
  	"itoigawa.niigata.jp",
  	"izumozaki.niigata.jp",
  	"joetsu.niigata.jp",
  	"kamo.niigata.jp",
  	"kariwa.niigata.jp",
  	"kashiwazaki.niigata.jp",
  	"minamiuonuma.niigata.jp",
  	"mitsuke.niigata.jp",
  	"muika.niigata.jp",
  	"murakami.niigata.jp",
  	"myoko.niigata.jp",
  	"nagaoka.niigata.jp",
  	"niigata.niigata.jp",
  	"ojiya.niigata.jp",
  	"omi.niigata.jp",
  	"sado.niigata.jp",
  	"sanjo.niigata.jp",
  	"seiro.niigata.jp",
  	"seirou.niigata.jp",
  	"sekikawa.niigata.jp",
  	"shibata.niigata.jp",
  	"tagami.niigata.jp",
  	"tainai.niigata.jp",
  	"tochio.niigata.jp",
  	"tokamachi.niigata.jp",
  	"tsubame.niigata.jp",
  	"tsunan.niigata.jp",
  	"uonuma.niigata.jp",
  	"yahiko.niigata.jp",
  	"yoita.niigata.jp",
  	"yuzawa.niigata.jp",
  	"beppu.oita.jp",
  	"bungoono.oita.jp",
  	"bungotakada.oita.jp",
  	"hasama.oita.jp",
  	"hiji.oita.jp",
  	"himeshima.oita.jp",
  	"hita.oita.jp",
  	"kamitsue.oita.jp",
  	"kokonoe.oita.jp",
  	"kuju.oita.jp",
  	"kunisaki.oita.jp",
  	"kusu.oita.jp",
  	"oita.oita.jp",
  	"saiki.oita.jp",
  	"taketa.oita.jp",
  	"tsukumi.oita.jp",
  	"usa.oita.jp",
  	"usuki.oita.jp",
  	"yufu.oita.jp",
  	"akaiwa.okayama.jp",
  	"asakuchi.okayama.jp",
  	"bizen.okayama.jp",
  	"hayashima.okayama.jp",
  	"ibara.okayama.jp",
  	"kagamino.okayama.jp",
  	"kasaoka.okayama.jp",
  	"kibichuo.okayama.jp",
  	"kumenan.okayama.jp",
  	"kurashiki.okayama.jp",
  	"maniwa.okayama.jp",
  	"misaki.okayama.jp",
  	"nagi.okayama.jp",
  	"niimi.okayama.jp",
  	"nishiawakura.okayama.jp",
  	"okayama.okayama.jp",
  	"satosho.okayama.jp",
  	"setouchi.okayama.jp",
  	"shinjo.okayama.jp",
  	"shoo.okayama.jp",
  	"soja.okayama.jp",
  	"takahashi.okayama.jp",
  	"tamano.okayama.jp",
  	"tsuyama.okayama.jp",
  	"wake.okayama.jp",
  	"yakage.okayama.jp",
  	"aguni.okinawa.jp",
  	"ginowan.okinawa.jp",
  	"ginoza.okinawa.jp",
  	"gushikami.okinawa.jp",
  	"haebaru.okinawa.jp",
  	"higashi.okinawa.jp",
  	"hirara.okinawa.jp",
  	"iheya.okinawa.jp",
  	"ishigaki.okinawa.jp",
  	"ishikawa.okinawa.jp",
  	"itoman.okinawa.jp",
  	"izena.okinawa.jp",
  	"kadena.okinawa.jp",
  	"kin.okinawa.jp",
  	"kitadaito.okinawa.jp",
  	"kitanakagusuku.okinawa.jp",
  	"kumejima.okinawa.jp",
  	"kunigami.okinawa.jp",
  	"minamidaito.okinawa.jp",
  	"motobu.okinawa.jp",
  	"nago.okinawa.jp",
  	"naha.okinawa.jp",
  	"nakagusuku.okinawa.jp",
  	"nakijin.okinawa.jp",
  	"nanjo.okinawa.jp",
  	"nishihara.okinawa.jp",
  	"ogimi.okinawa.jp",
  	"okinawa.okinawa.jp",
  	"onna.okinawa.jp",
  	"shimoji.okinawa.jp",
  	"taketomi.okinawa.jp",
  	"tarama.okinawa.jp",
  	"tokashiki.okinawa.jp",
  	"tomigusuku.okinawa.jp",
  	"tonaki.okinawa.jp",
  	"urasoe.okinawa.jp",
  	"uruma.okinawa.jp",
  	"yaese.okinawa.jp",
  	"yomitan.okinawa.jp",
  	"yonabaru.okinawa.jp",
  	"yonaguni.okinawa.jp",
  	"zamami.okinawa.jp",
  	"abeno.osaka.jp",
  	"chihayaakasaka.osaka.jp",
  	"chuo.osaka.jp",
  	"daito.osaka.jp",
  	"fujiidera.osaka.jp",
  	"habikino.osaka.jp",
  	"hannan.osaka.jp",
  	"higashiosaka.osaka.jp",
  	"higashisumiyoshi.osaka.jp",
  	"higashiyodogawa.osaka.jp",
  	"hirakata.osaka.jp",
  	"ibaraki.osaka.jp",
  	"ikeda.osaka.jp",
  	"izumi.osaka.jp",
  	"izumiotsu.osaka.jp",
  	"izumisano.osaka.jp",
  	"kadoma.osaka.jp",
  	"kaizuka.osaka.jp",
  	"kanan.osaka.jp",
  	"kashiwara.osaka.jp",
  	"katano.osaka.jp",
  	"kawachinagano.osaka.jp",
  	"kishiwada.osaka.jp",
  	"kita.osaka.jp",
  	"kumatori.osaka.jp",
  	"matsubara.osaka.jp",
  	"minato.osaka.jp",
  	"minoh.osaka.jp",
  	"misaki.osaka.jp",
  	"moriguchi.osaka.jp",
  	"neyagawa.osaka.jp",
  	"nishi.osaka.jp",
  	"nose.osaka.jp",
  	"osakasayama.osaka.jp",
  	"sakai.osaka.jp",
  	"sayama.osaka.jp",
  	"sennan.osaka.jp",
  	"settsu.osaka.jp",
  	"shijonawate.osaka.jp",
  	"shimamoto.osaka.jp",
  	"suita.osaka.jp",
  	"tadaoka.osaka.jp",
  	"taishi.osaka.jp",
  	"tajiri.osaka.jp",
  	"takaishi.osaka.jp",
  	"takatsuki.osaka.jp",
  	"tondabayashi.osaka.jp",
  	"toyonaka.osaka.jp",
  	"toyono.osaka.jp",
  	"yao.osaka.jp",
  	"ariake.saga.jp",
  	"arita.saga.jp",
  	"fukudomi.saga.jp",
  	"genkai.saga.jp",
  	"hamatama.saga.jp",
  	"hizen.saga.jp",
  	"imari.saga.jp",
  	"kamimine.saga.jp",
  	"kanzaki.saga.jp",
  	"karatsu.saga.jp",
  	"kashima.saga.jp",
  	"kitagata.saga.jp",
  	"kitahata.saga.jp",
  	"kiyama.saga.jp",
  	"kouhoku.saga.jp",
  	"kyuragi.saga.jp",
  	"nishiarita.saga.jp",
  	"ogi.saga.jp",
  	"omachi.saga.jp",
  	"ouchi.saga.jp",
  	"saga.saga.jp",
  	"shiroishi.saga.jp",
  	"taku.saga.jp",
  	"tara.saga.jp",
  	"tosu.saga.jp",
  	"yoshinogari.saga.jp",
  	"arakawa.saitama.jp",
  	"asaka.saitama.jp",
  	"chichibu.saitama.jp",
  	"fujimi.saitama.jp",
  	"fujimino.saitama.jp",
  	"fukaya.saitama.jp",
  	"hanno.saitama.jp",
  	"hanyu.saitama.jp",
  	"hasuda.saitama.jp",
  	"hatogaya.saitama.jp",
  	"hatoyama.saitama.jp",
  	"hidaka.saitama.jp",
  	"higashichichibu.saitama.jp",
  	"higashimatsuyama.saitama.jp",
  	"honjo.saitama.jp",
  	"ina.saitama.jp",
  	"iruma.saitama.jp",
  	"iwatsuki.saitama.jp",
  	"kamiizumi.saitama.jp",
  	"kamikawa.saitama.jp",
  	"kamisato.saitama.jp",
  	"kasukabe.saitama.jp",
  	"kawagoe.saitama.jp",
  	"kawaguchi.saitama.jp",
  	"kawajima.saitama.jp",
  	"kazo.saitama.jp",
  	"kitamoto.saitama.jp",
  	"koshigaya.saitama.jp",
  	"kounosu.saitama.jp",
  	"kuki.saitama.jp",
  	"kumagaya.saitama.jp",
  	"matsubushi.saitama.jp",
  	"minano.saitama.jp",
  	"misato.saitama.jp",
  	"miyashiro.saitama.jp",
  	"miyoshi.saitama.jp",
  	"moroyama.saitama.jp",
  	"nagatoro.saitama.jp",
  	"namegawa.saitama.jp",
  	"niiza.saitama.jp",
  	"ogano.saitama.jp",
  	"ogawa.saitama.jp",
  	"ogose.saitama.jp",
  	"okegawa.saitama.jp",
  	"omiya.saitama.jp",
  	"otaki.saitama.jp",
  	"ranzan.saitama.jp",
  	"ryokami.saitama.jp",
  	"saitama.saitama.jp",
  	"sakado.saitama.jp",
  	"satte.saitama.jp",
  	"sayama.saitama.jp",
  	"shiki.saitama.jp",
  	"shiraoka.saitama.jp",
  	"soka.saitama.jp",
  	"sugito.saitama.jp",
  	"toda.saitama.jp",
  	"tokigawa.saitama.jp",
  	"tokorozawa.saitama.jp",
  	"tsurugashima.saitama.jp",
  	"urawa.saitama.jp",
  	"warabi.saitama.jp",
  	"yashio.saitama.jp",
  	"yokoze.saitama.jp",
  	"yono.saitama.jp",
  	"yorii.saitama.jp",
  	"yoshida.saitama.jp",
  	"yoshikawa.saitama.jp",
  	"yoshimi.saitama.jp",
  	"aisho.shiga.jp",
  	"gamo.shiga.jp",
  	"higashiomi.shiga.jp",
  	"hikone.shiga.jp",
  	"koka.shiga.jp",
  	"konan.shiga.jp",
  	"kosei.shiga.jp",
  	"koto.shiga.jp",
  	"kusatsu.shiga.jp",
  	"maibara.shiga.jp",
  	"moriyama.shiga.jp",
  	"nagahama.shiga.jp",
  	"nishiazai.shiga.jp",
  	"notogawa.shiga.jp",
  	"omihachiman.shiga.jp",
  	"otsu.shiga.jp",
  	"ritto.shiga.jp",
  	"ryuoh.shiga.jp",
  	"takashima.shiga.jp",
  	"takatsuki.shiga.jp",
  	"torahime.shiga.jp",
  	"toyosato.shiga.jp",
  	"yasu.shiga.jp",
  	"akagi.shimane.jp",
  	"ama.shimane.jp",
  	"gotsu.shimane.jp",
  	"hamada.shimane.jp",
  	"higashiizumo.shimane.jp",
  	"hikawa.shimane.jp",
  	"hikimi.shimane.jp",
  	"izumo.shimane.jp",
  	"kakinoki.shimane.jp",
  	"masuda.shimane.jp",
  	"matsue.shimane.jp",
  	"misato.shimane.jp",
  	"nishinoshima.shimane.jp",
  	"ohda.shimane.jp",
  	"okinoshima.shimane.jp",
  	"okuizumo.shimane.jp",
  	"shimane.shimane.jp",
  	"tamayu.shimane.jp",
  	"tsuwano.shimane.jp",
  	"unnan.shimane.jp",
  	"yakumo.shimane.jp",
  	"yasugi.shimane.jp",
  	"yatsuka.shimane.jp",
  	"arai.shizuoka.jp",
  	"atami.shizuoka.jp",
  	"fuji.shizuoka.jp",
  	"fujieda.shizuoka.jp",
  	"fujikawa.shizuoka.jp",
  	"fujinomiya.shizuoka.jp",
  	"fukuroi.shizuoka.jp",
  	"gotemba.shizuoka.jp",
  	"haibara.shizuoka.jp",
  	"hamamatsu.shizuoka.jp",
  	"higashiizu.shizuoka.jp",
  	"ito.shizuoka.jp",
  	"iwata.shizuoka.jp",
  	"izu.shizuoka.jp",
  	"izunokuni.shizuoka.jp",
  	"kakegawa.shizuoka.jp",
  	"kannami.shizuoka.jp",
  	"kawanehon.shizuoka.jp",
  	"kawazu.shizuoka.jp",
  	"kikugawa.shizuoka.jp",
  	"kosai.shizuoka.jp",
  	"makinohara.shizuoka.jp",
  	"matsuzaki.shizuoka.jp",
  	"minamiizu.shizuoka.jp",
  	"mishima.shizuoka.jp",
  	"morimachi.shizuoka.jp",
  	"nishiizu.shizuoka.jp",
  	"numazu.shizuoka.jp",
  	"omaezaki.shizuoka.jp",
  	"shimada.shizuoka.jp",
  	"shimizu.shizuoka.jp",
  	"shimoda.shizuoka.jp",
  	"shizuoka.shizuoka.jp",
  	"susono.shizuoka.jp",
  	"yaizu.shizuoka.jp",
  	"yoshida.shizuoka.jp",
  	"ashikaga.tochigi.jp",
  	"bato.tochigi.jp",
  	"haga.tochigi.jp",
  	"ichikai.tochigi.jp",
  	"iwafune.tochigi.jp",
  	"kaminokawa.tochigi.jp",
  	"kanuma.tochigi.jp",
  	"karasuyama.tochigi.jp",
  	"kuroiso.tochigi.jp",
  	"mashiko.tochigi.jp",
  	"mibu.tochigi.jp",
  	"moka.tochigi.jp",
  	"motegi.tochigi.jp",
  	"nasu.tochigi.jp",
  	"nasushiobara.tochigi.jp",
  	"nikko.tochigi.jp",
  	"nishikata.tochigi.jp",
  	"nogi.tochigi.jp",
  	"ohira.tochigi.jp",
  	"ohtawara.tochigi.jp",
  	"oyama.tochigi.jp",
  	"sakura.tochigi.jp",
  	"sano.tochigi.jp",
  	"shimotsuke.tochigi.jp",
  	"shioya.tochigi.jp",
  	"takanezawa.tochigi.jp",
  	"tochigi.tochigi.jp",
  	"tsuga.tochigi.jp",
  	"ujiie.tochigi.jp",
  	"utsunomiya.tochigi.jp",
  	"yaita.tochigi.jp",
  	"aizumi.tokushima.jp",
  	"anan.tokushima.jp",
  	"ichiba.tokushima.jp",
  	"itano.tokushima.jp",
  	"kainan.tokushima.jp",
  	"komatsushima.tokushima.jp",
  	"matsushige.tokushima.jp",
  	"mima.tokushima.jp",
  	"minami.tokushima.jp",
  	"miyoshi.tokushima.jp",
  	"mugi.tokushima.jp",
  	"nakagawa.tokushima.jp",
  	"naruto.tokushima.jp",
  	"sanagochi.tokushima.jp",
  	"shishikui.tokushima.jp",
  	"tokushima.tokushima.jp",
  	"wajiki.tokushima.jp",
  	"adachi.tokyo.jp",
  	"akiruno.tokyo.jp",
  	"akishima.tokyo.jp",
  	"aogashima.tokyo.jp",
  	"arakawa.tokyo.jp",
  	"bunkyo.tokyo.jp",
  	"chiyoda.tokyo.jp",
  	"chofu.tokyo.jp",
  	"chuo.tokyo.jp",
  	"edogawa.tokyo.jp",
  	"fuchu.tokyo.jp",
  	"fussa.tokyo.jp",
  	"hachijo.tokyo.jp",
  	"hachioji.tokyo.jp",
  	"hamura.tokyo.jp",
  	"higashikurume.tokyo.jp",
  	"higashimurayama.tokyo.jp",
  	"higashiyamato.tokyo.jp",
  	"hino.tokyo.jp",
  	"hinode.tokyo.jp",
  	"hinohara.tokyo.jp",
  	"inagi.tokyo.jp",
  	"itabashi.tokyo.jp",
  	"katsushika.tokyo.jp",
  	"kita.tokyo.jp",
  	"kiyose.tokyo.jp",
  	"kodaira.tokyo.jp",
  	"koganei.tokyo.jp",
  	"kokubunji.tokyo.jp",
  	"komae.tokyo.jp",
  	"koto.tokyo.jp",
  	"kouzushima.tokyo.jp",
  	"kunitachi.tokyo.jp",
  	"machida.tokyo.jp",
  	"meguro.tokyo.jp",
  	"minato.tokyo.jp",
  	"mitaka.tokyo.jp",
  	"mizuho.tokyo.jp",
  	"musashimurayama.tokyo.jp",
  	"musashino.tokyo.jp",
  	"nakano.tokyo.jp",
  	"nerima.tokyo.jp",
  	"ogasawara.tokyo.jp",
  	"okutama.tokyo.jp",
  	"ome.tokyo.jp",
  	"oshima.tokyo.jp",
  	"ota.tokyo.jp",
  	"setagaya.tokyo.jp",
  	"shibuya.tokyo.jp",
  	"shinagawa.tokyo.jp",
  	"shinjuku.tokyo.jp",
  	"suginami.tokyo.jp",
  	"sumida.tokyo.jp",
  	"tachikawa.tokyo.jp",
  	"taito.tokyo.jp",
  	"tama.tokyo.jp",
  	"toshima.tokyo.jp",
  	"chizu.tottori.jp",
  	"hino.tottori.jp",
  	"kawahara.tottori.jp",
  	"koge.tottori.jp",
  	"kotoura.tottori.jp",
  	"misasa.tottori.jp",
  	"nanbu.tottori.jp",
  	"nichinan.tottori.jp",
  	"sakaiminato.tottori.jp",
  	"tottori.tottori.jp",
  	"wakasa.tottori.jp",
  	"yazu.tottori.jp",
  	"yonago.tottori.jp",
  	"asahi.toyama.jp",
  	"fuchu.toyama.jp",
  	"fukumitsu.toyama.jp",
  	"funahashi.toyama.jp",
  	"himi.toyama.jp",
  	"imizu.toyama.jp",
  	"inami.toyama.jp",
  	"johana.toyama.jp",
  	"kamiichi.toyama.jp",
  	"kurobe.toyama.jp",
  	"nakaniikawa.toyama.jp",
  	"namerikawa.toyama.jp",
  	"nanto.toyama.jp",
  	"nyuzen.toyama.jp",
  	"oyabe.toyama.jp",
  	"taira.toyama.jp",
  	"takaoka.toyama.jp",
  	"tateyama.toyama.jp",
  	"toga.toyama.jp",
  	"tonami.toyama.jp",
  	"toyama.toyama.jp",
  	"unazuki.toyama.jp",
  	"uozu.toyama.jp",
  	"yamada.toyama.jp",
  	"arida.wakayama.jp",
  	"aridagawa.wakayama.jp",
  	"gobo.wakayama.jp",
  	"hashimoto.wakayama.jp",
  	"hidaka.wakayama.jp",
  	"hirogawa.wakayama.jp",
  	"inami.wakayama.jp",
  	"iwade.wakayama.jp",
  	"kainan.wakayama.jp",
  	"kamitonda.wakayama.jp",
  	"katsuragi.wakayama.jp",
  	"kimino.wakayama.jp",
  	"kinokawa.wakayama.jp",
  	"kitayama.wakayama.jp",
  	"koya.wakayama.jp",
  	"koza.wakayama.jp",
  	"kozagawa.wakayama.jp",
  	"kudoyama.wakayama.jp",
  	"kushimoto.wakayama.jp",
  	"mihama.wakayama.jp",
  	"misato.wakayama.jp",
  	"nachikatsuura.wakayama.jp",
  	"shingu.wakayama.jp",
  	"shirahama.wakayama.jp",
  	"taiji.wakayama.jp",
  	"tanabe.wakayama.jp",
  	"wakayama.wakayama.jp",
  	"yuasa.wakayama.jp",
  	"yura.wakayama.jp",
  	"asahi.yamagata.jp",
  	"funagata.yamagata.jp",
  	"higashine.yamagata.jp",
  	"iide.yamagata.jp",
  	"kahoku.yamagata.jp",
  	"kaminoyama.yamagata.jp",
  	"kaneyama.yamagata.jp",
  	"kawanishi.yamagata.jp",
  	"mamurogawa.yamagata.jp",
  	"mikawa.yamagata.jp",
  	"murayama.yamagata.jp",
  	"nagai.yamagata.jp",
  	"nakayama.yamagata.jp",
  	"nanyo.yamagata.jp",
  	"nishikawa.yamagata.jp",
  	"obanazawa.yamagata.jp",
  	"oe.yamagata.jp",
  	"oguni.yamagata.jp",
  	"ohkura.yamagata.jp",
  	"oishida.yamagata.jp",
  	"sagae.yamagata.jp",
  	"sakata.yamagata.jp",
  	"sakegawa.yamagata.jp",
  	"shinjo.yamagata.jp",
  	"shirataka.yamagata.jp",
  	"shonai.yamagata.jp",
  	"takahata.yamagata.jp",
  	"tendo.yamagata.jp",
  	"tozawa.yamagata.jp",
  	"tsuruoka.yamagata.jp",
  	"yamagata.yamagata.jp",
  	"yamanobe.yamagata.jp",
  	"yonezawa.yamagata.jp",
  	"yuza.yamagata.jp",
  	"abu.yamaguchi.jp",
  	"hagi.yamaguchi.jp",
  	"hikari.yamaguchi.jp",
  	"hofu.yamaguchi.jp",
  	"iwakuni.yamaguchi.jp",
  	"kudamatsu.yamaguchi.jp",
  	"mitou.yamaguchi.jp",
  	"nagato.yamaguchi.jp",
  	"oshima.yamaguchi.jp",
  	"shimonoseki.yamaguchi.jp",
  	"shunan.yamaguchi.jp",
  	"tabuse.yamaguchi.jp",
  	"tokuyama.yamaguchi.jp",
  	"toyota.yamaguchi.jp",
  	"ube.yamaguchi.jp",
  	"yuu.yamaguchi.jp",
  	"chuo.yamanashi.jp",
  	"doshi.yamanashi.jp",
  	"fuefuki.yamanashi.jp",
  	"fujikawa.yamanashi.jp",
  	"fujikawaguchiko.yamanashi.jp",
  	"fujiyoshida.yamanashi.jp",
  	"hayakawa.yamanashi.jp",
  	"hokuto.yamanashi.jp",
  	"ichikawamisato.yamanashi.jp",
  	"kai.yamanashi.jp",
  	"kofu.yamanashi.jp",
  	"koshu.yamanashi.jp",
  	"kosuge.yamanashi.jp",
  	"minami-alps.yamanashi.jp",
  	"minobu.yamanashi.jp",
  	"nakamichi.yamanashi.jp",
  	"nanbu.yamanashi.jp",
  	"narusawa.yamanashi.jp",
  	"nirasaki.yamanashi.jp",
  	"nishikatsura.yamanashi.jp",
  	"oshino.yamanashi.jp",
  	"otsuki.yamanashi.jp",
  	"showa.yamanashi.jp",
  	"tabayama.yamanashi.jp",
  	"tsuru.yamanashi.jp",
  	"uenohara.yamanashi.jp",
  	"yamanakako.yamanashi.jp",
  	"yamanashi.yamanashi.jp",
  	"ke",
  	"ac.ke",
  	"co.ke",
  	"go.ke",
  	"info.ke",
  	"me.ke",
  	"mobi.ke",
  	"ne.ke",
  	"or.ke",
  	"sc.ke",
  	"kg",
  	"org.kg",
  	"net.kg",
  	"com.kg",
  	"edu.kg",
  	"gov.kg",
  	"mil.kg",
  	"*.kh",
  	"ki",
  	"edu.ki",
  	"biz.ki",
  	"net.ki",
  	"org.ki",
  	"gov.ki",
  	"info.ki",
  	"com.ki",
  	"km",
  	"org.km",
  	"nom.km",
  	"gov.km",
  	"prd.km",
  	"tm.km",
  	"edu.km",
  	"mil.km",
  	"ass.km",
  	"com.km",
  	"coop.km",
  	"asso.km",
  	"presse.km",
  	"medecin.km",
  	"notaires.km",
  	"pharmaciens.km",
  	"veterinaire.km",
  	"gouv.km",
  	"kn",
  	"net.kn",
  	"org.kn",
  	"edu.kn",
  	"gov.kn",
  	"kp",
  	"com.kp",
  	"edu.kp",
  	"gov.kp",
  	"org.kp",
  	"rep.kp",
  	"tra.kp",
  	"kr",
  	"ac.kr",
  	"co.kr",
  	"es.kr",
  	"go.kr",
  	"hs.kr",
  	"kg.kr",
  	"mil.kr",
  	"ms.kr",
  	"ne.kr",
  	"or.kr",
  	"pe.kr",
  	"re.kr",
  	"sc.kr",
  	"busan.kr",
  	"chungbuk.kr",
  	"chungnam.kr",
  	"daegu.kr",
  	"daejeon.kr",
  	"gangwon.kr",
  	"gwangju.kr",
  	"gyeongbuk.kr",
  	"gyeonggi.kr",
  	"gyeongnam.kr",
  	"incheon.kr",
  	"jeju.kr",
  	"jeonbuk.kr",
  	"jeonnam.kr",
  	"seoul.kr",
  	"ulsan.kr",
  	"kw",
  	"com.kw",
  	"edu.kw",
  	"emb.kw",
  	"gov.kw",
  	"ind.kw",
  	"net.kw",
  	"org.kw",
  	"ky",
  	"com.ky",
  	"edu.ky",
  	"net.ky",
  	"org.ky",
  	"kz",
  	"org.kz",
  	"edu.kz",
  	"net.kz",
  	"gov.kz",
  	"mil.kz",
  	"com.kz",
  	"la",
  	"int.la",
  	"net.la",
  	"info.la",
  	"edu.la",
  	"gov.la",
  	"per.la",
  	"com.la",
  	"org.la",
  	"lb",
  	"com.lb",
  	"edu.lb",
  	"gov.lb",
  	"net.lb",
  	"org.lb",
  	"lc",
  	"com.lc",
  	"net.lc",
  	"co.lc",
  	"org.lc",
  	"edu.lc",
  	"gov.lc",
  	"li",
  	"lk",
  	"gov.lk",
  	"sch.lk",
  	"net.lk",
  	"int.lk",
  	"com.lk",
  	"org.lk",
  	"edu.lk",
  	"ngo.lk",
  	"soc.lk",
  	"web.lk",
  	"ltd.lk",
  	"assn.lk",
  	"grp.lk",
  	"hotel.lk",
  	"ac.lk",
  	"lr",
  	"com.lr",
  	"edu.lr",
  	"gov.lr",
  	"org.lr",
  	"net.lr",
  	"ls",
  	"ac.ls",
  	"biz.ls",
  	"co.ls",
  	"edu.ls",
  	"gov.ls",
  	"info.ls",
  	"net.ls",
  	"org.ls",
  	"sc.ls",
  	"lt",
  	"gov.lt",
  	"lu",
  	"lv",
  	"com.lv",
  	"edu.lv",
  	"gov.lv",
  	"org.lv",
  	"mil.lv",
  	"id.lv",
  	"net.lv",
  	"asn.lv",
  	"conf.lv",
  	"ly",
  	"com.ly",
  	"net.ly",
  	"gov.ly",
  	"plc.ly",
  	"edu.ly",
  	"sch.ly",
  	"med.ly",
  	"org.ly",
  	"id.ly",
  	"ma",
  	"co.ma",
  	"net.ma",
  	"gov.ma",
  	"org.ma",
  	"ac.ma",
  	"press.ma",
  	"mc",
  	"tm.mc",
  	"asso.mc",
  	"md",
  	"me",
  	"co.me",
  	"net.me",
  	"org.me",
  	"edu.me",
  	"ac.me",
  	"gov.me",
  	"its.me",
  	"priv.me",
  	"mg",
  	"org.mg",
  	"nom.mg",
  	"gov.mg",
  	"prd.mg",
  	"tm.mg",
  	"edu.mg",
  	"mil.mg",
  	"com.mg",
  	"co.mg",
  	"mh",
  	"mil",
  	"mk",
  	"com.mk",
  	"org.mk",
  	"net.mk",
  	"edu.mk",
  	"gov.mk",
  	"inf.mk",
  	"name.mk",
  	"ml",
  	"com.ml",
  	"edu.ml",
  	"gouv.ml",
  	"gov.ml",
  	"net.ml",
  	"org.ml",
  	"presse.ml",
  	"*.mm",
  	"mn",
  	"gov.mn",
  	"edu.mn",
  	"org.mn",
  	"mo",
  	"com.mo",
  	"net.mo",
  	"org.mo",
  	"edu.mo",
  	"gov.mo",
  	"mobi",
  	"mp",
  	"mq",
  	"mr",
  	"gov.mr",
  	"ms",
  	"com.ms",
  	"edu.ms",
  	"gov.ms",
  	"net.ms",
  	"org.ms",
  	"mt",
  	"com.mt",
  	"edu.mt",
  	"net.mt",
  	"org.mt",
  	"mu",
  	"com.mu",
  	"net.mu",
  	"org.mu",
  	"gov.mu",
  	"ac.mu",
  	"co.mu",
  	"or.mu",
  	"museum",
  	"academy.museum",
  	"agriculture.museum",
  	"air.museum",
  	"airguard.museum",
  	"alabama.museum",
  	"alaska.museum",
  	"amber.museum",
  	"ambulance.museum",
  	"american.museum",
  	"americana.museum",
  	"americanantiques.museum",
  	"americanart.museum",
  	"amsterdam.museum",
  	"and.museum",
  	"annefrank.museum",
  	"anthro.museum",
  	"anthropology.museum",
  	"antiques.museum",
  	"aquarium.museum",
  	"arboretum.museum",
  	"archaeological.museum",
  	"archaeology.museum",
  	"architecture.museum",
  	"art.museum",
  	"artanddesign.museum",
  	"artcenter.museum",
  	"artdeco.museum",
  	"arteducation.museum",
  	"artgallery.museum",
  	"arts.museum",
  	"artsandcrafts.museum",
  	"asmatart.museum",
  	"assassination.museum",
  	"assisi.museum",
  	"association.museum",
  	"astronomy.museum",
  	"atlanta.museum",
  	"austin.museum",
  	"australia.museum",
  	"automotive.museum",
  	"aviation.museum",
  	"axis.museum",
  	"badajoz.museum",
  	"baghdad.museum",
  	"bahn.museum",
  	"bale.museum",
  	"baltimore.museum",
  	"barcelona.museum",
  	"baseball.museum",
  	"basel.museum",
  	"baths.museum",
  	"bauern.museum",
  	"beauxarts.museum",
  	"beeldengeluid.museum",
  	"bellevue.museum",
  	"bergbau.museum",
  	"berkeley.museum",
  	"berlin.museum",
  	"bern.museum",
  	"bible.museum",
  	"bilbao.museum",
  	"bill.museum",
  	"birdart.museum",
  	"birthplace.museum",
  	"bonn.museum",
  	"boston.museum",
  	"botanical.museum",
  	"botanicalgarden.museum",
  	"botanicgarden.museum",
  	"botany.museum",
  	"brandywinevalley.museum",
  	"brasil.museum",
  	"bristol.museum",
  	"british.museum",
  	"britishcolumbia.museum",
  	"broadcast.museum",
  	"brunel.museum",
  	"brussel.museum",
  	"brussels.museum",
  	"bruxelles.museum",
  	"building.museum",
  	"burghof.museum",
  	"bus.museum",
  	"bushey.museum",
  	"cadaques.museum",
  	"california.museum",
  	"cambridge.museum",
  	"can.museum",
  	"canada.museum",
  	"capebreton.museum",
  	"carrier.museum",
  	"cartoonart.museum",
  	"casadelamoneda.museum",
  	"castle.museum",
  	"castres.museum",
  	"celtic.museum",
  	"center.museum",
  	"chattanooga.museum",
  	"cheltenham.museum",
  	"chesapeakebay.museum",
  	"chicago.museum",
  	"children.museum",
  	"childrens.museum",
  	"childrensgarden.museum",
  	"chiropractic.museum",
  	"chocolate.museum",
  	"christiansburg.museum",
  	"cincinnati.museum",
  	"cinema.museum",
  	"circus.museum",
  	"civilisation.museum",
  	"civilization.museum",
  	"civilwar.museum",
  	"clinton.museum",
  	"clock.museum",
  	"coal.museum",
  	"coastaldefence.museum",
  	"cody.museum",
  	"coldwar.museum",
  	"collection.museum",
  	"colonialwilliamsburg.museum",
  	"coloradoplateau.museum",
  	"columbia.museum",
  	"columbus.museum",
  	"communication.museum",
  	"communications.museum",
  	"community.museum",
  	"computer.museum",
  	"computerhistory.museum",
  	"comunicações.museum",
  	"contemporary.museum",
  	"contemporaryart.museum",
  	"convent.museum",
  	"copenhagen.museum",
  	"corporation.museum",
  	"correios-e-telecomunicações.museum",
  	"corvette.museum",
  	"costume.museum",
  	"countryestate.museum",
  	"county.museum",
  	"crafts.museum",
  	"cranbrook.museum",
  	"creation.museum",
  	"cultural.museum",
  	"culturalcenter.museum",
  	"culture.museum",
  	"cyber.museum",
  	"cymru.museum",
  	"dali.museum",
  	"dallas.museum",
  	"database.museum",
  	"ddr.museum",
  	"decorativearts.museum",
  	"delaware.museum",
  	"delmenhorst.museum",
  	"denmark.museum",
  	"depot.museum",
  	"design.museum",
  	"detroit.museum",
  	"dinosaur.museum",
  	"discovery.museum",
  	"dolls.museum",
  	"donostia.museum",
  	"durham.museum",
  	"eastafrica.museum",
  	"eastcoast.museum",
  	"education.museum",
  	"educational.museum",
  	"egyptian.museum",
  	"eisenbahn.museum",
  	"elburg.museum",
  	"elvendrell.museum",
  	"embroidery.museum",
  	"encyclopedic.museum",
  	"england.museum",
  	"entomology.museum",
  	"environment.museum",
  	"environmentalconservation.museum",
  	"epilepsy.museum",
  	"essex.museum",
  	"estate.museum",
  	"ethnology.museum",
  	"exeter.museum",
  	"exhibition.museum",
  	"family.museum",
  	"farm.museum",
  	"farmequipment.museum",
  	"farmers.museum",
  	"farmstead.museum",
  	"field.museum",
  	"figueres.museum",
  	"filatelia.museum",
  	"film.museum",
  	"fineart.museum",
  	"finearts.museum",
  	"finland.museum",
  	"flanders.museum",
  	"florida.museum",
  	"force.museum",
  	"fortmissoula.museum",
  	"fortworth.museum",
  	"foundation.museum",
  	"francaise.museum",
  	"frankfurt.museum",
  	"franziskaner.museum",
  	"freemasonry.museum",
  	"freiburg.museum",
  	"fribourg.museum",
  	"frog.museum",
  	"fundacio.museum",
  	"furniture.museum",
  	"gallery.museum",
  	"garden.museum",
  	"gateway.museum",
  	"geelvinck.museum",
  	"gemological.museum",
  	"geology.museum",
  	"georgia.museum",
  	"giessen.museum",
  	"glas.museum",
  	"glass.museum",
  	"gorge.museum",
  	"grandrapids.museum",
  	"graz.museum",
  	"guernsey.museum",
  	"halloffame.museum",
  	"hamburg.museum",
  	"handson.museum",
  	"harvestcelebration.museum",
  	"hawaii.museum",
  	"health.museum",
  	"heimatunduhren.museum",
  	"hellas.museum",
  	"helsinki.museum",
  	"hembygdsforbund.museum",
  	"heritage.museum",
  	"histoire.museum",
  	"historical.museum",
  	"historicalsociety.museum",
  	"historichouses.museum",
  	"historisch.museum",
  	"historisches.museum",
  	"history.museum",
  	"historyofscience.museum",
  	"horology.museum",
  	"house.museum",
  	"humanities.museum",
  	"illustration.museum",
  	"imageandsound.museum",
  	"indian.museum",
  	"indiana.museum",
  	"indianapolis.museum",
  	"indianmarket.museum",
  	"intelligence.museum",
  	"interactive.museum",
  	"iraq.museum",
  	"iron.museum",
  	"isleofman.museum",
  	"jamison.museum",
  	"jefferson.museum",
  	"jerusalem.museum",
  	"jewelry.museum",
  	"jewish.museum",
  	"jewishart.museum",
  	"jfk.museum",
  	"journalism.museum",
  	"judaica.museum",
  	"judygarland.museum",
  	"juedisches.museum",
  	"juif.museum",
  	"karate.museum",
  	"karikatur.museum",
  	"kids.museum",
  	"koebenhavn.museum",
  	"koeln.museum",
  	"kunst.museum",
  	"kunstsammlung.museum",
  	"kunstunddesign.museum",
  	"labor.museum",
  	"labour.museum",
  	"lajolla.museum",
  	"lancashire.museum",
  	"landes.museum",
  	"lans.museum",
  	"läns.museum",
  	"larsson.museum",
  	"lewismiller.museum",
  	"lincoln.museum",
  	"linz.museum",
  	"living.museum",
  	"livinghistory.museum",
  	"localhistory.museum",
  	"london.museum",
  	"losangeles.museum",
  	"louvre.museum",
  	"loyalist.museum",
  	"lucerne.museum",
  	"luxembourg.museum",
  	"luzern.museum",
  	"mad.museum",
  	"madrid.museum",
  	"mallorca.museum",
  	"manchester.museum",
  	"mansion.museum",
  	"mansions.museum",
  	"manx.museum",
  	"marburg.museum",
  	"maritime.museum",
  	"maritimo.museum",
  	"maryland.museum",
  	"marylhurst.museum",
  	"media.museum",
  	"medical.museum",
  	"medizinhistorisches.museum",
  	"meeres.museum",
  	"memorial.museum",
  	"mesaverde.museum",
  	"michigan.museum",
  	"midatlantic.museum",
  	"military.museum",
  	"mill.museum",
  	"miners.museum",
  	"mining.museum",
  	"minnesota.museum",
  	"missile.museum",
  	"missoula.museum",
  	"modern.museum",
  	"moma.museum",
  	"money.museum",
  	"monmouth.museum",
  	"monticello.museum",
  	"montreal.museum",
  	"moscow.museum",
  	"motorcycle.museum",
  	"muenchen.museum",
  	"muenster.museum",
  	"mulhouse.museum",
  	"muncie.museum",
  	"museet.museum",
  	"museumcenter.museum",
  	"museumvereniging.museum",
  	"music.museum",
  	"national.museum",
  	"nationalfirearms.museum",
  	"nationalheritage.museum",
  	"nativeamerican.museum",
  	"naturalhistory.museum",
  	"naturalhistorymuseum.museum",
  	"naturalsciences.museum",
  	"nature.museum",
  	"naturhistorisches.museum",
  	"natuurwetenschappen.museum",
  	"naumburg.museum",
  	"naval.museum",
  	"nebraska.museum",
  	"neues.museum",
  	"newhampshire.museum",
  	"newjersey.museum",
  	"newmexico.museum",
  	"newport.museum",
  	"newspaper.museum",
  	"newyork.museum",
  	"niepce.museum",
  	"norfolk.museum",
  	"north.museum",
  	"nrw.museum",
  	"nyc.museum",
  	"nyny.museum",
  	"oceanographic.museum",
  	"oceanographique.museum",
  	"omaha.museum",
  	"online.museum",
  	"ontario.museum",
  	"openair.museum",
  	"oregon.museum",
  	"oregontrail.museum",
  	"otago.museum",
  	"oxford.museum",
  	"pacific.museum",
  	"paderborn.museum",
  	"palace.museum",
  	"paleo.museum",
  	"palmsprings.museum",
  	"panama.museum",
  	"paris.museum",
  	"pasadena.museum",
  	"pharmacy.museum",
  	"philadelphia.museum",
  	"philadelphiaarea.museum",
  	"philately.museum",
  	"phoenix.museum",
  	"photography.museum",
  	"pilots.museum",
  	"pittsburgh.museum",
  	"planetarium.museum",
  	"plantation.museum",
  	"plants.museum",
  	"plaza.museum",
  	"portal.museum",
  	"portland.museum",
  	"portlligat.museum",
  	"posts-and-telecommunications.museum",
  	"preservation.museum",
  	"presidio.museum",
  	"press.museum",
  	"project.museum",
  	"public.museum",
  	"pubol.museum",
  	"quebec.museum",
  	"railroad.museum",
  	"railway.museum",
  	"research.museum",
  	"resistance.museum",
  	"riodejaneiro.museum",
  	"rochester.museum",
  	"rockart.museum",
  	"roma.museum",
  	"russia.museum",
  	"saintlouis.museum",
  	"salem.museum",
  	"salvadordali.museum",
  	"salzburg.museum",
  	"sandiego.museum",
  	"sanfrancisco.museum",
  	"santabarbara.museum",
  	"santacruz.museum",
  	"santafe.museum",
  	"saskatchewan.museum",
  	"satx.museum",
  	"savannahga.museum",
  	"schlesisches.museum",
  	"schoenbrunn.museum",
  	"schokoladen.museum",
  	"school.museum",
  	"schweiz.museum",
  	"science.museum",
  	"scienceandhistory.museum",
  	"scienceandindustry.museum",
  	"sciencecenter.museum",
  	"sciencecenters.museum",
  	"science-fiction.museum",
  	"sciencehistory.museum",
  	"sciences.museum",
  	"sciencesnaturelles.museum",
  	"scotland.museum",
  	"seaport.museum",
  	"settlement.museum",
  	"settlers.museum",
  	"shell.museum",
  	"sherbrooke.museum",
  	"sibenik.museum",
  	"silk.museum",
  	"ski.museum",
  	"skole.museum",
  	"society.museum",
  	"sologne.museum",
  	"soundandvision.museum",
  	"southcarolina.museum",
  	"southwest.museum",
  	"space.museum",
  	"spy.museum",
  	"square.museum",
  	"stadt.museum",
  	"stalbans.museum",
  	"starnberg.museum",
  	"state.museum",
  	"stateofdelaware.museum",
  	"station.museum",
  	"steam.museum",
  	"steiermark.museum",
  	"stjohn.museum",
  	"stockholm.museum",
  	"stpetersburg.museum",
  	"stuttgart.museum",
  	"suisse.museum",
  	"surgeonshall.museum",
  	"surrey.museum",
  	"svizzera.museum",
  	"sweden.museum",
  	"sydney.museum",
  	"tank.museum",
  	"tcm.museum",
  	"technology.museum",
  	"telekommunikation.museum",
  	"television.museum",
  	"texas.museum",
  	"textile.museum",
  	"theater.museum",
  	"time.museum",
  	"timekeeping.museum",
  	"topology.museum",
  	"torino.museum",
  	"touch.museum",
  	"town.museum",
  	"transport.museum",
  	"tree.museum",
  	"trolley.museum",
  	"trust.museum",
  	"trustee.museum",
  	"uhren.museum",
  	"ulm.museum",
  	"undersea.museum",
  	"university.museum",
  	"usa.museum",
  	"usantiques.museum",
  	"usarts.museum",
  	"uscountryestate.museum",
  	"usculture.museum",
  	"usdecorativearts.museum",
  	"usgarden.museum",
  	"ushistory.museum",
  	"ushuaia.museum",
  	"uslivinghistory.museum",
  	"utah.museum",
  	"uvic.museum",
  	"valley.museum",
  	"vantaa.museum",
  	"versailles.museum",
  	"viking.museum",
  	"village.museum",
  	"virginia.museum",
  	"virtual.museum",
  	"virtuel.museum",
  	"vlaanderen.museum",
  	"volkenkunde.museum",
  	"wales.museum",
  	"wallonie.museum",
  	"war.museum",
  	"washingtondc.museum",
  	"watchandclock.museum",
  	"watch-and-clock.museum",
  	"western.museum",
  	"westfalen.museum",
  	"whaling.museum",
  	"wildlife.museum",
  	"williamsburg.museum",
  	"windmill.museum",
  	"workshop.museum",
  	"york.museum",
  	"yorkshire.museum",
  	"yosemite.museum",
  	"youth.museum",
  	"zoological.museum",
  	"zoology.museum",
  	"ירושלים.museum",
  	"иком.museum",
  	"mv",
  	"aero.mv",
  	"biz.mv",
  	"com.mv",
  	"coop.mv",
  	"edu.mv",
  	"gov.mv",
  	"info.mv",
  	"int.mv",
  	"mil.mv",
  	"museum.mv",
  	"name.mv",
  	"net.mv",
  	"org.mv",
  	"pro.mv",
  	"mw",
  	"ac.mw",
  	"biz.mw",
  	"co.mw",
  	"com.mw",
  	"coop.mw",
  	"edu.mw",
  	"gov.mw",
  	"int.mw",
  	"museum.mw",
  	"net.mw",
  	"org.mw",
  	"mx",
  	"com.mx",
  	"org.mx",
  	"gob.mx",
  	"edu.mx",
  	"net.mx",
  	"my",
  	"biz.my",
  	"com.my",
  	"edu.my",
  	"gov.my",
  	"mil.my",
  	"name.my",
  	"net.my",
  	"org.my",
  	"mz",
  	"ac.mz",
  	"adv.mz",
  	"co.mz",
  	"edu.mz",
  	"gov.mz",
  	"mil.mz",
  	"net.mz",
  	"org.mz",
  	"na",
  	"info.na",
  	"pro.na",
  	"name.na",
  	"school.na",
  	"or.na",
  	"dr.na",
  	"us.na",
  	"mx.na",
  	"ca.na",
  	"in.na",
  	"cc.na",
  	"tv.na",
  	"ws.na",
  	"mobi.na",
  	"co.na",
  	"com.na",
  	"org.na",
  	"name",
  	"nc",
  	"asso.nc",
  	"nom.nc",
  	"ne",
  	"net",
  	"nf",
  	"com.nf",
  	"net.nf",
  	"per.nf",
  	"rec.nf",
  	"web.nf",
  	"arts.nf",
  	"firm.nf",
  	"info.nf",
  	"other.nf",
  	"store.nf",
  	"ng",
  	"com.ng",
  	"edu.ng",
  	"gov.ng",
  	"i.ng",
  	"mil.ng",
  	"mobi.ng",
  	"name.ng",
  	"net.ng",
  	"org.ng",
  	"sch.ng",
  	"ni",
  	"ac.ni",
  	"biz.ni",
  	"co.ni",
  	"com.ni",
  	"edu.ni",
  	"gob.ni",
  	"in.ni",
  	"info.ni",
  	"int.ni",
  	"mil.ni",
  	"net.ni",
  	"nom.ni",
  	"org.ni",
  	"web.ni",
  	"nl",
  	"no",
  	"fhs.no",
  	"vgs.no",
  	"fylkesbibl.no",
  	"folkebibl.no",
  	"museum.no",
  	"idrett.no",
  	"priv.no",
  	"mil.no",
  	"stat.no",
  	"dep.no",
  	"kommune.no",
  	"herad.no",
  	"aa.no",
  	"ah.no",
  	"bu.no",
  	"fm.no",
  	"hl.no",
  	"hm.no",
  	"jan-mayen.no",
  	"mr.no",
  	"nl.no",
  	"nt.no",
  	"of.no",
  	"ol.no",
  	"oslo.no",
  	"rl.no",
  	"sf.no",
  	"st.no",
  	"svalbard.no",
  	"tm.no",
  	"tr.no",
  	"va.no",
  	"vf.no",
  	"gs.aa.no",
  	"gs.ah.no",
  	"gs.bu.no",
  	"gs.fm.no",
  	"gs.hl.no",
  	"gs.hm.no",
  	"gs.jan-mayen.no",
  	"gs.mr.no",
  	"gs.nl.no",
  	"gs.nt.no",
  	"gs.of.no",
  	"gs.ol.no",
  	"gs.oslo.no",
  	"gs.rl.no",
  	"gs.sf.no",
  	"gs.st.no",
  	"gs.svalbard.no",
  	"gs.tm.no",
  	"gs.tr.no",
  	"gs.va.no",
  	"gs.vf.no",
  	"akrehamn.no",
  	"åkrehamn.no",
  	"algard.no",
  	"ålgård.no",
  	"arna.no",
  	"brumunddal.no",
  	"bryne.no",
  	"bronnoysund.no",
  	"brønnøysund.no",
  	"drobak.no",
  	"drøbak.no",
  	"egersund.no",
  	"fetsund.no",
  	"floro.no",
  	"florø.no",
  	"fredrikstad.no",
  	"hokksund.no",
  	"honefoss.no",
  	"hønefoss.no",
  	"jessheim.no",
  	"jorpeland.no",
  	"jørpeland.no",
  	"kirkenes.no",
  	"kopervik.no",
  	"krokstadelva.no",
  	"langevag.no",
  	"langevåg.no",
  	"leirvik.no",
  	"mjondalen.no",
  	"mjøndalen.no",
  	"mo-i-rana.no",
  	"mosjoen.no",
  	"mosjøen.no",
  	"nesoddtangen.no",
  	"orkanger.no",
  	"osoyro.no",
  	"osøyro.no",
  	"raholt.no",
  	"råholt.no",
  	"sandnessjoen.no",
  	"sandnessjøen.no",
  	"skedsmokorset.no",
  	"slattum.no",
  	"spjelkavik.no",
  	"stathelle.no",
  	"stavern.no",
  	"stjordalshalsen.no",
  	"stjørdalshalsen.no",
  	"tananger.no",
  	"tranby.no",
  	"vossevangen.no",
  	"afjord.no",
  	"åfjord.no",
  	"agdenes.no",
  	"al.no",
  	"ål.no",
  	"alesund.no",
  	"ålesund.no",
  	"alstahaug.no",
  	"alta.no",
  	"áltá.no",
  	"alaheadju.no",
  	"álaheadju.no",
  	"alvdal.no",
  	"amli.no",
  	"åmli.no",
  	"amot.no",
  	"åmot.no",
  	"andebu.no",
  	"andoy.no",
  	"andøy.no",
  	"andasuolo.no",
  	"ardal.no",
  	"årdal.no",
  	"aremark.no",
  	"arendal.no",
  	"ås.no",
  	"aseral.no",
  	"åseral.no",
  	"asker.no",
  	"askim.no",
  	"askvoll.no",
  	"askoy.no",
  	"askøy.no",
  	"asnes.no",
  	"åsnes.no",
  	"audnedaln.no",
  	"aukra.no",
  	"aure.no",
  	"aurland.no",
  	"aurskog-holand.no",
  	"aurskog-høland.no",
  	"austevoll.no",
  	"austrheim.no",
  	"averoy.no",
  	"averøy.no",
  	"balestrand.no",
  	"ballangen.no",
  	"balat.no",
  	"bálát.no",
  	"balsfjord.no",
  	"bahccavuotna.no",
  	"báhccavuotna.no",
  	"bamble.no",
  	"bardu.no",
  	"beardu.no",
  	"beiarn.no",
  	"bajddar.no",
  	"bájddar.no",
  	"baidar.no",
  	"báidár.no",
  	"berg.no",
  	"bergen.no",
  	"berlevag.no",
  	"berlevåg.no",
  	"bearalvahki.no",
  	"bearalváhki.no",
  	"bindal.no",
  	"birkenes.no",
  	"bjarkoy.no",
  	"bjarkøy.no",
  	"bjerkreim.no",
  	"bjugn.no",
  	"bodo.no",
  	"bodø.no",
  	"badaddja.no",
  	"bådåddjå.no",
  	"budejju.no",
  	"bokn.no",
  	"bremanger.no",
  	"bronnoy.no",
  	"brønnøy.no",
  	"bygland.no",
  	"bykle.no",
  	"barum.no",
  	"bærum.no",
  	"bo.telemark.no",
  	"bø.telemark.no",
  	"bo.nordland.no",
  	"bø.nordland.no",
  	"bievat.no",
  	"bievát.no",
  	"bomlo.no",
  	"bømlo.no",
  	"batsfjord.no",
  	"båtsfjord.no",
  	"bahcavuotna.no",
  	"báhcavuotna.no",
  	"dovre.no",
  	"drammen.no",
  	"drangedal.no",
  	"dyroy.no",
  	"dyrøy.no",
  	"donna.no",
  	"dønna.no",
  	"eid.no",
  	"eidfjord.no",
  	"eidsberg.no",
  	"eidskog.no",
  	"eidsvoll.no",
  	"eigersund.no",
  	"elverum.no",
  	"enebakk.no",
  	"engerdal.no",
  	"etne.no",
  	"etnedal.no",
  	"evenes.no",
  	"evenassi.no",
  	"evenášši.no",
  	"evje-og-hornnes.no",
  	"farsund.no",
  	"fauske.no",
  	"fuossko.no",
  	"fuoisku.no",
  	"fedje.no",
  	"fet.no",
  	"finnoy.no",
  	"finnøy.no",
  	"fitjar.no",
  	"fjaler.no",
  	"fjell.no",
  	"flakstad.no",
  	"flatanger.no",
  	"flekkefjord.no",
  	"flesberg.no",
  	"flora.no",
  	"fla.no",
  	"flå.no",
  	"folldal.no",
  	"forsand.no",
  	"fosnes.no",
  	"frei.no",
  	"frogn.no",
  	"froland.no",
  	"frosta.no",
  	"frana.no",
  	"fræna.no",
  	"froya.no",
  	"frøya.no",
  	"fusa.no",
  	"fyresdal.no",
  	"forde.no",
  	"førde.no",
  	"gamvik.no",
  	"gangaviika.no",
  	"gáŋgaviika.no",
  	"gaular.no",
  	"gausdal.no",
  	"gildeskal.no",
  	"gildeskål.no",
  	"giske.no",
  	"gjemnes.no",
  	"gjerdrum.no",
  	"gjerstad.no",
  	"gjesdal.no",
  	"gjovik.no",
  	"gjøvik.no",
  	"gloppen.no",
  	"gol.no",
  	"gran.no",
  	"grane.no",
  	"granvin.no",
  	"gratangen.no",
  	"grimstad.no",
  	"grong.no",
  	"kraanghke.no",
  	"kråanghke.no",
  	"grue.no",
  	"gulen.no",
  	"hadsel.no",
  	"halden.no",
  	"halsa.no",
  	"hamar.no",
  	"hamaroy.no",
  	"habmer.no",
  	"hábmer.no",
  	"hapmir.no",
  	"hápmir.no",
  	"hammerfest.no",
  	"hammarfeasta.no",
  	"hámmárfeasta.no",
  	"haram.no",
  	"hareid.no",
  	"harstad.no",
  	"hasvik.no",
  	"aknoluokta.no",
  	"ákŋoluokta.no",
  	"hattfjelldal.no",
  	"aarborte.no",
  	"haugesund.no",
  	"hemne.no",
  	"hemnes.no",
  	"hemsedal.no",
  	"heroy.more-og-romsdal.no",
  	"herøy.møre-og-romsdal.no",
  	"heroy.nordland.no",
  	"herøy.nordland.no",
  	"hitra.no",
  	"hjartdal.no",
  	"hjelmeland.no",
  	"hobol.no",
  	"hobøl.no",
  	"hof.no",
  	"hol.no",
  	"hole.no",
  	"holmestrand.no",
  	"holtalen.no",
  	"holtålen.no",
  	"hornindal.no",
  	"horten.no",
  	"hurdal.no",
  	"hurum.no",
  	"hvaler.no",
  	"hyllestad.no",
  	"hagebostad.no",
  	"hægebostad.no",
  	"hoyanger.no",
  	"høyanger.no",
  	"hoylandet.no",
  	"høylandet.no",
  	"ha.no",
  	"hå.no",
  	"ibestad.no",
  	"inderoy.no",
  	"inderøy.no",
  	"iveland.no",
  	"jevnaker.no",
  	"jondal.no",
  	"jolster.no",
  	"jølster.no",
  	"karasjok.no",
  	"karasjohka.no",
  	"kárášjohka.no",
  	"karlsoy.no",
  	"galsa.no",
  	"gálsá.no",
  	"karmoy.no",
  	"karmøy.no",
  	"kautokeino.no",
  	"guovdageaidnu.no",
  	"klepp.no",
  	"klabu.no",
  	"klæbu.no",
  	"kongsberg.no",
  	"kongsvinger.no",
  	"kragero.no",
  	"kragerø.no",
  	"kristiansand.no",
  	"kristiansund.no",
  	"krodsherad.no",
  	"krødsherad.no",
  	"kvalsund.no",
  	"rahkkeravju.no",
  	"ráhkkerávju.no",
  	"kvam.no",
  	"kvinesdal.no",
  	"kvinnherad.no",
  	"kviteseid.no",
  	"kvitsoy.no",
  	"kvitsøy.no",
  	"kvafjord.no",
  	"kvæfjord.no",
  	"giehtavuoatna.no",
  	"kvanangen.no",
  	"kvænangen.no",
  	"navuotna.no",
  	"návuotna.no",
  	"kafjord.no",
  	"kåfjord.no",
  	"gaivuotna.no",
  	"gáivuotna.no",
  	"larvik.no",
  	"lavangen.no",
  	"lavagis.no",
  	"loabat.no",
  	"loabát.no",
  	"lebesby.no",
  	"davvesiida.no",
  	"leikanger.no",
  	"leirfjord.no",
  	"leka.no",
  	"leksvik.no",
  	"lenvik.no",
  	"leangaviika.no",
  	"leaŋgaviika.no",
  	"lesja.no",
  	"levanger.no",
  	"lier.no",
  	"lierne.no",
  	"lillehammer.no",
  	"lillesand.no",
  	"lindesnes.no",
  	"lindas.no",
  	"lindås.no",
  	"lom.no",
  	"loppa.no",
  	"lahppi.no",
  	"láhppi.no",
  	"lund.no",
  	"lunner.no",
  	"luroy.no",
  	"lurøy.no",
  	"luster.no",
  	"lyngdal.no",
  	"lyngen.no",
  	"ivgu.no",
  	"lardal.no",
  	"lerdal.no",
  	"lærdal.no",
  	"lodingen.no",
  	"lødingen.no",
  	"lorenskog.no",
  	"lørenskog.no",
  	"loten.no",
  	"løten.no",
  	"malvik.no",
  	"masoy.no",
  	"måsøy.no",
  	"muosat.no",
  	"muosát.no",
  	"mandal.no",
  	"marker.no",
  	"marnardal.no",
  	"masfjorden.no",
  	"meland.no",
  	"meldal.no",
  	"melhus.no",
  	"meloy.no",
  	"meløy.no",
  	"meraker.no",
  	"meråker.no",
  	"moareke.no",
  	"moåreke.no",
  	"midsund.no",
  	"midtre-gauldal.no",
  	"modalen.no",
  	"modum.no",
  	"molde.no",
  	"moskenes.no",
  	"moss.no",
  	"mosvik.no",
  	"malselv.no",
  	"målselv.no",
  	"malatvuopmi.no",
  	"málatvuopmi.no",
  	"namdalseid.no",
  	"aejrie.no",
  	"namsos.no",
  	"namsskogan.no",
  	"naamesjevuemie.no",
  	"nååmesjevuemie.no",
  	"laakesvuemie.no",
  	"nannestad.no",
  	"narvik.no",
  	"narviika.no",
  	"naustdal.no",
  	"nedre-eiker.no",
  	"nes.akershus.no",
  	"nes.buskerud.no",
  	"nesna.no",
  	"nesodden.no",
  	"nesseby.no",
  	"unjarga.no",
  	"unjárga.no",
  	"nesset.no",
  	"nissedal.no",
  	"nittedal.no",
  	"nord-aurdal.no",
  	"nord-fron.no",
  	"nord-odal.no",
  	"norddal.no",
  	"nordkapp.no",
  	"davvenjarga.no",
  	"davvenjárga.no",
  	"nordre-land.no",
  	"nordreisa.no",
  	"raisa.no",
  	"ráisa.no",
  	"nore-og-uvdal.no",
  	"notodden.no",
  	"naroy.no",
  	"nærøy.no",
  	"notteroy.no",
  	"nøtterøy.no",
  	"odda.no",
  	"oksnes.no",
  	"øksnes.no",
  	"oppdal.no",
  	"oppegard.no",
  	"oppegård.no",
  	"orkdal.no",
  	"orland.no",
  	"ørland.no",
  	"orskog.no",
  	"ørskog.no",
  	"orsta.no",
  	"ørsta.no",
  	"os.hedmark.no",
  	"os.hordaland.no",
  	"osen.no",
  	"osteroy.no",
  	"osterøy.no",
  	"ostre-toten.no",
  	"østre-toten.no",
  	"overhalla.no",
  	"ovre-eiker.no",
  	"øvre-eiker.no",
  	"oyer.no",
  	"øyer.no",
  	"oygarden.no",
  	"øygarden.no",
  	"oystre-slidre.no",
  	"øystre-slidre.no",
  	"porsanger.no",
  	"porsangu.no",
  	"porsáŋgu.no",
  	"porsgrunn.no",
  	"radoy.no",
  	"radøy.no",
  	"rakkestad.no",
  	"rana.no",
  	"ruovat.no",
  	"randaberg.no",
  	"rauma.no",
  	"rendalen.no",
  	"rennebu.no",
  	"rennesoy.no",
  	"rennesøy.no",
  	"rindal.no",
  	"ringebu.no",
  	"ringerike.no",
  	"ringsaker.no",
  	"rissa.no",
  	"risor.no",
  	"risør.no",
  	"roan.no",
  	"rollag.no",
  	"rygge.no",
  	"ralingen.no",
  	"rælingen.no",
  	"rodoy.no",
  	"rødøy.no",
  	"romskog.no",
  	"rømskog.no",
  	"roros.no",
  	"røros.no",
  	"rost.no",
  	"røst.no",
  	"royken.no",
  	"røyken.no",
  	"royrvik.no",
  	"røyrvik.no",
  	"rade.no",
  	"råde.no",
  	"salangen.no",
  	"siellak.no",
  	"saltdal.no",
  	"salat.no",
  	"sálát.no",
  	"sálat.no",
  	"samnanger.no",
  	"sande.more-og-romsdal.no",
  	"sande.møre-og-romsdal.no",
  	"sande.vestfold.no",
  	"sandefjord.no",
  	"sandnes.no",
  	"sandoy.no",
  	"sandøy.no",
  	"sarpsborg.no",
  	"sauda.no",
  	"sauherad.no",
  	"sel.no",
  	"selbu.no",
  	"selje.no",
  	"seljord.no",
  	"sigdal.no",
  	"siljan.no",
  	"sirdal.no",
  	"skaun.no",
  	"skedsmo.no",
  	"ski.no",
  	"skien.no",
  	"skiptvet.no",
  	"skjervoy.no",
  	"skjervøy.no",
  	"skierva.no",
  	"skiervá.no",
  	"skjak.no",
  	"skjåk.no",
  	"skodje.no",
  	"skanland.no",
  	"skånland.no",
  	"skanit.no",
  	"skánit.no",
  	"smola.no",
  	"smøla.no",
  	"snillfjord.no",
  	"snasa.no",
  	"snåsa.no",
  	"snoasa.no",
  	"snaase.no",
  	"snåase.no",
  	"sogndal.no",
  	"sokndal.no",
  	"sola.no",
  	"solund.no",
  	"songdalen.no",
  	"sortland.no",
  	"spydeberg.no",
  	"stange.no",
  	"stavanger.no",
  	"steigen.no",
  	"steinkjer.no",
  	"stjordal.no",
  	"stjørdal.no",
  	"stokke.no",
  	"stor-elvdal.no",
  	"stord.no",
  	"stordal.no",
  	"storfjord.no",
  	"omasvuotna.no",
  	"strand.no",
  	"stranda.no",
  	"stryn.no",
  	"sula.no",
  	"suldal.no",
  	"sund.no",
  	"sunndal.no",
  	"surnadal.no",
  	"sveio.no",
  	"svelvik.no",
  	"sykkylven.no",
  	"sogne.no",
  	"søgne.no",
  	"somna.no",
  	"sømna.no",
  	"sondre-land.no",
  	"søndre-land.no",
  	"sor-aurdal.no",
  	"sør-aurdal.no",
  	"sor-fron.no",
  	"sør-fron.no",
  	"sor-odal.no",
  	"sør-odal.no",
  	"sor-varanger.no",
  	"sør-varanger.no",
  	"matta-varjjat.no",
  	"mátta-várjjat.no",
  	"sorfold.no",
  	"sørfold.no",
  	"sorreisa.no",
  	"sørreisa.no",
  	"sorum.no",
  	"sørum.no",
  	"tana.no",
  	"deatnu.no",
  	"time.no",
  	"tingvoll.no",
  	"tinn.no",
  	"tjeldsund.no",
  	"dielddanuorri.no",
  	"tjome.no",
  	"tjøme.no",
  	"tokke.no",
  	"tolga.no",
  	"torsken.no",
  	"tranoy.no",
  	"tranøy.no",
  	"tromso.no",
  	"tromsø.no",
  	"tromsa.no",
  	"romsa.no",
  	"trondheim.no",
  	"troandin.no",
  	"trysil.no",
  	"trana.no",
  	"træna.no",
  	"trogstad.no",
  	"trøgstad.no",
  	"tvedestrand.no",
  	"tydal.no",
  	"tynset.no",
  	"tysfjord.no",
  	"divtasvuodna.no",
  	"divttasvuotna.no",
  	"tysnes.no",
  	"tysvar.no",
  	"tysvær.no",
  	"tonsberg.no",
  	"tønsberg.no",
  	"ullensaker.no",
  	"ullensvang.no",
  	"ulvik.no",
  	"utsira.no",
  	"vadso.no",
  	"vadsø.no",
  	"cahcesuolo.no",
  	"čáhcesuolo.no",
  	"vaksdal.no",
  	"valle.no",
  	"vang.no",
  	"vanylven.no",
  	"vardo.no",
  	"vardø.no",
  	"varggat.no",
  	"várggát.no",
  	"vefsn.no",
  	"vaapste.no",
  	"vega.no",
  	"vegarshei.no",
  	"vegårshei.no",
  	"vennesla.no",
  	"verdal.no",
  	"verran.no",
  	"vestby.no",
  	"vestnes.no",
  	"vestre-slidre.no",
  	"vestre-toten.no",
  	"vestvagoy.no",
  	"vestvågøy.no",
  	"vevelstad.no",
  	"vik.no",
  	"vikna.no",
  	"vindafjord.no",
  	"volda.no",
  	"voss.no",
  	"varoy.no",
  	"værøy.no",
  	"vagan.no",
  	"vågan.no",
  	"voagat.no",
  	"vagsoy.no",
  	"vågsøy.no",
  	"vaga.no",
  	"vågå.no",
  	"valer.ostfold.no",
  	"våler.østfold.no",
  	"valer.hedmark.no",
  	"våler.hedmark.no",
  	"*.np",
  	"nr",
  	"biz.nr",
  	"info.nr",
  	"gov.nr",
  	"edu.nr",
  	"org.nr",
  	"net.nr",
  	"com.nr",
  	"nu",
  	"nz",
  	"ac.nz",
  	"co.nz",
  	"cri.nz",
  	"geek.nz",
  	"gen.nz",
  	"govt.nz",
  	"health.nz",
  	"iwi.nz",
  	"kiwi.nz",
  	"maori.nz",
  	"mil.nz",
  	"māori.nz",
  	"net.nz",
  	"org.nz",
  	"parliament.nz",
  	"school.nz",
  	"om",
  	"co.om",
  	"com.om",
  	"edu.om",
  	"gov.om",
  	"med.om",
  	"museum.om",
  	"net.om",
  	"org.om",
  	"pro.om",
  	"onion",
  	"org",
  	"pa",
  	"ac.pa",
  	"gob.pa",
  	"com.pa",
  	"org.pa",
  	"sld.pa",
  	"edu.pa",
  	"net.pa",
  	"ing.pa",
  	"abo.pa",
  	"med.pa",
  	"nom.pa",
  	"pe",
  	"edu.pe",
  	"gob.pe",
  	"nom.pe",
  	"mil.pe",
  	"org.pe",
  	"com.pe",
  	"net.pe",
  	"pf",
  	"com.pf",
  	"org.pf",
  	"edu.pf",
  	"*.pg",
  	"ph",
  	"com.ph",
  	"net.ph",
  	"org.ph",
  	"gov.ph",
  	"edu.ph",
  	"ngo.ph",
  	"mil.ph",
  	"i.ph",
  	"pk",
  	"com.pk",
  	"net.pk",
  	"edu.pk",
  	"org.pk",
  	"fam.pk",
  	"biz.pk",
  	"web.pk",
  	"gov.pk",
  	"gob.pk",
  	"gok.pk",
  	"gon.pk",
  	"gop.pk",
  	"gos.pk",
  	"info.pk",
  	"pl",
  	"com.pl",
  	"net.pl",
  	"org.pl",
  	"aid.pl",
  	"agro.pl",
  	"atm.pl",
  	"auto.pl",
  	"biz.pl",
  	"edu.pl",
  	"gmina.pl",
  	"gsm.pl",
  	"info.pl",
  	"mail.pl",
  	"miasta.pl",
  	"media.pl",
  	"mil.pl",
  	"nieruchomosci.pl",
  	"nom.pl",
  	"pc.pl",
  	"powiat.pl",
  	"priv.pl",
  	"realestate.pl",
  	"rel.pl",
  	"sex.pl",
  	"shop.pl",
  	"sklep.pl",
  	"sos.pl",
  	"szkola.pl",
  	"targi.pl",
  	"tm.pl",
  	"tourism.pl",
  	"travel.pl",
  	"turystyka.pl",
  	"gov.pl",
  	"ap.gov.pl",
  	"ic.gov.pl",
  	"is.gov.pl",
  	"us.gov.pl",
  	"kmpsp.gov.pl",
  	"kppsp.gov.pl",
  	"kwpsp.gov.pl",
  	"psp.gov.pl",
  	"wskr.gov.pl",
  	"kwp.gov.pl",
  	"mw.gov.pl",
  	"ug.gov.pl",
  	"um.gov.pl",
  	"umig.gov.pl",
  	"ugim.gov.pl",
  	"upow.gov.pl",
  	"uw.gov.pl",
  	"starostwo.gov.pl",
  	"pa.gov.pl",
  	"po.gov.pl",
  	"psse.gov.pl",
  	"pup.gov.pl",
  	"rzgw.gov.pl",
  	"sa.gov.pl",
  	"so.gov.pl",
  	"sr.gov.pl",
  	"wsa.gov.pl",
  	"sko.gov.pl",
  	"uzs.gov.pl",
  	"wiih.gov.pl",
  	"winb.gov.pl",
  	"pinb.gov.pl",
  	"wios.gov.pl",
  	"witd.gov.pl",
  	"wzmiuw.gov.pl",
  	"piw.gov.pl",
  	"wiw.gov.pl",
  	"griw.gov.pl",
  	"wif.gov.pl",
  	"oum.gov.pl",
  	"sdn.gov.pl",
  	"zp.gov.pl",
  	"uppo.gov.pl",
  	"mup.gov.pl",
  	"wuoz.gov.pl",
  	"konsulat.gov.pl",
  	"oirm.gov.pl",
  	"augustow.pl",
  	"babia-gora.pl",
  	"bedzin.pl",
  	"beskidy.pl",
  	"bialowieza.pl",
  	"bialystok.pl",
  	"bielawa.pl",
  	"bieszczady.pl",
  	"boleslawiec.pl",
  	"bydgoszcz.pl",
  	"bytom.pl",
  	"cieszyn.pl",
  	"czeladz.pl",
  	"czest.pl",
  	"dlugoleka.pl",
  	"elblag.pl",
  	"elk.pl",
  	"glogow.pl",
  	"gniezno.pl",
  	"gorlice.pl",
  	"grajewo.pl",
  	"ilawa.pl",
  	"jaworzno.pl",
  	"jelenia-gora.pl",
  	"jgora.pl",
  	"kalisz.pl",
  	"kazimierz-dolny.pl",
  	"karpacz.pl",
  	"kartuzy.pl",
  	"kaszuby.pl",
  	"katowice.pl",
  	"kepno.pl",
  	"ketrzyn.pl",
  	"klodzko.pl",
  	"kobierzyce.pl",
  	"kolobrzeg.pl",
  	"konin.pl",
  	"konskowola.pl",
  	"kutno.pl",
  	"lapy.pl",
  	"lebork.pl",
  	"legnica.pl",
  	"lezajsk.pl",
  	"limanowa.pl",
  	"lomza.pl",
  	"lowicz.pl",
  	"lubin.pl",
  	"lukow.pl",
  	"malbork.pl",
  	"malopolska.pl",
  	"mazowsze.pl",
  	"mazury.pl",
  	"mielec.pl",
  	"mielno.pl",
  	"mragowo.pl",
  	"naklo.pl",
  	"nowaruda.pl",
  	"nysa.pl",
  	"olawa.pl",
  	"olecko.pl",
  	"olkusz.pl",
  	"olsztyn.pl",
  	"opoczno.pl",
  	"opole.pl",
  	"ostroda.pl",
  	"ostroleka.pl",
  	"ostrowiec.pl",
  	"ostrowwlkp.pl",
  	"pila.pl",
  	"pisz.pl",
  	"podhale.pl",
  	"podlasie.pl",
  	"polkowice.pl",
  	"pomorze.pl",
  	"pomorskie.pl",
  	"prochowice.pl",
  	"pruszkow.pl",
  	"przeworsk.pl",
  	"pulawy.pl",
  	"radom.pl",
  	"rawa-maz.pl",
  	"rybnik.pl",
  	"rzeszow.pl",
  	"sanok.pl",
  	"sejny.pl",
  	"slask.pl",
  	"slupsk.pl",
  	"sosnowiec.pl",
  	"stalowa-wola.pl",
  	"skoczow.pl",
  	"starachowice.pl",
  	"stargard.pl",
  	"suwalki.pl",
  	"swidnica.pl",
  	"swiebodzin.pl",
  	"swinoujscie.pl",
  	"szczecin.pl",
  	"szczytno.pl",
  	"tarnobrzeg.pl",
  	"tgory.pl",
  	"turek.pl",
  	"tychy.pl",
  	"ustka.pl",
  	"walbrzych.pl",
  	"warmia.pl",
  	"warszawa.pl",
  	"waw.pl",
  	"wegrow.pl",
  	"wielun.pl",
  	"wlocl.pl",
  	"wloclawek.pl",
  	"wodzislaw.pl",
  	"wolomin.pl",
  	"wroclaw.pl",
  	"zachpomor.pl",
  	"zagan.pl",
  	"zarow.pl",
  	"zgora.pl",
  	"zgorzelec.pl",
  	"pm",
  	"pn",
  	"gov.pn",
  	"co.pn",
  	"org.pn",
  	"edu.pn",
  	"net.pn",
  	"post",
  	"pr",
  	"com.pr",
  	"net.pr",
  	"org.pr",
  	"gov.pr",
  	"edu.pr",
  	"isla.pr",
  	"pro.pr",
  	"biz.pr",
  	"info.pr",
  	"name.pr",
  	"est.pr",
  	"prof.pr",
  	"ac.pr",
  	"pro",
  	"aaa.pro",
  	"aca.pro",
  	"acct.pro",
  	"avocat.pro",
  	"bar.pro",
  	"cpa.pro",
  	"eng.pro",
  	"jur.pro",
  	"law.pro",
  	"med.pro",
  	"recht.pro",
  	"ps",
  	"edu.ps",
  	"gov.ps",
  	"sec.ps",
  	"plo.ps",
  	"com.ps",
  	"org.ps",
  	"net.ps",
  	"pt",
  	"net.pt",
  	"gov.pt",
  	"org.pt",
  	"edu.pt",
  	"int.pt",
  	"publ.pt",
  	"com.pt",
  	"nome.pt",
  	"pw",
  	"co.pw",
  	"ne.pw",
  	"or.pw",
  	"ed.pw",
  	"go.pw",
  	"belau.pw",
  	"py",
  	"com.py",
  	"coop.py",
  	"edu.py",
  	"gov.py",
  	"mil.py",
  	"net.py",
  	"org.py",
  	"qa",
  	"com.qa",
  	"edu.qa",
  	"gov.qa",
  	"mil.qa",
  	"name.qa",
  	"net.qa",
  	"org.qa",
  	"sch.qa",
  	"re",
  	"asso.re",
  	"com.re",
  	"nom.re",
  	"ro",
  	"arts.ro",
  	"com.ro",
  	"firm.ro",
  	"info.ro",
  	"nom.ro",
  	"nt.ro",
  	"org.ro",
  	"rec.ro",
  	"store.ro",
  	"tm.ro",
  	"www.ro",
  	"rs",
  	"ac.rs",
  	"co.rs",
  	"edu.rs",
  	"gov.rs",
  	"in.rs",
  	"org.rs",
  	"ru",
  	"rw",
  	"ac.rw",
  	"co.rw",
  	"coop.rw",
  	"gov.rw",
  	"mil.rw",
  	"net.rw",
  	"org.rw",
  	"sa",
  	"com.sa",
  	"net.sa",
  	"org.sa",
  	"gov.sa",
  	"med.sa",
  	"pub.sa",
  	"edu.sa",
  	"sch.sa",
  	"sb",
  	"com.sb",
  	"edu.sb",
  	"gov.sb",
  	"net.sb",
  	"org.sb",
  	"sc",
  	"com.sc",
  	"gov.sc",
  	"net.sc",
  	"org.sc",
  	"edu.sc",
  	"sd",
  	"com.sd",
  	"net.sd",
  	"org.sd",
  	"edu.sd",
  	"med.sd",
  	"tv.sd",
  	"gov.sd",
  	"info.sd",
  	"se",
  	"a.se",
  	"ac.se",
  	"b.se",
  	"bd.se",
  	"brand.se",
  	"c.se",
  	"d.se",
  	"e.se",
  	"f.se",
  	"fh.se",
  	"fhsk.se",
  	"fhv.se",
  	"g.se",
  	"h.se",
  	"i.se",
  	"k.se",
  	"komforb.se",
  	"kommunalforbund.se",
  	"komvux.se",
  	"l.se",
  	"lanbib.se",
  	"m.se",
  	"n.se",
  	"naturbruksgymn.se",
  	"o.se",
  	"org.se",
  	"p.se",
  	"parti.se",
  	"pp.se",
  	"press.se",
  	"r.se",
  	"s.se",
  	"t.se",
  	"tm.se",
  	"u.se",
  	"w.se",
  	"x.se",
  	"y.se",
  	"z.se",
  	"sg",
  	"com.sg",
  	"net.sg",
  	"org.sg",
  	"gov.sg",
  	"edu.sg",
  	"per.sg",
  	"sh",
  	"com.sh",
  	"net.sh",
  	"gov.sh",
  	"org.sh",
  	"mil.sh",
  	"si",
  	"sj",
  	"sk",
  	"sl",
  	"com.sl",
  	"net.sl",
  	"edu.sl",
  	"gov.sl",
  	"org.sl",
  	"sm",
  	"sn",
  	"art.sn",
  	"com.sn",
  	"edu.sn",
  	"gouv.sn",
  	"org.sn",
  	"perso.sn",
  	"univ.sn",
  	"so",
  	"com.so",
  	"edu.so",
  	"gov.so",
  	"me.so",
  	"net.so",
  	"org.so",
  	"sr",
  	"ss",
  	"biz.ss",
  	"com.ss",
  	"edu.ss",
  	"gov.ss",
  	"me.ss",
  	"net.ss",
  	"org.ss",
  	"sch.ss",
  	"st",
  	"co.st",
  	"com.st",
  	"consulado.st",
  	"edu.st",
  	"embaixada.st",
  	"mil.st",
  	"net.st",
  	"org.st",
  	"principe.st",
  	"saotome.st",
  	"store.st",
  	"su",
  	"sv",
  	"com.sv",
  	"edu.sv",
  	"gob.sv",
  	"org.sv",
  	"red.sv",
  	"sx",
  	"gov.sx",
  	"sy",
  	"edu.sy",
  	"gov.sy",
  	"net.sy",
  	"mil.sy",
  	"com.sy",
  	"org.sy",
  	"sz",
  	"co.sz",
  	"ac.sz",
  	"org.sz",
  	"tc",
  	"td",
  	"tel",
  	"tf",
  	"tg",
  	"th",
  	"ac.th",
  	"co.th",
  	"go.th",
  	"in.th",
  	"mi.th",
  	"net.th",
  	"or.th",
  	"tj",
  	"ac.tj",
  	"biz.tj",
  	"co.tj",
  	"com.tj",
  	"edu.tj",
  	"go.tj",
  	"gov.tj",
  	"int.tj",
  	"mil.tj",
  	"name.tj",
  	"net.tj",
  	"nic.tj",
  	"org.tj",
  	"test.tj",
  	"web.tj",
  	"tk",
  	"tl",
  	"gov.tl",
  	"tm",
  	"com.tm",
  	"co.tm",
  	"org.tm",
  	"net.tm",
  	"nom.tm",
  	"gov.tm",
  	"mil.tm",
  	"edu.tm",
  	"tn",
  	"com.tn",
  	"ens.tn",
  	"fin.tn",
  	"gov.tn",
  	"ind.tn",
  	"info.tn",
  	"intl.tn",
  	"mincom.tn",
  	"nat.tn",
  	"net.tn",
  	"org.tn",
  	"perso.tn",
  	"tourism.tn",
  	"to",
  	"com.to",
  	"gov.to",
  	"net.to",
  	"org.to",
  	"edu.to",
  	"mil.to",
  	"tr",
  	"av.tr",
  	"bbs.tr",
  	"bel.tr",
  	"biz.tr",
  	"com.tr",
  	"dr.tr",
  	"edu.tr",
  	"gen.tr",
  	"gov.tr",
  	"info.tr",
  	"mil.tr",
  	"k12.tr",
  	"kep.tr",
  	"name.tr",
  	"net.tr",
  	"org.tr",
  	"pol.tr",
  	"tel.tr",
  	"tsk.tr",
  	"tv.tr",
  	"web.tr",
  	"nc.tr",
  	"gov.nc.tr",
  	"tt",
  	"co.tt",
  	"com.tt",
  	"org.tt",
  	"net.tt",
  	"biz.tt",
  	"info.tt",
  	"pro.tt",
  	"int.tt",
  	"coop.tt",
  	"jobs.tt",
  	"mobi.tt",
  	"travel.tt",
  	"museum.tt",
  	"aero.tt",
  	"name.tt",
  	"gov.tt",
  	"edu.tt",
  	"tv",
  	"tw",
  	"edu.tw",
  	"gov.tw",
  	"mil.tw",
  	"com.tw",
  	"net.tw",
  	"org.tw",
  	"idv.tw",
  	"game.tw",
  	"ebiz.tw",
  	"club.tw",
  	"網路.tw",
  	"組織.tw",
  	"商業.tw",
  	"tz",
  	"ac.tz",
  	"co.tz",
  	"go.tz",
  	"hotel.tz",
  	"info.tz",
  	"me.tz",
  	"mil.tz",
  	"mobi.tz",
  	"ne.tz",
  	"or.tz",
  	"sc.tz",
  	"tv.tz",
  	"ua",
  	"com.ua",
  	"edu.ua",
  	"gov.ua",
  	"in.ua",
  	"net.ua",
  	"org.ua",
  	"cherkassy.ua",
  	"cherkasy.ua",
  	"chernigov.ua",
  	"chernihiv.ua",
  	"chernivtsi.ua",
  	"chernovtsy.ua",
  	"ck.ua",
  	"cn.ua",
  	"cr.ua",
  	"crimea.ua",
  	"cv.ua",
  	"dn.ua",
  	"dnepropetrovsk.ua",
  	"dnipropetrovsk.ua",
  	"donetsk.ua",
  	"dp.ua",
  	"if.ua",
  	"ivano-frankivsk.ua",
  	"kh.ua",
  	"kharkiv.ua",
  	"kharkov.ua",
  	"kherson.ua",
  	"khmelnitskiy.ua",
  	"khmelnytskyi.ua",
  	"kiev.ua",
  	"kirovograd.ua",
  	"km.ua",
  	"kr.ua",
  	"krym.ua",
  	"ks.ua",
  	"kv.ua",
  	"kyiv.ua",
  	"lg.ua",
  	"lt.ua",
  	"lugansk.ua",
  	"lutsk.ua",
  	"lv.ua",
  	"lviv.ua",
  	"mk.ua",
  	"mykolaiv.ua",
  	"nikolaev.ua",
  	"od.ua",
  	"odesa.ua",
  	"odessa.ua",
  	"pl.ua",
  	"poltava.ua",
  	"rivne.ua",
  	"rovno.ua",
  	"rv.ua",
  	"sb.ua",
  	"sebastopol.ua",
  	"sevastopol.ua",
  	"sm.ua",
  	"sumy.ua",
  	"te.ua",
  	"ternopil.ua",
  	"uz.ua",
  	"uzhgorod.ua",
  	"vinnica.ua",
  	"vinnytsia.ua",
  	"vn.ua",
  	"volyn.ua",
  	"yalta.ua",
  	"zaporizhzhe.ua",
  	"zaporizhzhia.ua",
  	"zhitomir.ua",
  	"zhytomyr.ua",
  	"zp.ua",
  	"zt.ua",
  	"ug",
  	"co.ug",
  	"or.ug",
  	"ac.ug",
  	"sc.ug",
  	"go.ug",
  	"ne.ug",
  	"com.ug",
  	"org.ug",
  	"uk",
  	"ac.uk",
  	"co.uk",
  	"gov.uk",
  	"ltd.uk",
  	"me.uk",
  	"net.uk",
  	"nhs.uk",
  	"org.uk",
  	"plc.uk",
  	"police.uk",
  	"*.sch.uk",
  	"us",
  	"dni.us",
  	"fed.us",
  	"isa.us",
  	"kids.us",
  	"nsn.us",
  	"ak.us",
  	"al.us",
  	"ar.us",
  	"as.us",
  	"az.us",
  	"ca.us",
  	"co.us",
  	"ct.us",
  	"dc.us",
  	"de.us",
  	"fl.us",
  	"ga.us",
  	"gu.us",
  	"hi.us",
  	"ia.us",
  	"id.us",
  	"il.us",
  	"in.us",
  	"ks.us",
  	"ky.us",
  	"la.us",
  	"ma.us",
  	"md.us",
  	"me.us",
  	"mi.us",
  	"mn.us",
  	"mo.us",
  	"ms.us",
  	"mt.us",
  	"nc.us",
  	"nd.us",
  	"ne.us",
  	"nh.us",
  	"nj.us",
  	"nm.us",
  	"nv.us",
  	"ny.us",
  	"oh.us",
  	"ok.us",
  	"or.us",
  	"pa.us",
  	"pr.us",
  	"ri.us",
  	"sc.us",
  	"sd.us",
  	"tn.us",
  	"tx.us",
  	"ut.us",
  	"vi.us",
  	"vt.us",
  	"va.us",
  	"wa.us",
  	"wi.us",
  	"wv.us",
  	"wy.us",
  	"k12.ak.us",
  	"k12.al.us",
  	"k12.ar.us",
  	"k12.as.us",
  	"k12.az.us",
  	"k12.ca.us",
  	"k12.co.us",
  	"k12.ct.us",
  	"k12.dc.us",
  	"k12.de.us",
  	"k12.fl.us",
  	"k12.ga.us",
  	"k12.gu.us",
  	"k12.ia.us",
  	"k12.id.us",
  	"k12.il.us",
  	"k12.in.us",
  	"k12.ks.us",
  	"k12.ky.us",
  	"k12.la.us",
  	"k12.ma.us",
  	"k12.md.us",
  	"k12.me.us",
  	"k12.mi.us",
  	"k12.mn.us",
  	"k12.mo.us",
  	"k12.ms.us",
  	"k12.mt.us",
  	"k12.nc.us",
  	"k12.ne.us",
  	"k12.nh.us",
  	"k12.nj.us",
  	"k12.nm.us",
  	"k12.nv.us",
  	"k12.ny.us",
  	"k12.oh.us",
  	"k12.ok.us",
  	"k12.or.us",
  	"k12.pa.us",
  	"k12.pr.us",
  	"k12.sc.us",
  	"k12.tn.us",
  	"k12.tx.us",
  	"k12.ut.us",
  	"k12.vi.us",
  	"k12.vt.us",
  	"k12.va.us",
  	"k12.wa.us",
  	"k12.wi.us",
  	"k12.wy.us",
  	"cc.ak.us",
  	"cc.al.us",
  	"cc.ar.us",
  	"cc.as.us",
  	"cc.az.us",
  	"cc.ca.us",
  	"cc.co.us",
  	"cc.ct.us",
  	"cc.dc.us",
  	"cc.de.us",
  	"cc.fl.us",
  	"cc.ga.us",
  	"cc.gu.us",
  	"cc.hi.us",
  	"cc.ia.us",
  	"cc.id.us",
  	"cc.il.us",
  	"cc.in.us",
  	"cc.ks.us",
  	"cc.ky.us",
  	"cc.la.us",
  	"cc.ma.us",
  	"cc.md.us",
  	"cc.me.us",
  	"cc.mi.us",
  	"cc.mn.us",
  	"cc.mo.us",
  	"cc.ms.us",
  	"cc.mt.us",
  	"cc.nc.us",
  	"cc.nd.us",
  	"cc.ne.us",
  	"cc.nh.us",
  	"cc.nj.us",
  	"cc.nm.us",
  	"cc.nv.us",
  	"cc.ny.us",
  	"cc.oh.us",
  	"cc.ok.us",
  	"cc.or.us",
  	"cc.pa.us",
  	"cc.pr.us",
  	"cc.ri.us",
  	"cc.sc.us",
  	"cc.sd.us",
  	"cc.tn.us",
  	"cc.tx.us",
  	"cc.ut.us",
  	"cc.vi.us",
  	"cc.vt.us",
  	"cc.va.us",
  	"cc.wa.us",
  	"cc.wi.us",
  	"cc.wv.us",
  	"cc.wy.us",
  	"lib.ak.us",
  	"lib.al.us",
  	"lib.ar.us",
  	"lib.as.us",
  	"lib.az.us",
  	"lib.ca.us",
  	"lib.co.us",
  	"lib.ct.us",
  	"lib.dc.us",
  	"lib.fl.us",
  	"lib.ga.us",
  	"lib.gu.us",
  	"lib.hi.us",
  	"lib.ia.us",
  	"lib.id.us",
  	"lib.il.us",
  	"lib.in.us",
  	"lib.ks.us",
  	"lib.ky.us",
  	"lib.la.us",
  	"lib.ma.us",
  	"lib.md.us",
  	"lib.me.us",
  	"lib.mi.us",
  	"lib.mn.us",
  	"lib.mo.us",
  	"lib.ms.us",
  	"lib.mt.us",
  	"lib.nc.us",
  	"lib.nd.us",
  	"lib.ne.us",
  	"lib.nh.us",
  	"lib.nj.us",
  	"lib.nm.us",
  	"lib.nv.us",
  	"lib.ny.us",
  	"lib.oh.us",
  	"lib.ok.us",
  	"lib.or.us",
  	"lib.pa.us",
  	"lib.pr.us",
  	"lib.ri.us",
  	"lib.sc.us",
  	"lib.sd.us",
  	"lib.tn.us",
  	"lib.tx.us",
  	"lib.ut.us",
  	"lib.vi.us",
  	"lib.vt.us",
  	"lib.va.us",
  	"lib.wa.us",
  	"lib.wi.us",
  	"lib.wy.us",
  	"pvt.k12.ma.us",
  	"chtr.k12.ma.us",
  	"paroch.k12.ma.us",
  	"ann-arbor.mi.us",
  	"cog.mi.us",
  	"dst.mi.us",
  	"eaton.mi.us",
  	"gen.mi.us",
  	"mus.mi.us",
  	"tec.mi.us",
  	"washtenaw.mi.us",
  	"uy",
  	"com.uy",
  	"edu.uy",
  	"gub.uy",
  	"mil.uy",
  	"net.uy",
  	"org.uy",
  	"uz",
  	"co.uz",
  	"com.uz",
  	"net.uz",
  	"org.uz",
  	"va",
  	"vc",
  	"com.vc",
  	"net.vc",
  	"org.vc",
  	"gov.vc",
  	"mil.vc",
  	"edu.vc",
  	"ve",
  	"arts.ve",
  	"bib.ve",
  	"co.ve",
  	"com.ve",
  	"e12.ve",
  	"edu.ve",
  	"firm.ve",
  	"gob.ve",
  	"gov.ve",
  	"info.ve",
  	"int.ve",
  	"mil.ve",
  	"net.ve",
  	"nom.ve",
  	"org.ve",
  	"rar.ve",
  	"rec.ve",
  	"store.ve",
  	"tec.ve",
  	"web.ve",
  	"vg",
  	"vi",
  	"co.vi",
  	"com.vi",
  	"k12.vi",
  	"net.vi",
  	"org.vi",
  	"vn",
  	"com.vn",
  	"net.vn",
  	"org.vn",
  	"edu.vn",
  	"gov.vn",
  	"int.vn",
  	"ac.vn",
  	"biz.vn",
  	"info.vn",
  	"name.vn",
  	"pro.vn",
  	"health.vn",
  	"vu",
  	"com.vu",
  	"edu.vu",
  	"net.vu",
  	"org.vu",
  	"wf",
  	"ws",
  	"com.ws",
  	"net.ws",
  	"org.ws",
  	"gov.ws",
  	"edu.ws",
  	"yt",
  	"امارات",
  	"հայ",
  	"বাংলা",
  	"бг",
  	"البحرين",
  	"бел",
  	"中国",
  	"中國",
  	"الجزائر",
  	"مصر",
  	"ею",
  	"ευ",
  	"موريتانيا",
  	"გე",
  	"ελ",
  	"香港",
  	"公司.香港",
  	"教育.香港",
  	"政府.香港",
  	"個人.香港",
  	"網絡.香港",
  	"組織.香港",
  	"ಭಾರತ",
  	"ଭାରତ",
  	"ভাৰত",
  	"भारतम्",
  	"भारोत",
  	"ڀارت",
  	"ഭാരതം",
  	"भारत",
  	"بارت",
  	"بھارت",
  	"భారత్",
  	"ભારત",
  	"ਭਾਰਤ",
  	"ভারত",
  	"இந்தியா",
  	"ایران",
  	"ايران",
  	"عراق",
  	"الاردن",
  	"한국",
  	"қаз",
  	"ລາວ",
  	"ලංකා",
  	"இலங்கை",
  	"المغرب",
  	"мкд",
  	"мон",
  	"澳門",
  	"澳门",
  	"مليسيا",
  	"عمان",
  	"پاکستان",
  	"پاكستان",
  	"فلسطين",
  	"срб",
  	"пр.срб",
  	"орг.срб",
  	"обр.срб",
  	"од.срб",
  	"упр.срб",
  	"ак.срб",
  	"рф",
  	"قطر",
  	"السعودية",
  	"السعودیة",
  	"السعودیۃ",
  	"السعوديه",
  	"سودان",
  	"新加坡",
  	"சிங்கப்பூர்",
  	"سورية",
  	"سوريا",
  	"ไทย",
  	"ศึกษา.ไทย",
  	"ธุรกิจ.ไทย",
  	"รัฐบาล.ไทย",
  	"ทหาร.ไทย",
  	"เน็ต.ไทย",
  	"องค์กร.ไทย",
  	"تونس",
  	"台灣",
  	"台湾",
  	"臺灣",
  	"укр",
  	"اليمن",
  	"xxx",
  	"ye",
  	"com.ye",
  	"edu.ye",
  	"gov.ye",
  	"net.ye",
  	"mil.ye",
  	"org.ye",
  	"ac.za",
  	"agric.za",
  	"alt.za",
  	"co.za",
  	"edu.za",
  	"gov.za",
  	"grondar.za",
  	"law.za",
  	"mil.za",
  	"net.za",
  	"ngo.za",
  	"nic.za",
  	"nis.za",
  	"nom.za",
  	"org.za",
  	"school.za",
  	"tm.za",
  	"web.za",
  	"zm",
  	"ac.zm",
  	"biz.zm",
  	"co.zm",
  	"com.zm",
  	"edu.zm",
  	"gov.zm",
  	"info.zm",
  	"mil.zm",
  	"net.zm",
  	"org.zm",
  	"sch.zm",
  	"zw",
  	"ac.zw",
  	"co.zw",
  	"gov.zw",
  	"mil.zw",
  	"org.zw",
  	"aaa",
  	"aarp",
  	"abarth",
  	"abb",
  	"abbott",
  	"abbvie",
  	"abc",
  	"able",
  	"abogado",
  	"abudhabi",
  	"academy",
  	"accenture",
  	"accountant",
  	"accountants",
  	"aco",
  	"actor",
  	"adac",
  	"ads",
  	"adult",
  	"aeg",
  	"aetna",
  	"afl",
  	"africa",
  	"agakhan",
  	"agency",
  	"aig",
  	"airbus",
  	"airforce",
  	"airtel",
  	"akdn",
  	"alfaromeo",
  	"alibaba",
  	"alipay",
  	"allfinanz",
  	"allstate",
  	"ally",
  	"alsace",
  	"alstom",
  	"amazon",
  	"americanexpress",
  	"americanfamily",
  	"amex",
  	"amfam",
  	"amica",
  	"amsterdam",
  	"analytics",
  	"android",
  	"anquan",
  	"anz",
  	"aol",
  	"apartments",
  	"app",
  	"apple",
  	"aquarelle",
  	"arab",
  	"aramco",
  	"archi",
  	"army",
  	"art",
  	"arte",
  	"asda",
  	"associates",
  	"athleta",
  	"attorney",
  	"auction",
  	"audi",
  	"audible",
  	"audio",
  	"auspost",
  	"author",
  	"auto",
  	"autos",
  	"avianca",
  	"aws",
  	"axa",
  	"azure",
  	"baby",
  	"baidu",
  	"banamex",
  	"bananarepublic",
  	"band",
  	"bank",
  	"bar",
  	"barcelona",
  	"barclaycard",
  	"barclays",
  	"barefoot",
  	"bargains",
  	"baseball",
  	"basketball",
  	"bauhaus",
  	"bayern",
  	"bbc",
  	"bbt",
  	"bbva",
  	"bcg",
  	"bcn",
  	"beats",
  	"beauty",
  	"beer",
  	"bentley",
  	"berlin",
  	"best",
  	"bestbuy",
  	"bet",
  	"bharti",
  	"bible",
  	"bid",
  	"bike",
  	"bing",
  	"bingo",
  	"bio",
  	"black",
  	"blackfriday",
  	"blockbuster",
  	"blog",
  	"bloomberg",
  	"blue",
  	"bms",
  	"bmw",
  	"bnpparibas",
  	"boats",
  	"boehringer",
  	"bofa",
  	"bom",
  	"bond",
  	"boo",
  	"book",
  	"booking",
  	"bosch",
  	"bostik",
  	"boston",
  	"bot",
  	"boutique",
  	"box",
  	"bradesco",
  	"bridgestone",
  	"broadway",
  	"broker",
  	"brother",
  	"brussels",
  	"bugatti",
  	"build",
  	"builders",
  	"business",
  	"buy",
  	"buzz",
  	"bzh",
  	"cab",
  	"cafe",
  	"cal",
  	"call",
  	"calvinklein",
  	"cam",
  	"camera",
  	"camp",
  	"cancerresearch",
  	"canon",
  	"capetown",
  	"capital",
  	"capitalone",
  	"car",
  	"caravan",
  	"cards",
  	"care",
  	"career",
  	"careers",
  	"cars",
  	"casa",
  	"case",
  	"cash",
  	"casino",
  	"catering",
  	"catholic",
  	"cba",
  	"cbn",
  	"cbre",
  	"cbs",
  	"center",
  	"ceo",
  	"cern",
  	"cfa",
  	"cfd",
  	"chanel",
  	"channel",
  	"charity",
  	"chase",
  	"chat",
  	"cheap",
  	"chintai",
  	"christmas",
  	"chrome",
  	"church",
  	"cipriani",
  	"circle",
  	"cisco",
  	"citadel",
  	"citi",
  	"citic",
  	"city",
  	"cityeats",
  	"claims",
  	"cleaning",
  	"click",
  	"clinic",
  	"clinique",
  	"clothing",
  	"cloud",
  	"club",
  	"clubmed",
  	"coach",
  	"codes",
  	"coffee",
  	"college",
  	"cologne",
  	"comcast",
  	"commbank",
  	"community",
  	"company",
  	"compare",
  	"computer",
  	"comsec",
  	"condos",
  	"construction",
  	"consulting",
  	"contact",
  	"contractors",
  	"cooking",
  	"cookingchannel",
  	"cool",
  	"corsica",
  	"country",
  	"coupon",
  	"coupons",
  	"courses",
  	"cpa",
  	"credit",
  	"creditcard",
  	"creditunion",
  	"cricket",
  	"crown",
  	"crs",
  	"cruise",
  	"cruises",
  	"cuisinella",
  	"cymru",
  	"cyou",
  	"dabur",
  	"dad",
  	"dance",
  	"data",
  	"date",
  	"dating",
  	"datsun",
  	"day",
  	"dclk",
  	"dds",
  	"deal",
  	"dealer",
  	"deals",
  	"degree",
  	"delivery",
  	"dell",
  	"deloitte",
  	"delta",
  	"democrat",
  	"dental",
  	"dentist",
  	"desi",
  	"design",
  	"dev",
  	"dhl",
  	"diamonds",
  	"diet",
  	"digital",
  	"direct",
  	"directory",
  	"discount",
  	"discover",
  	"dish",
  	"diy",
  	"dnp",
  	"docs",
  	"doctor",
  	"dog",
  	"domains",
  	"dot",
  	"download",
  	"drive",
  	"dtv",
  	"dubai",
  	"dunlop",
  	"dupont",
  	"durban",
  	"dvag",
  	"dvr",
  	"earth",
  	"eat",
  	"eco",
  	"edeka",
  	"education",
  	"email",
  	"emerck",
  	"energy",
  	"engineer",
  	"engineering",
  	"enterprises",
  	"epson",
  	"equipment",
  	"ericsson",
  	"erni",
  	"esq",
  	"estate",
  	"etisalat",
  	"eurovision",
  	"eus",
  	"events",
  	"exchange",
  	"expert",
  	"exposed",
  	"express",
  	"extraspace",
  	"fage",
  	"fail",
  	"fairwinds",
  	"faith",
  	"family",
  	"fan",
  	"fans",
  	"farm",
  	"farmers",
  	"fashion",
  	"fast",
  	"fedex",
  	"feedback",
  	"ferrari",
  	"ferrero",
  	"fiat",
  	"fidelity",
  	"fido",
  	"film",
  	"final",
  	"finance",
  	"financial",
  	"fire",
  	"firestone",
  	"firmdale",
  	"fish",
  	"fishing",
  	"fit",
  	"fitness",
  	"flickr",
  	"flights",
  	"flir",
  	"florist",
  	"flowers",
  	"fly",
  	"foo",
  	"food",
  	"foodnetwork",
  	"football",
  	"ford",
  	"forex",
  	"forsale",
  	"forum",
  	"foundation",
  	"fox",
  	"free",
  	"fresenius",
  	"frl",
  	"frogans",
  	"frontdoor",
  	"frontier",
  	"ftr",
  	"fujitsu",
  	"fun",
  	"fund",
  	"furniture",
  	"futbol",
  	"fyi",
  	"gal",
  	"gallery",
  	"gallo",
  	"gallup",
  	"game",
  	"games",
  	"gap",
  	"garden",
  	"gay",
  	"gbiz",
  	"gdn",
  	"gea",
  	"gent",
  	"genting",
  	"george",
  	"ggee",
  	"gift",
  	"gifts",
  	"gives",
  	"giving",
  	"glass",
  	"gle",
  	"global",
  	"globo",
  	"gmail",
  	"gmbh",
  	"gmo",
  	"gmx",
  	"godaddy",
  	"gold",
  	"goldpoint",
  	"golf",
  	"goo",
  	"goodyear",
  	"goog",
  	"google",
  	"gop",
  	"got",
  	"grainger",
  	"graphics",
  	"gratis",
  	"green",
  	"gripe",
  	"grocery",
  	"group",
  	"guardian",
  	"gucci",
  	"guge",
  	"guide",
  	"guitars",
  	"guru",
  	"hair",
  	"hamburg",
  	"hangout",
  	"haus",
  	"hbo",
  	"hdfc",
  	"hdfcbank",
  	"health",
  	"healthcare",
  	"help",
  	"helsinki",
  	"here",
  	"hermes",
  	"hgtv",
  	"hiphop",
  	"hisamitsu",
  	"hitachi",
  	"hiv",
  	"hkt",
  	"hockey",
  	"holdings",
  	"holiday",
  	"homedepot",
  	"homegoods",
  	"homes",
  	"homesense",
  	"honda",
  	"horse",
  	"hospital",
  	"host",
  	"hosting",
  	"hot",
  	"hoteles",
  	"hotels",
  	"hotmail",
  	"house",
  	"how",
  	"hsbc",
  	"hughes",
  	"hyatt",
  	"hyundai",
  	"ibm",
  	"icbc",
  	"ice",
  	"icu",
  	"ieee",
  	"ifm",
  	"ikano",
  	"imamat",
  	"imdb",
  	"immo",
  	"immobilien",
  	"inc",
  	"industries",
  	"infiniti",
  	"ing",
  	"ink",
  	"institute",
  	"insurance",
  	"insure",
  	"international",
  	"intuit",
  	"investments",
  	"ipiranga",
  	"irish",
  	"ismaili",
  	"ist",
  	"istanbul",
  	"itau",
  	"itv",
  	"jaguar",
  	"java",
  	"jcb",
  	"jeep",
  	"jetzt",
  	"jewelry",
  	"jio",
  	"jll",
  	"jmp",
  	"jnj",
  	"joburg",
  	"jot",
  	"joy",
  	"jpmorgan",
  	"jprs",
  	"juegos",
  	"juniper",
  	"kaufen",
  	"kddi",
  	"kerryhotels",
  	"kerrylogistics",
  	"kerryproperties",
  	"kfh",
  	"kia",
  	"kids",
  	"kim",
  	"kinder",
  	"kindle",
  	"kitchen",
  	"kiwi",
  	"koeln",
  	"komatsu",
  	"kosher",
  	"kpmg",
  	"kpn",
  	"krd",
  	"kred",
  	"kuokgroup",
  	"kyoto",
  	"lacaixa",
  	"lamborghini",
  	"lamer",
  	"lancaster",
  	"lancia",
  	"land",
  	"landrover",
  	"lanxess",
  	"lasalle",
  	"lat",
  	"latino",
  	"latrobe",
  	"law",
  	"lawyer",
  	"lds",
  	"lease",
  	"leclerc",
  	"lefrak",
  	"legal",
  	"lego",
  	"lexus",
  	"lgbt",
  	"lidl",
  	"life",
  	"lifeinsurance",
  	"lifestyle",
  	"lighting",
  	"like",
  	"lilly",
  	"limited",
  	"limo",
  	"lincoln",
  	"linde",
  	"link",
  	"lipsy",
  	"live",
  	"living",
  	"llc",
  	"llp",
  	"loan",
  	"loans",
  	"locker",
  	"locus",
  	"loft",
  	"lol",
  	"london",
  	"lotte",
  	"lotto",
  	"love",
  	"lpl",
  	"lplfinancial",
  	"ltd",
  	"ltda",
  	"lundbeck",
  	"luxe",
  	"luxury",
  	"macys",
  	"madrid",
  	"maif",
  	"maison",
  	"makeup",
  	"man",
  	"management",
  	"mango",
  	"map",
  	"market",
  	"marketing",
  	"markets",
  	"marriott",
  	"marshalls",
  	"maserati",
  	"mattel",
  	"mba",
  	"mckinsey",
  	"med",
  	"media",
  	"meet",
  	"melbourne",
  	"meme",
  	"memorial",
  	"men",
  	"menu",
  	"merckmsd",
  	"miami",
  	"microsoft",
  	"mini",
  	"mint",
  	"mit",
  	"mitsubishi",
  	"mlb",
  	"mls",
  	"mma",
  	"mobile",
  	"moda",
  	"moe",
  	"moi",
  	"mom",
  	"monash",
  	"money",
  	"monster",
  	"mormon",
  	"mortgage",
  	"moscow",
  	"moto",
  	"motorcycles",
  	"mov",
  	"movie",
  	"msd",
  	"mtn",
  	"mtr",
  	"music",
  	"mutual",
  	"nab",
  	"nagoya",
  	"natura",
  	"navy",
  	"nba",
  	"nec",
  	"netbank",
  	"netflix",
  	"network",
  	"neustar",
  	"new",
  	"news",
  	"next",
  	"nextdirect",
  	"nexus",
  	"nfl",
  	"ngo",
  	"nhk",
  	"nico",
  	"nike",
  	"nikon",
  	"ninja",
  	"nissan",
  	"nissay",
  	"nokia",
  	"northwesternmutual",
  	"norton",
  	"now",
  	"nowruz",
  	"nowtv",
  	"nra",
  	"nrw",
  	"ntt",
  	"nyc",
  	"obi",
  	"observer",
  	"office",
  	"okinawa",
  	"olayan",
  	"olayangroup",
  	"oldnavy",
  	"ollo",
  	"omega",
  	"one",
  	"ong",
  	"onl",
  	"online",
  	"ooo",
  	"open",
  	"oracle",
  	"orange",
  	"organic",
  	"origins",
  	"osaka",
  	"otsuka",
  	"ott",
  	"ovh",
  	"page",
  	"panasonic",
  	"paris",
  	"pars",
  	"partners",
  	"parts",
  	"party",
  	"passagens",
  	"pay",
  	"pccw",
  	"pet",
  	"pfizer",
  	"pharmacy",
  	"phd",
  	"philips",
  	"phone",
  	"photo",
  	"photography",
  	"photos",
  	"physio",
  	"pics",
  	"pictet",
  	"pictures",
  	"pid",
  	"pin",
  	"ping",
  	"pink",
  	"pioneer",
  	"pizza",
  	"place",
  	"play",
  	"playstation",
  	"plumbing",
  	"plus",
  	"pnc",
  	"pohl",
  	"poker",
  	"politie",
  	"porn",
  	"pramerica",
  	"praxi",
  	"press",
  	"prime",
  	"prod",
  	"productions",
  	"prof",
  	"progressive",
  	"promo",
  	"properties",
  	"property",
  	"protection",
  	"pru",
  	"prudential",
  	"pub",
  	"pwc",
  	"qpon",
  	"quebec",
  	"quest",
  	"racing",
  	"radio",
  	"read",
  	"realestate",
  	"realtor",
  	"realty",
  	"recipes",
  	"red",
  	"redstone",
  	"redumbrella",
  	"rehab",
  	"reise",
  	"reisen",
  	"reit",
  	"reliance",
  	"ren",
  	"rent",
  	"rentals",
  	"repair",
  	"report",
  	"republican",
  	"rest",
  	"restaurant",
  	"review",
  	"reviews",
  	"rexroth",
  	"rich",
  	"richardli",
  	"ricoh",
  	"ril",
  	"rio",
  	"rip",
  	"rocher",
  	"rocks",
  	"rodeo",
  	"rogers",
  	"room",
  	"rsvp",
  	"rugby",
  	"ruhr",
  	"run",
  	"rwe",
  	"ryukyu",
  	"saarland",
  	"safe",
  	"safety",
  	"sakura",
  	"sale",
  	"salon",
  	"samsclub",
  	"samsung",
  	"sandvik",
  	"sandvikcoromant",
  	"sanofi",
  	"sap",
  	"sarl",
  	"sas",
  	"save",
  	"saxo",
  	"sbi",
  	"sbs",
  	"sca",
  	"scb",
  	"schaeffler",
  	"schmidt",
  	"scholarships",
  	"school",
  	"schule",
  	"schwarz",
  	"science",
  	"scot",
  	"search",
  	"seat",
  	"secure",
  	"security",
  	"seek",
  	"select",
  	"sener",
  	"services",
  	"ses",
  	"seven",
  	"sew",
  	"sex",
  	"sexy",
  	"sfr",
  	"shangrila",
  	"sharp",
  	"shaw",
  	"shell",
  	"shia",
  	"shiksha",
  	"shoes",
  	"shop",
  	"shopping",
  	"shouji",
  	"show",
  	"showtime",
  	"silk",
  	"sina",
  	"singles",
  	"site",
  	"ski",
  	"skin",
  	"sky",
  	"skype",
  	"sling",
  	"smart",
  	"smile",
  	"sncf",
  	"soccer",
  	"social",
  	"softbank",
  	"software",
  	"sohu",
  	"solar",
  	"solutions",
  	"song",
  	"sony",
  	"soy",
  	"spa",
  	"space",
  	"sport",
  	"spot",
  	"srl",
  	"stada",
  	"staples",
  	"star",
  	"statebank",
  	"statefarm",
  	"stc",
  	"stcgroup",
  	"stockholm",
  	"storage",
  	"store",
  	"stream",
  	"studio",
  	"study",
  	"style",
  	"sucks",
  	"supplies",
  	"supply",
  	"support",
  	"surf",
  	"surgery",
  	"suzuki",
  	"swatch",
  	"swiss",
  	"sydney",
  	"systems",
  	"tab",
  	"taipei",
  	"talk",
  	"taobao",
  	"target",
  	"tatamotors",
  	"tatar",
  	"tattoo",
  	"tax",
  	"taxi",
  	"tci",
  	"tdk",
  	"team",
  	"tech",
  	"technology",
  	"temasek",
  	"tennis",
  	"teva",
  	"thd",
  	"theater",
  	"theatre",
  	"tiaa",
  	"tickets",
  	"tienda",
  	"tiffany",
  	"tips",
  	"tires",
  	"tirol",
  	"tjmaxx",
  	"tjx",
  	"tkmaxx",
  	"tmall",
  	"today",
  	"tokyo",
  	"tools",
  	"top",
  	"toray",
  	"toshiba",
  	"total",
  	"tours",
  	"town",
  	"toyota",
  	"toys",
  	"trade",
  	"trading",
  	"training",
  	"travel",
  	"travelchannel",
  	"travelers",
  	"travelersinsurance",
  	"trust",
  	"trv",
  	"tube",
  	"tui",
  	"tunes",
  	"tushu",
  	"tvs",
  	"ubank",
  	"ubs",
  	"unicom",
  	"university",
  	"uno",
  	"uol",
  	"ups",
  	"vacations",
  	"vana",
  	"vanguard",
  	"vegas",
  	"ventures",
  	"verisign",
  	"versicherung",
  	"vet",
  	"viajes",
  	"video",
  	"vig",
  	"viking",
  	"villas",
  	"vin",
  	"vip",
  	"virgin",
  	"visa",
  	"vision",
  	"viva",
  	"vivo",
  	"vlaanderen",
  	"vodka",
  	"volkswagen",
  	"volvo",
  	"vote",
  	"voting",
  	"voto",
  	"voyage",
  	"vuelos",
  	"wales",
  	"walmart",
  	"walter",
  	"wang",
  	"wanggou",
  	"watch",
  	"watches",
  	"weather",
  	"weatherchannel",
  	"webcam",
  	"weber",
  	"website",
  	"wedding",
  	"weibo",
  	"weir",
  	"whoswho",
  	"wien",
  	"wiki",
  	"williamhill",
  	"win",
  	"windows",
  	"wine",
  	"winners",
  	"wme",
  	"wolterskluwer",
  	"woodside",
  	"work",
  	"works",
  	"world",
  	"wow",
  	"wtc",
  	"wtf",
  	"xbox",
  	"xerox",
  	"xfinity",
  	"xihuan",
  	"xin",
  	"कॉम",
  	"セール",
  	"佛山",
  	"慈善",
  	"集团",
  	"在线",
  	"点看",
  	"คอม",
  	"八卦",
  	"موقع",
  	"公益",
  	"公司",
  	"香格里拉",
  	"网站",
  	"移动",
  	"我爱你",
  	"москва",
  	"католик",
  	"онлайн",
  	"сайт",
  	"联通",
  	"קום",
  	"时尚",
  	"微博",
  	"淡马锡",
  	"ファッション",
  	"орг",
  	"नेट",
  	"ストア",
  	"アマゾン",
  	"삼성",
  	"商标",
  	"商店",
  	"商城",
  	"дети",
  	"ポイント",
  	"新闻",
  	"家電",
  	"كوم",
  	"中文网",
  	"中信",
  	"娱乐",
  	"谷歌",
  	"電訊盈科",
  	"购物",
  	"クラウド",
  	"通販",
  	"网店",
  	"संगठन",
  	"餐厅",
  	"网络",
  	"ком",
  	"亚马逊",
  	"诺基亚",
  	"食品",
  	"飞利浦",
  	"手机",
  	"ارامكو",
  	"العليان",
  	"اتصالات",
  	"بازار",
  	"ابوظبي",
  	"كاثوليك",
  	"همراه",
  	"닷컴",
  	"政府",
  	"شبكة",
  	"بيتك",
  	"عرب",
  	"机构",
  	"组织机构",
  	"健康",
  	"招聘",
  	"рус",
  	"大拿",
  	"みんな",
  	"グーグル",
  	"世界",
  	"書籍",
  	"网址",
  	"닷넷",
  	"コム",
  	"天主教",
  	"游戏",
  	"vermögensberater",
  	"vermögensberatung",
  	"企业",
  	"信息",
  	"嘉里大酒店",
  	"嘉里",
  	"广东",
  	"政务",
  	"xyz",
  	"yachts",
  	"yahoo",
  	"yamaxun",
  	"yandex",
  	"yodobashi",
  	"yoga",
  	"yokohama",
  	"you",
  	"youtube",
  	"yun",
  	"zappos",
  	"zara",
  	"zero",
  	"zip",
  	"zone",
  	"zuerich",
  	"cc.ua",
  	"inf.ua",
  	"ltd.ua",
  	"611.to",
  	"graphox.us",
  	"*.devcdnaccesso.com",
  	"adobeaemcloud.com",
  	"*.dev.adobeaemcloud.com",
  	"hlx.live",
  	"adobeaemcloud.net",
  	"hlx.page",
  	"hlx3.page",
  	"beep.pl",
  	"airkitapps.com",
  	"airkitapps-au.com",
  	"airkitapps.eu",
  	"aivencloud.com",
  	"barsy.ca",
  	"*.compute.estate",
  	"*.alces.network",
  	"kasserver.com",
  	"altervista.org",
  	"alwaysdata.net",
  	"cloudfront.net",
  	"*.compute.amazonaws.com",
  	"*.compute-1.amazonaws.com",
  	"*.compute.amazonaws.com.cn",
  	"us-east-1.amazonaws.com",
  	"cn-north-1.eb.amazonaws.com.cn",
  	"cn-northwest-1.eb.amazonaws.com.cn",
  	"elasticbeanstalk.com",
  	"ap-northeast-1.elasticbeanstalk.com",
  	"ap-northeast-2.elasticbeanstalk.com",
  	"ap-northeast-3.elasticbeanstalk.com",
  	"ap-south-1.elasticbeanstalk.com",
  	"ap-southeast-1.elasticbeanstalk.com",
  	"ap-southeast-2.elasticbeanstalk.com",
  	"ca-central-1.elasticbeanstalk.com",
  	"eu-central-1.elasticbeanstalk.com",
  	"eu-west-1.elasticbeanstalk.com",
  	"eu-west-2.elasticbeanstalk.com",
  	"eu-west-3.elasticbeanstalk.com",
  	"sa-east-1.elasticbeanstalk.com",
  	"us-east-1.elasticbeanstalk.com",
  	"us-east-2.elasticbeanstalk.com",
  	"us-gov-west-1.elasticbeanstalk.com",
  	"us-west-1.elasticbeanstalk.com",
  	"us-west-2.elasticbeanstalk.com",
  	"*.elb.amazonaws.com",
  	"*.elb.amazonaws.com.cn",
  	"awsglobalaccelerator.com",
  	"s3.amazonaws.com",
  	"s3-ap-northeast-1.amazonaws.com",
  	"s3-ap-northeast-2.amazonaws.com",
  	"s3-ap-south-1.amazonaws.com",
  	"s3-ap-southeast-1.amazonaws.com",
  	"s3-ap-southeast-2.amazonaws.com",
  	"s3-ca-central-1.amazonaws.com",
  	"s3-eu-central-1.amazonaws.com",
  	"s3-eu-west-1.amazonaws.com",
  	"s3-eu-west-2.amazonaws.com",
  	"s3-eu-west-3.amazonaws.com",
  	"s3-external-1.amazonaws.com",
  	"s3-fips-us-gov-west-1.amazonaws.com",
  	"s3-sa-east-1.amazonaws.com",
  	"s3-us-gov-west-1.amazonaws.com",
  	"s3-us-east-2.amazonaws.com",
  	"s3-us-west-1.amazonaws.com",
  	"s3-us-west-2.amazonaws.com",
  	"s3.ap-northeast-2.amazonaws.com",
  	"s3.ap-south-1.amazonaws.com",
  	"s3.cn-north-1.amazonaws.com.cn",
  	"s3.ca-central-1.amazonaws.com",
  	"s3.eu-central-1.amazonaws.com",
  	"s3.eu-west-2.amazonaws.com",
  	"s3.eu-west-3.amazonaws.com",
  	"s3.us-east-2.amazonaws.com",
  	"s3.dualstack.ap-northeast-1.amazonaws.com",
  	"s3.dualstack.ap-northeast-2.amazonaws.com",
  	"s3.dualstack.ap-south-1.amazonaws.com",
  	"s3.dualstack.ap-southeast-1.amazonaws.com",
  	"s3.dualstack.ap-southeast-2.amazonaws.com",
  	"s3.dualstack.ca-central-1.amazonaws.com",
  	"s3.dualstack.eu-central-1.amazonaws.com",
  	"s3.dualstack.eu-west-1.amazonaws.com",
  	"s3.dualstack.eu-west-2.amazonaws.com",
  	"s3.dualstack.eu-west-3.amazonaws.com",
  	"s3.dualstack.sa-east-1.amazonaws.com",
  	"s3.dualstack.us-east-1.amazonaws.com",
  	"s3.dualstack.us-east-2.amazonaws.com",
  	"s3-website-us-east-1.amazonaws.com",
  	"s3-website-us-west-1.amazonaws.com",
  	"s3-website-us-west-2.amazonaws.com",
  	"s3-website-ap-northeast-1.amazonaws.com",
  	"s3-website-ap-southeast-1.amazonaws.com",
  	"s3-website-ap-southeast-2.amazonaws.com",
  	"s3-website-eu-west-1.amazonaws.com",
  	"s3-website-sa-east-1.amazonaws.com",
  	"s3-website.ap-northeast-2.amazonaws.com",
  	"s3-website.ap-south-1.amazonaws.com",
  	"s3-website.ca-central-1.amazonaws.com",
  	"s3-website.eu-central-1.amazonaws.com",
  	"s3-website.eu-west-2.amazonaws.com",
  	"s3-website.eu-west-3.amazonaws.com",
  	"s3-website.us-east-2.amazonaws.com",
  	"t3l3p0rt.net",
  	"tele.amune.org",
  	"apigee.io",
  	"siiites.com",
  	"appspacehosted.com",
  	"appspaceusercontent.com",
  	"appudo.net",
  	"on-aptible.com",
  	"user.aseinet.ne.jp",
  	"gv.vc",
  	"d.gv.vc",
  	"user.party.eus",
  	"pimienta.org",
  	"poivron.org",
  	"potager.org",
  	"sweetpepper.org",
  	"myasustor.com",
  	"cdn.prod.atlassian-dev.net",
  	"translated.page",
  	"myfritz.net",
  	"onavstack.net",
  	"*.awdev.ca",
  	"*.advisor.ws",
  	"ecommerce-shop.pl",
  	"b-data.io",
  	"backplaneapp.io",
  	"balena-devices.com",
  	"rs.ba",
  	"*.banzai.cloud",
  	"app.banzaicloud.io",
  	"*.backyards.banzaicloud.io",
  	"base.ec",
  	"official.ec",
  	"buyshop.jp",
  	"fashionstore.jp",
  	"handcrafted.jp",
  	"kawaiishop.jp",
  	"supersale.jp",
  	"theshop.jp",
  	"shopselect.net",
  	"base.shop",
  	"*.beget.app",
  	"betainabox.com",
  	"bnr.la",
  	"bitbucket.io",
  	"blackbaudcdn.net",
  	"of.je",
  	"bluebite.io",
  	"boomla.net",
  	"boutir.com",
  	"boxfuse.io",
  	"square7.ch",
  	"bplaced.com",
  	"bplaced.de",
  	"square7.de",
  	"bplaced.net",
  	"square7.net",
  	"shop.brendly.rs",
  	"browsersafetymark.io",
  	"uk0.bigv.io",
  	"dh.bytemark.co.uk",
  	"vm.bytemark.co.uk",
  	"cafjs.com",
  	"mycd.eu",
  	"drr.ac",
  	"uwu.ai",
  	"carrd.co",
  	"crd.co",
  	"ju.mp",
  	"ae.org",
  	"br.com",
  	"cn.com",
  	"com.de",
  	"com.se",
  	"de.com",
  	"eu.com",
  	"gb.net",
  	"hu.net",
  	"jp.net",
  	"jpn.com",
  	"mex.com",
  	"ru.com",
  	"sa.com",
  	"se.net",
  	"uk.com",
  	"uk.net",
  	"us.com",
  	"za.bz",
  	"za.com",
  	"ar.com",
  	"hu.com",
  	"kr.com",
  	"no.com",
  	"qc.com",
  	"uy.com",
  	"africa.com",
  	"gr.com",
  	"in.net",
  	"web.in",
  	"us.org",
  	"co.com",
  	"aus.basketball",
  	"nz.basketball",
  	"radio.am",
  	"radio.fm",
  	"c.la",
  	"certmgr.org",
  	"cx.ua",
  	"discourse.group",
  	"discourse.team",
  	"cleverapps.io",
  	"clerk.app",
  	"clerkstage.app",
  	"*.lcl.dev",
  	"*.lclstage.dev",
  	"*.stg.dev",
  	"*.stgstage.dev",
  	"clickrising.net",
  	"c66.me",
  	"cloud66.ws",
  	"cloud66.zone",
  	"jdevcloud.com",
  	"wpdevcloud.com",
  	"cloudaccess.host",
  	"freesite.host",
  	"cloudaccess.net",
  	"cloudcontrolled.com",
  	"cloudcontrolapp.com",
  	"*.cloudera.site",
  	"pages.dev",
  	"trycloudflare.com",
  	"workers.dev",
  	"wnext.app",
  	"co.ca",
  	"*.otap.co",
  	"co.cz",
  	"c.cdn77.org",
  	"cdn77-ssl.net",
  	"r.cdn77.net",
  	"rsc.cdn77.org",
  	"ssl.origin.cdn77-secure.org",
  	"cloudns.asia",
  	"cloudns.biz",
  	"cloudns.club",
  	"cloudns.cc",
  	"cloudns.eu",
  	"cloudns.in",
  	"cloudns.info",
  	"cloudns.org",
  	"cloudns.pro",
  	"cloudns.pw",
  	"cloudns.us",
  	"cnpy.gdn",
  	"codeberg.page",
  	"co.nl",
  	"co.no",
  	"webhosting.be",
  	"hosting-cluster.nl",
  	"ac.ru",
  	"edu.ru",
  	"gov.ru",
  	"int.ru",
  	"mil.ru",
  	"test.ru",
  	"dyn.cosidns.de",
  	"dynamisches-dns.de",
  	"dnsupdater.de",
  	"internet-dns.de",
  	"l-o-g-i-n.de",
  	"dynamic-dns.info",
  	"feste-ip.net",
  	"knx-server.net",
  	"static-access.net",
  	"realm.cz",
  	"*.cryptonomic.net",
  	"cupcake.is",
  	"curv.dev",
  	"*.customer-oci.com",
  	"*.oci.customer-oci.com",
  	"*.ocp.customer-oci.com",
  	"*.ocs.customer-oci.com",
  	"cyon.link",
  	"cyon.site",
  	"fnwk.site",
  	"folionetwork.site",
  	"platform0.app",
  	"daplie.me",
  	"localhost.daplie.me",
  	"dattolocal.com",
  	"dattorelay.com",
  	"dattoweb.com",
  	"mydatto.com",
  	"dattolocal.net",
  	"mydatto.net",
  	"biz.dk",
  	"co.dk",
  	"firm.dk",
  	"reg.dk",
  	"store.dk",
  	"dyndns.dappnode.io",
  	"*.dapps.earth",
  	"*.bzz.dapps.earth",
  	"builtwithdark.com",
  	"demo.datadetect.com",
  	"instance.datadetect.com",
  	"edgestack.me",
  	"ddns5.com",
  	"debian.net",
  	"deno.dev",
  	"deno-staging.dev",
  	"dedyn.io",
  	"deta.app",
  	"deta.dev",
  	"*.rss.my.id",
  	"*.diher.solutions",
  	"discordsays.com",
  	"discordsez.com",
  	"jozi.biz",
  	"dnshome.de",
  	"online.th",
  	"shop.th",
  	"drayddns.com",
  	"shoparena.pl",
  	"dreamhosters.com",
  	"mydrobo.com",
  	"drud.io",
  	"drud.us",
  	"duckdns.org",
  	"bip.sh",
  	"bitbridge.net",
  	"dy.fi",
  	"tunk.org",
  	"dyndns-at-home.com",
  	"dyndns-at-work.com",
  	"dyndns-blog.com",
  	"dyndns-free.com",
  	"dyndns-home.com",
  	"dyndns-ip.com",
  	"dyndns-mail.com",
  	"dyndns-office.com",
  	"dyndns-pics.com",
  	"dyndns-remote.com",
  	"dyndns-server.com",
  	"dyndns-web.com",
  	"dyndns-wiki.com",
  	"dyndns-work.com",
  	"dyndns.biz",
  	"dyndns.info",
  	"dyndns.org",
  	"dyndns.tv",
  	"at-band-camp.net",
  	"ath.cx",
  	"barrel-of-knowledge.info",
  	"barrell-of-knowledge.info",
  	"better-than.tv",
  	"blogdns.com",
  	"blogdns.net",
  	"blogdns.org",
  	"blogsite.org",
  	"boldlygoingnowhere.org",
  	"broke-it.net",
  	"buyshouses.net",
  	"cechire.com",
  	"dnsalias.com",
  	"dnsalias.net",
  	"dnsalias.org",
  	"dnsdojo.com",
  	"dnsdojo.net",
  	"dnsdojo.org",
  	"does-it.net",
  	"doesntexist.com",
  	"doesntexist.org",
  	"dontexist.com",
  	"dontexist.net",
  	"dontexist.org",
  	"doomdns.com",
  	"doomdns.org",
  	"dvrdns.org",
  	"dyn-o-saur.com",
  	"dynalias.com",
  	"dynalias.net",
  	"dynalias.org",
  	"dynathome.net",
  	"dyndns.ws",
  	"endofinternet.net",
  	"endofinternet.org",
  	"endoftheinternet.org",
  	"est-a-la-maison.com",
  	"est-a-la-masion.com",
  	"est-le-patron.com",
  	"est-mon-blogueur.com",
  	"for-better.biz",
  	"for-more.biz",
  	"for-our.info",
  	"for-some.biz",
  	"for-the.biz",
  	"forgot.her.name",
  	"forgot.his.name",
  	"from-ak.com",
  	"from-al.com",
  	"from-ar.com",
  	"from-az.net",
  	"from-ca.com",
  	"from-co.net",
  	"from-ct.com",
  	"from-dc.com",
  	"from-de.com",
  	"from-fl.com",
  	"from-ga.com",
  	"from-hi.com",
  	"from-ia.com",
  	"from-id.com",
  	"from-il.com",
  	"from-in.com",
  	"from-ks.com",
  	"from-ky.com",
  	"from-la.net",
  	"from-ma.com",
  	"from-md.com",
  	"from-me.org",
  	"from-mi.com",
  	"from-mn.com",
  	"from-mo.com",
  	"from-ms.com",
  	"from-mt.com",
  	"from-nc.com",
  	"from-nd.com",
  	"from-ne.com",
  	"from-nh.com",
  	"from-nj.com",
  	"from-nm.com",
  	"from-nv.com",
  	"from-ny.net",
  	"from-oh.com",
  	"from-ok.com",
  	"from-or.com",
  	"from-pa.com",
  	"from-pr.com",
  	"from-ri.com",
  	"from-sc.com",
  	"from-sd.com",
  	"from-tn.com",
  	"from-tx.com",
  	"from-ut.com",
  	"from-va.com",
  	"from-vt.com",
  	"from-wa.com",
  	"from-wi.com",
  	"from-wv.com",
  	"from-wy.com",
  	"ftpaccess.cc",
  	"fuettertdasnetz.de",
  	"game-host.org",
  	"game-server.cc",
  	"getmyip.com",
  	"gets-it.net",
  	"go.dyndns.org",
  	"gotdns.com",
  	"gotdns.org",
  	"groks-the.info",
  	"groks-this.info",
  	"ham-radio-op.net",
  	"here-for-more.info",
  	"hobby-site.com",
  	"hobby-site.org",
  	"home.dyndns.org",
  	"homedns.org",
  	"homeftp.net",
  	"homeftp.org",
  	"homeip.net",
  	"homelinux.com",
  	"homelinux.net",
  	"homelinux.org",
  	"homeunix.com",
  	"homeunix.net",
  	"homeunix.org",
  	"iamallama.com",
  	"in-the-band.net",
  	"is-a-anarchist.com",
  	"is-a-blogger.com",
  	"is-a-bookkeeper.com",
  	"is-a-bruinsfan.org",
  	"is-a-bulls-fan.com",
  	"is-a-candidate.org",
  	"is-a-caterer.com",
  	"is-a-celticsfan.org",
  	"is-a-chef.com",
  	"is-a-chef.net",
  	"is-a-chef.org",
  	"is-a-conservative.com",
  	"is-a-cpa.com",
  	"is-a-cubicle-slave.com",
  	"is-a-democrat.com",
  	"is-a-designer.com",
  	"is-a-doctor.com",
  	"is-a-financialadvisor.com",
  	"is-a-geek.com",
  	"is-a-geek.net",
  	"is-a-geek.org",
  	"is-a-green.com",
  	"is-a-guru.com",
  	"is-a-hard-worker.com",
  	"is-a-hunter.com",
  	"is-a-knight.org",
  	"is-a-landscaper.com",
  	"is-a-lawyer.com",
  	"is-a-liberal.com",
  	"is-a-libertarian.com",
  	"is-a-linux-user.org",
  	"is-a-llama.com",
  	"is-a-musician.com",
  	"is-a-nascarfan.com",
  	"is-a-nurse.com",
  	"is-a-painter.com",
  	"is-a-patsfan.org",
  	"is-a-personaltrainer.com",
  	"is-a-photographer.com",
  	"is-a-player.com",
  	"is-a-republican.com",
  	"is-a-rockstar.com",
  	"is-a-socialist.com",
  	"is-a-soxfan.org",
  	"is-a-student.com",
  	"is-a-teacher.com",
  	"is-a-techie.com",
  	"is-a-therapist.com",
  	"is-an-accountant.com",
  	"is-an-actor.com",
  	"is-an-actress.com",
  	"is-an-anarchist.com",
  	"is-an-artist.com",
  	"is-an-engineer.com",
  	"is-an-entertainer.com",
  	"is-by.us",
  	"is-certified.com",
  	"is-found.org",
  	"is-gone.com",
  	"is-into-anime.com",
  	"is-into-cars.com",
  	"is-into-cartoons.com",
  	"is-into-games.com",
  	"is-leet.com",
  	"is-lost.org",
  	"is-not-certified.com",
  	"is-saved.org",
  	"is-slick.com",
  	"is-uberleet.com",
  	"is-very-bad.org",
  	"is-very-evil.org",
  	"is-very-good.org",
  	"is-very-nice.org",
  	"is-very-sweet.org",
  	"is-with-theband.com",
  	"isa-geek.com",
  	"isa-geek.net",
  	"isa-geek.org",
  	"isa-hockeynut.com",
  	"issmarterthanyou.com",
  	"isteingeek.de",
  	"istmein.de",
  	"kicks-ass.net",
  	"kicks-ass.org",
  	"knowsitall.info",
  	"land-4-sale.us",
  	"lebtimnetz.de",
  	"leitungsen.de",
  	"likes-pie.com",
  	"likescandy.com",
  	"merseine.nu",
  	"mine.nu",
  	"misconfused.org",
  	"mypets.ws",
  	"myphotos.cc",
  	"neat-url.com",
  	"office-on-the.net",
  	"on-the-web.tv",
  	"podzone.net",
  	"podzone.org",
  	"readmyblog.org",
  	"saves-the-whales.com",
  	"scrapper-site.net",
  	"scrapping.cc",
  	"selfip.biz",
  	"selfip.com",
  	"selfip.info",
  	"selfip.net",
  	"selfip.org",
  	"sells-for-less.com",
  	"sells-for-u.com",
  	"sells-it.net",
  	"sellsyourhome.org",
  	"servebbs.com",
  	"servebbs.net",
  	"servebbs.org",
  	"serveftp.net",
  	"serveftp.org",
  	"servegame.org",
  	"shacknet.nu",
  	"simple-url.com",
  	"space-to-rent.com",
  	"stuff-4-sale.org",
  	"stuff-4-sale.us",
  	"teaches-yoga.com",
  	"thruhere.net",
  	"traeumtgerade.de",
  	"webhop.biz",
  	"webhop.info",
  	"webhop.net",
  	"webhop.org",
  	"worse-than.tv",
  	"writesthisblog.com",
  	"ddnss.de",
  	"dyn.ddnss.de",
  	"dyndns.ddnss.de",
  	"dyndns1.de",
  	"dyn-ip24.de",
  	"home-webserver.de",
  	"dyn.home-webserver.de",
  	"myhome-server.de",
  	"ddnss.org",
  	"definima.net",
  	"definima.io",
  	"ondigitalocean.app",
  	"*.digitaloceanspaces.com",
  	"bci.dnstrace.pro",
  	"ddnsfree.com",
  	"ddnsgeek.com",
  	"giize.com",
  	"gleeze.com",
  	"kozow.com",
  	"loseyourip.com",
  	"ooguy.com",
  	"theworkpc.com",
  	"casacam.net",
  	"dynu.net",
  	"accesscam.org",
  	"camdvr.org",
  	"freeddns.org",
  	"mywire.org",
  	"webredirect.org",
  	"myddns.rocks",
  	"blogsite.xyz",
  	"dynv6.net",
  	"e4.cz",
  	"eero.online",
  	"eero-stage.online",
  	"elementor.cloud",
  	"elementor.cool",
  	"en-root.fr",
  	"mytuleap.com",
  	"tuleap-partners.com",
  	"encr.app",
  	"encoreapi.com",
  	"onred.one",
  	"staging.onred.one",
  	"eu.encoway.cloud",
  	"eu.org",
  	"al.eu.org",
  	"asso.eu.org",
  	"at.eu.org",
  	"au.eu.org",
  	"be.eu.org",
  	"bg.eu.org",
  	"ca.eu.org",
  	"cd.eu.org",
  	"ch.eu.org",
  	"cn.eu.org",
  	"cy.eu.org",
  	"cz.eu.org",
  	"de.eu.org",
  	"dk.eu.org",
  	"edu.eu.org",
  	"ee.eu.org",
  	"es.eu.org",
  	"fi.eu.org",
  	"fr.eu.org",
  	"gr.eu.org",
  	"hr.eu.org",
  	"hu.eu.org",
  	"ie.eu.org",
  	"il.eu.org",
  	"in.eu.org",
  	"int.eu.org",
  	"is.eu.org",
  	"it.eu.org",
  	"jp.eu.org",
  	"kr.eu.org",
  	"lt.eu.org",
  	"lu.eu.org",
  	"lv.eu.org",
  	"mc.eu.org",
  	"me.eu.org",
  	"mk.eu.org",
  	"mt.eu.org",
  	"my.eu.org",
  	"net.eu.org",
  	"ng.eu.org",
  	"nl.eu.org",
  	"no.eu.org",
  	"nz.eu.org",
  	"paris.eu.org",
  	"pl.eu.org",
  	"pt.eu.org",
  	"q-a.eu.org",
  	"ro.eu.org",
  	"ru.eu.org",
  	"se.eu.org",
  	"si.eu.org",
  	"sk.eu.org",
  	"tr.eu.org",
  	"uk.eu.org",
  	"us.eu.org",
  	"eurodir.ru",
  	"eu-1.evennode.com",
  	"eu-2.evennode.com",
  	"eu-3.evennode.com",
  	"eu-4.evennode.com",
  	"us-1.evennode.com",
  	"us-2.evennode.com",
  	"us-3.evennode.com",
  	"us-4.evennode.com",
  	"twmail.cc",
  	"twmail.net",
  	"twmail.org",
  	"mymailer.com.tw",
  	"url.tw",
  	"onfabrica.com",
  	"apps.fbsbx.com",
  	"ru.net",
  	"adygeya.ru",
  	"bashkiria.ru",
  	"bir.ru",
  	"cbg.ru",
  	"com.ru",
  	"dagestan.ru",
  	"grozny.ru",
  	"kalmykia.ru",
  	"kustanai.ru",
  	"marine.ru",
  	"mordovia.ru",
  	"msk.ru",
  	"mytis.ru",
  	"nalchik.ru",
  	"nov.ru",
  	"pyatigorsk.ru",
  	"spb.ru",
  	"vladikavkaz.ru",
  	"vladimir.ru",
  	"abkhazia.su",
  	"adygeya.su",
  	"aktyubinsk.su",
  	"arkhangelsk.su",
  	"armenia.su",
  	"ashgabad.su",
  	"azerbaijan.su",
  	"balashov.su",
  	"bashkiria.su",
  	"bryansk.su",
  	"bukhara.su",
  	"chimkent.su",
  	"dagestan.su",
  	"east-kazakhstan.su",
  	"exnet.su",
  	"georgia.su",
  	"grozny.su",
  	"ivanovo.su",
  	"jambyl.su",
  	"kalmykia.su",
  	"kaluga.su",
  	"karacol.su",
  	"karaganda.su",
  	"karelia.su",
  	"khakassia.su",
  	"krasnodar.su",
  	"kurgan.su",
  	"kustanai.su",
  	"lenug.su",
  	"mangyshlak.su",
  	"mordovia.su",
  	"msk.su",
  	"murmansk.su",
  	"nalchik.su",
  	"navoi.su",
  	"north-kazakhstan.su",
  	"nov.su",
  	"obninsk.su",
  	"penza.su",
  	"pokrovsk.su",
  	"sochi.su",
  	"spb.su",
  	"tashkent.su",
  	"termez.su",
  	"togliatti.su",
  	"troitsk.su",
  	"tselinograd.su",
  	"tula.su",
  	"tuva.su",
  	"vladikavkaz.su",
  	"vladimir.su",
  	"vologda.su",
  	"channelsdvr.net",
  	"u.channelsdvr.net",
  	"edgecompute.app",
  	"fastly-terrarium.com",
  	"fastlylb.net",
  	"map.fastlylb.net",
  	"freetls.fastly.net",
  	"map.fastly.net",
  	"a.prod.fastly.net",
  	"global.prod.fastly.net",
  	"a.ssl.fastly.net",
  	"b.ssl.fastly.net",
  	"global.ssl.fastly.net",
  	"fastvps-server.com",
  	"fastvps.host",
  	"myfast.host",
  	"fastvps.site",
  	"myfast.space",
  	"fedorainfracloud.org",
  	"fedorapeople.org",
  	"cloud.fedoraproject.org",
  	"app.os.fedoraproject.org",
  	"app.os.stg.fedoraproject.org",
  	"conn.uk",
  	"copro.uk",
  	"hosp.uk",
  	"mydobiss.com",
  	"fh-muenster.io",
  	"filegear.me",
  	"filegear-au.me",
  	"filegear-de.me",
  	"filegear-gb.me",
  	"filegear-ie.me",
  	"filegear-jp.me",
  	"filegear-sg.me",
  	"firebaseapp.com",
  	"fireweb.app",
  	"flap.id",
  	"onflashdrive.app",
  	"fldrv.com",
  	"fly.dev",
  	"edgeapp.net",
  	"shw.io",
  	"flynnhosting.net",
  	"forgeblocks.com",
  	"id.forgerock.io",
  	"framer.app",
  	"framercanvas.com",
  	"*.frusky.de",
  	"ravpage.co.il",
  	"0e.vc",
  	"freebox-os.com",
  	"freeboxos.com",
  	"fbx-os.fr",
  	"fbxos.fr",
  	"freebox-os.fr",
  	"freeboxos.fr",
  	"freedesktop.org",
  	"freemyip.com",
  	"wien.funkfeuer.at",
  	"*.futurecms.at",
  	"*.ex.futurecms.at",
  	"*.in.futurecms.at",
  	"futurehosting.at",
  	"futuremailing.at",
  	"*.ex.ortsinfo.at",
  	"*.kunden.ortsinfo.at",
  	"*.statics.cloud",
  	"independent-commission.uk",
  	"independent-inquest.uk",
  	"independent-inquiry.uk",
  	"independent-panel.uk",
  	"independent-review.uk",
  	"public-inquiry.uk",
  	"royal-commission.uk",
  	"campaign.gov.uk",
  	"service.gov.uk",
  	"api.gov.uk",
  	"gehirn.ne.jp",
  	"usercontent.jp",
  	"gentapps.com",
  	"gentlentapis.com",
  	"lab.ms",
  	"cdn-edges.net",
  	"ghost.io",
  	"gsj.bz",
  	"githubusercontent.com",
  	"githubpreview.dev",
  	"github.io",
  	"gitlab.io",
  	"gitapp.si",
  	"gitpage.si",
  	"glitch.me",
  	"nog.community",
  	"co.ro",
  	"shop.ro",
  	"lolipop.io",
  	"angry.jp",
  	"babyblue.jp",
  	"babymilk.jp",
  	"backdrop.jp",
  	"bambina.jp",
  	"bitter.jp",
  	"blush.jp",
  	"boo.jp",
  	"boy.jp",
  	"boyfriend.jp",
  	"but.jp",
  	"candypop.jp",
  	"capoo.jp",
  	"catfood.jp",
  	"cheap.jp",
  	"chicappa.jp",
  	"chillout.jp",
  	"chips.jp",
  	"chowder.jp",
  	"chu.jp",
  	"ciao.jp",
  	"cocotte.jp",
  	"coolblog.jp",
  	"cranky.jp",
  	"cutegirl.jp",
  	"daa.jp",
  	"deca.jp",
  	"deci.jp",
  	"digick.jp",
  	"egoism.jp",
  	"fakefur.jp",
  	"fem.jp",
  	"flier.jp",
  	"floppy.jp",
  	"fool.jp",
  	"frenchkiss.jp",
  	"girlfriend.jp",
  	"girly.jp",
  	"gloomy.jp",
  	"gonna.jp",
  	"greater.jp",
  	"hacca.jp",
  	"heavy.jp",
  	"her.jp",
  	"hiho.jp",
  	"hippy.jp",
  	"holy.jp",
  	"hungry.jp",
  	"icurus.jp",
  	"itigo.jp",
  	"jellybean.jp",
  	"kikirara.jp",
  	"kill.jp",
  	"kilo.jp",
  	"kuron.jp",
  	"littlestar.jp",
  	"lolipopmc.jp",
  	"lolitapunk.jp",
  	"lomo.jp",
  	"lovepop.jp",
  	"lovesick.jp",
  	"main.jp",
  	"mods.jp",
  	"mond.jp",
  	"mongolian.jp",
  	"moo.jp",
  	"namaste.jp",
  	"nikita.jp",
  	"nobushi.jp",
  	"noor.jp",
  	"oops.jp",
  	"parallel.jp",
  	"parasite.jp",
  	"pecori.jp",
  	"peewee.jp",
  	"penne.jp",
  	"pepper.jp",
  	"perma.jp",
  	"pigboat.jp",
  	"pinoko.jp",
  	"punyu.jp",
  	"pupu.jp",
  	"pussycat.jp",
  	"pya.jp",
  	"raindrop.jp",
  	"readymade.jp",
  	"sadist.jp",
  	"schoolbus.jp",
  	"secret.jp",
  	"staba.jp",
  	"stripper.jp",
  	"sub.jp",
  	"sunnyday.jp",
  	"thick.jp",
  	"tonkotsu.jp",
  	"under.jp",
  	"upper.jp",
  	"velvet.jp",
  	"verse.jp",
  	"versus.jp",
  	"vivian.jp",
  	"watson.jp",
  	"weblike.jp",
  	"whitesnow.jp",
  	"zombie.jp",
  	"heteml.net",
  	"cloudapps.digital",
  	"london.cloudapps.digital",
  	"pymnt.uk",
  	"homeoffice.gov.uk",
  	"ro.im",
  	"goip.de",
  	"run.app",
  	"a.run.app",
  	"web.app",
  	"*.0emm.com",
  	"appspot.com",
  	"*.r.appspot.com",
  	"codespot.com",
  	"googleapis.com",
  	"googlecode.com",
  	"pagespeedmobilizer.com",
  	"publishproxy.com",
  	"withgoogle.com",
  	"withyoutube.com",
  	"*.gateway.dev",
  	"cloud.goog",
  	"translate.goog",
  	"*.usercontent.goog",
  	"cloudfunctions.net",
  	"blogspot.ae",
  	"blogspot.al",
  	"blogspot.am",
  	"blogspot.ba",
  	"blogspot.be",
  	"blogspot.bg",
  	"blogspot.bj",
  	"blogspot.ca",
  	"blogspot.cf",
  	"blogspot.ch",
  	"blogspot.cl",
  	"blogspot.co.at",
  	"blogspot.co.id",
  	"blogspot.co.il",
  	"blogspot.co.ke",
  	"blogspot.co.nz",
  	"blogspot.co.uk",
  	"blogspot.co.za",
  	"blogspot.com",
  	"blogspot.com.ar",
  	"blogspot.com.au",
  	"blogspot.com.br",
  	"blogspot.com.by",
  	"blogspot.com.co",
  	"blogspot.com.cy",
  	"blogspot.com.ee",
  	"blogspot.com.eg",
  	"blogspot.com.es",
  	"blogspot.com.mt",
  	"blogspot.com.ng",
  	"blogspot.com.tr",
  	"blogspot.com.uy",
  	"blogspot.cv",
  	"blogspot.cz",
  	"blogspot.de",
  	"blogspot.dk",
  	"blogspot.fi",
  	"blogspot.fr",
  	"blogspot.gr",
  	"blogspot.hk",
  	"blogspot.hr",
  	"blogspot.hu",
  	"blogspot.ie",
  	"blogspot.in",
  	"blogspot.is",
  	"blogspot.it",
  	"blogspot.jp",
  	"blogspot.kr",
  	"blogspot.li",
  	"blogspot.lt",
  	"blogspot.lu",
  	"blogspot.md",
  	"blogspot.mk",
  	"blogspot.mr",
  	"blogspot.mx",
  	"blogspot.my",
  	"blogspot.nl",
  	"blogspot.no",
  	"blogspot.pe",
  	"blogspot.pt",
  	"blogspot.qa",
  	"blogspot.re",
  	"blogspot.ro",
  	"blogspot.rs",
  	"blogspot.ru",
  	"blogspot.se",
  	"blogspot.sg",
  	"blogspot.si",
  	"blogspot.sk",
  	"blogspot.sn",
  	"blogspot.td",
  	"blogspot.tw",
  	"blogspot.ug",
  	"blogspot.vn",
  	"goupile.fr",
  	"gov.nl",
  	"awsmppl.com",
  	"günstigbestellen.de",
  	"günstigliefern.de",
  	"fin.ci",
  	"free.hr",
  	"caa.li",
  	"ua.rs",
  	"conf.se",
  	"hs.zone",
  	"hs.run",
  	"hashbang.sh",
  	"hasura.app",
  	"hasura-app.io",
  	"pages.it.hs-heilbronn.de",
  	"hepforge.org",
  	"herokuapp.com",
  	"herokussl.com",
  	"ravendb.cloud",
  	"myravendb.com",
  	"ravendb.community",
  	"ravendb.me",
  	"development.run",
  	"ravendb.run",
  	"homesklep.pl",
  	"secaas.hk",
  	"hoplix.shop",
  	"orx.biz",
  	"biz.gl",
  	"col.ng",
  	"firm.ng",
  	"gen.ng",
  	"ltd.ng",
  	"ngo.ng",
  	"edu.scot",
  	"sch.so",
  	"hostyhosting.io",
  	"häkkinen.fi",
  	"*.moonscale.io",
  	"moonscale.net",
  	"iki.fi",
  	"ibxos.it",
  	"iliadboxos.it",
  	"impertrixcdn.com",
  	"impertrix.com",
  	"smushcdn.com",
  	"wphostedmail.com",
  	"wpmucdn.com",
  	"tempurl.host",
  	"wpmudev.host",
  	"dyn-berlin.de",
  	"in-berlin.de",
  	"in-brb.de",
  	"in-butter.de",
  	"in-dsl.de",
  	"in-dsl.net",
  	"in-dsl.org",
  	"in-vpn.de",
  	"in-vpn.net",
  	"in-vpn.org",
  	"biz.at",
  	"info.at",
  	"info.cx",
  	"ac.leg.br",
  	"al.leg.br",
  	"am.leg.br",
  	"ap.leg.br",
  	"ba.leg.br",
  	"ce.leg.br",
  	"df.leg.br",
  	"es.leg.br",
  	"go.leg.br",
  	"ma.leg.br",
  	"mg.leg.br",
  	"ms.leg.br",
  	"mt.leg.br",
  	"pa.leg.br",
  	"pb.leg.br",
  	"pe.leg.br",
  	"pi.leg.br",
  	"pr.leg.br",
  	"rj.leg.br",
  	"rn.leg.br",
  	"ro.leg.br",
  	"rr.leg.br",
  	"rs.leg.br",
  	"sc.leg.br",
  	"se.leg.br",
  	"sp.leg.br",
  	"to.leg.br",
  	"pixolino.com",
  	"na4u.ru",
  	"iopsys.se",
  	"ipifony.net",
  	"iservschule.de",
  	"mein-iserv.de",
  	"schulplattform.de",
  	"schulserver.de",
  	"test-iserv.de",
  	"iserv.dev",
  	"iobb.net",
  	"mel.cloudlets.com.au",
  	"cloud.interhostsolutions.be",
  	"users.scale.virtualcloud.com.br",
  	"mycloud.by",
  	"alp1.ae.flow.ch",
  	"appengine.flow.ch",
  	"es-1.axarnet.cloud",
  	"diadem.cloud",
  	"vip.jelastic.cloud",
  	"jele.cloud",
  	"it1.eur.aruba.jenv-aruba.cloud",
  	"it1.jenv-aruba.cloud",
  	"keliweb.cloud",
  	"cs.keliweb.cloud",
  	"oxa.cloud",
  	"tn.oxa.cloud",
  	"uk.oxa.cloud",
  	"primetel.cloud",
  	"uk.primetel.cloud",
  	"ca.reclaim.cloud",
  	"uk.reclaim.cloud",
  	"us.reclaim.cloud",
  	"ch.trendhosting.cloud",
  	"de.trendhosting.cloud",
  	"jele.club",
  	"amscompute.com",
  	"clicketcloud.com",
  	"dopaas.com",
  	"hidora.com",
  	"paas.hosted-by-previder.com",
  	"rag-cloud.hosteur.com",
  	"rag-cloud-ch.hosteur.com",
  	"jcloud.ik-server.com",
  	"jcloud-ver-jpc.ik-server.com",
  	"demo.jelastic.com",
  	"kilatiron.com",
  	"paas.massivegrid.com",
  	"jed.wafaicloud.com",
  	"lon.wafaicloud.com",
  	"ryd.wafaicloud.com",
  	"j.scaleforce.com.cy",
  	"jelastic.dogado.eu",
  	"fi.cloudplatform.fi",
  	"demo.datacenter.fi",
  	"paas.datacenter.fi",
  	"jele.host",
  	"mircloud.host",
  	"paas.beebyte.io",
  	"sekd1.beebyteapp.io",
  	"jele.io",
  	"cloud-fr1.unispace.io",
  	"jc.neen.it",
  	"cloud.jelastic.open.tim.it",
  	"jcloud.kz",
  	"upaas.kazteleport.kz",
  	"cloudjiffy.net",
  	"fra1-de.cloudjiffy.net",
  	"west1-us.cloudjiffy.net",
  	"jls-sto1.elastx.net",
  	"jls-sto2.elastx.net",
  	"jls-sto3.elastx.net",
  	"faststacks.net",
  	"fr-1.paas.massivegrid.net",
  	"lon-1.paas.massivegrid.net",
  	"lon-2.paas.massivegrid.net",
  	"ny-1.paas.massivegrid.net",
  	"ny-2.paas.massivegrid.net",
  	"sg-1.paas.massivegrid.net",
  	"jelastic.saveincloud.net",
  	"nordeste-idc.saveincloud.net",
  	"j.scaleforce.net",
  	"jelastic.tsukaeru.net",
  	"sdscloud.pl",
  	"unicloud.pl",
  	"mircloud.ru",
  	"jelastic.regruhosting.ru",
  	"enscaled.sg",
  	"jele.site",
  	"jelastic.team",
  	"orangecloud.tn",
  	"j.layershift.co.uk",
  	"phx.enscaled.us",
  	"mircloud.us",
  	"myjino.ru",
  	"*.hosting.myjino.ru",
  	"*.landing.myjino.ru",
  	"*.spectrum.myjino.ru",
  	"*.vps.myjino.ru",
  	"jotelulu.cloud",
  	"*.triton.zone",
  	"*.cns.joyent.com",
  	"js.org",
  	"kaas.gg",
  	"khplay.nl",
  	"ktistory.com",
  	"kapsi.fi",
  	"keymachine.de",
  	"kinghost.net",
  	"uni5.net",
  	"knightpoint.systems",
  	"koobin.events",
  	"oya.to",
  	"kuleuven.cloud",
  	"ezproxy.kuleuven.be",
  	"co.krd",
  	"edu.krd",
  	"krellian.net",
  	"webthings.io",
  	"git-repos.de",
  	"lcube-server.de",
  	"svn-repos.de",
  	"leadpages.co",
  	"lpages.co",
  	"lpusercontent.com",
  	"lelux.site",
  	"co.business",
  	"co.education",
  	"co.events",
  	"co.financial",
  	"co.network",
  	"co.place",
  	"co.technology",
  	"app.lmpm.com",
  	"linkyard.cloud",
  	"linkyard-cloud.ch",
  	"members.linode.com",
  	"*.nodebalancer.linode.com",
  	"*.linodeobjects.com",
  	"ip.linodeusercontent.com",
  	"we.bs",
  	"*.user.localcert.dev",
  	"localzone.xyz",
  	"loginline.app",
  	"loginline.dev",
  	"loginline.io",
  	"loginline.services",
  	"loginline.site",
  	"servers.run",
  	"lohmus.me",
  	"krasnik.pl",
  	"leczna.pl",
  	"lubartow.pl",
  	"lublin.pl",
  	"poniatowa.pl",
  	"swidnik.pl",
  	"glug.org.uk",
  	"lug.org.uk",
  	"lugs.org.uk",
  	"barsy.bg",
  	"barsy.co.uk",
  	"barsyonline.co.uk",
  	"barsycenter.com",
  	"barsyonline.com",
  	"barsy.club",
  	"barsy.de",
  	"barsy.eu",
  	"barsy.in",
  	"barsy.info",
  	"barsy.io",
  	"barsy.me",
  	"barsy.menu",
  	"barsy.mobi",
  	"barsy.net",
  	"barsy.online",
  	"barsy.org",
  	"barsy.pro",
  	"barsy.pub",
  	"barsy.ro",
  	"barsy.shop",
  	"barsy.site",
  	"barsy.support",
  	"barsy.uk",
  	"*.magentosite.cloud",
  	"mayfirst.info",
  	"mayfirst.org",
  	"hb.cldmail.ru",
  	"cn.vu",
  	"mazeplay.com",
  	"mcpe.me",
  	"mcdir.me",
  	"mcdir.ru",
  	"mcpre.ru",
  	"vps.mcdir.ru",
  	"mediatech.by",
  	"mediatech.dev",
  	"hra.health",
  	"miniserver.com",
  	"memset.net",
  	"messerli.app",
  	"*.cloud.metacentrum.cz",
  	"custom.metacentrum.cz",
  	"flt.cloud.muni.cz",
  	"usr.cloud.muni.cz",
  	"meteorapp.com",
  	"eu.meteorapp.com",
  	"co.pl",
  	"*.azurecontainer.io",
  	"azurewebsites.net",
  	"azure-mobile.net",
  	"cloudapp.net",
  	"azurestaticapps.net",
  	"1.azurestaticapps.net",
  	"centralus.azurestaticapps.net",
  	"eastasia.azurestaticapps.net",
  	"eastus2.azurestaticapps.net",
  	"westeurope.azurestaticapps.net",
  	"westus2.azurestaticapps.net",
  	"csx.cc",
  	"mintere.site",
  	"forte.id",
  	"mozilla-iot.org",
  	"bmoattachments.org",
  	"net.ru",
  	"org.ru",
  	"pp.ru",
  	"hostedpi.com",
  	"customer.mythic-beasts.com",
  	"caracal.mythic-beasts.com",
  	"fentiger.mythic-beasts.com",
  	"lynx.mythic-beasts.com",
  	"ocelot.mythic-beasts.com",
  	"oncilla.mythic-beasts.com",
  	"onza.mythic-beasts.com",
  	"sphinx.mythic-beasts.com",
  	"vs.mythic-beasts.com",
  	"x.mythic-beasts.com",
  	"yali.mythic-beasts.com",
  	"cust.retrosnub.co.uk",
  	"ui.nabu.casa",
  	"pony.club",
  	"of.fashion",
  	"in.london",
  	"of.london",
  	"from.marketing",
  	"with.marketing",
  	"for.men",
  	"repair.men",
  	"and.mom",
  	"for.mom",
  	"for.one",
  	"under.one",
  	"for.sale",
  	"that.win",
  	"from.work",
  	"to.work",
  	"cloud.nospamproxy.com",
  	"netlify.app",
  	"4u.com",
  	"ngrok.io",
  	"nh-serv.co.uk",
  	"nfshost.com",
  	"*.developer.app",
  	"noop.app",
  	"*.northflank.app",
  	"*.build.run",
  	"*.code.run",
  	"*.database.run",
  	"*.migration.run",
  	"noticeable.news",
  	"dnsking.ch",
  	"mypi.co",
  	"n4t.co",
  	"001www.com",
  	"ddnslive.com",
  	"myiphost.com",
  	"forumz.info",
  	"16-b.it",
  	"32-b.it",
  	"64-b.it",
  	"soundcast.me",
  	"tcp4.me",
  	"dnsup.net",
  	"hicam.net",
  	"now-dns.net",
  	"ownip.net",
  	"vpndns.net",
  	"dynserv.org",
  	"now-dns.org",
  	"x443.pw",
  	"now-dns.top",
  	"ntdll.top",
  	"freeddns.us",
  	"crafting.xyz",
  	"zapto.xyz",
  	"nsupdate.info",
  	"nerdpol.ovh",
  	"blogsyte.com",
  	"brasilia.me",
  	"cable-modem.org",
  	"ciscofreak.com",
  	"collegefan.org",
  	"couchpotatofries.org",
  	"damnserver.com",
  	"ddns.me",
  	"ditchyourip.com",
  	"dnsfor.me",
  	"dnsiskinky.com",
  	"dvrcam.info",
  	"dynns.com",
  	"eating-organic.net",
  	"fantasyleague.cc",
  	"geekgalaxy.com",
  	"golffan.us",
  	"health-carereform.com",
  	"homesecuritymac.com",
  	"homesecuritypc.com",
  	"hopto.me",
  	"ilovecollege.info",
  	"loginto.me",
  	"mlbfan.org",
  	"mmafan.biz",
  	"myactivedirectory.com",
  	"mydissent.net",
  	"myeffect.net",
  	"mymediapc.net",
  	"mypsx.net",
  	"mysecuritycamera.com",
  	"mysecuritycamera.net",
  	"mysecuritycamera.org",
  	"net-freaks.com",
  	"nflfan.org",
  	"nhlfan.net",
  	"no-ip.ca",
  	"no-ip.co.uk",
  	"no-ip.net",
  	"noip.us",
  	"onthewifi.com",
  	"pgafan.net",
  	"point2this.com",
  	"pointto.us",
  	"privatizehealthinsurance.net",
  	"quicksytes.com",
  	"read-books.org",
  	"securitytactics.com",
  	"serveexchange.com",
  	"servehumour.com",
  	"servep2p.com",
  	"servesarcasm.com",
  	"stufftoread.com",
  	"ufcfan.org",
  	"unusualperson.com",
  	"workisboring.com",
  	"3utilities.com",
  	"bounceme.net",
  	"ddns.net",
  	"ddnsking.com",
  	"gotdns.ch",
  	"hopto.org",
  	"myftp.biz",
  	"myftp.org",
  	"myvnc.com",
  	"no-ip.biz",
  	"no-ip.info",
  	"no-ip.org",
  	"noip.me",
  	"redirectme.net",
  	"servebeer.com",
  	"serveblog.net",
  	"servecounterstrike.com",
  	"serveftp.com",
  	"servegame.com",
  	"servehalflife.com",
  	"servehttp.com",
  	"serveirc.com",
  	"serveminecraft.net",
  	"servemp3.com",
  	"servepics.com",
  	"servequake.com",
  	"sytes.net",
  	"webhop.me",
  	"zapto.org",
  	"stage.nodeart.io",
  	"pcloud.host",
  	"nyc.mn",
  	"static.observableusercontent.com",
  	"cya.gg",
  	"omg.lol",
  	"cloudycluster.net",
  	"omniwe.site",
  	"service.one",
  	"nid.io",
  	"opensocial.site",
  	"opencraft.hosting",
  	"orsites.com",
  	"operaunite.com",
  	"tech.orange",
  	"authgear-staging.com",
  	"authgearapps.com",
  	"skygearapp.com",
  	"outsystemscloud.com",
  	"*.webpaas.ovh.net",
  	"*.hosting.ovh.net",
  	"ownprovider.com",
  	"own.pm",
  	"*.owo.codes",
  	"ox.rs",
  	"oy.lc",
  	"pgfog.com",
  	"pagefrontapp.com",
  	"pagexl.com",
  	"*.paywhirl.com",
  	"bar0.net",
  	"bar1.net",
  	"bar2.net",
  	"rdv.to",
  	"art.pl",
  	"gliwice.pl",
  	"krakow.pl",
  	"poznan.pl",
  	"wroc.pl",
  	"zakopane.pl",
  	"pantheonsite.io",
  	"gotpantheon.com",
  	"mypep.link",
  	"perspecta.cloud",
  	"lk3.ru",
  	"on-web.fr",
  	"bc.platform.sh",
  	"ent.platform.sh",
  	"eu.platform.sh",
  	"us.platform.sh",
  	"*.platformsh.site",
  	"*.tst.site",
  	"platter-app.com",
  	"platter-app.dev",
  	"platterp.us",
  	"pdns.page",
  	"plesk.page",
  	"pleskns.com",
  	"dyn53.io",
  	"onporter.run",
  	"co.bn",
  	"postman-echo.com",
  	"pstmn.io",
  	"mock.pstmn.io",
  	"httpbin.org",
  	"prequalifyme.today",
  	"xen.prgmr.com",
  	"priv.at",
  	"prvcy.page",
  	"*.dweb.link",
  	"protonet.io",
  	"chirurgiens-dentistes-en-france.fr",
  	"byen.site",
  	"pubtls.org",
  	"pythonanywhere.com",
  	"eu.pythonanywhere.com",
  	"qoto.io",
  	"qualifioapp.com",
  	"qbuser.com",
  	"cloudsite.builders",
  	"instances.spawn.cc",
  	"instantcloud.cn",
  	"ras.ru",
  	"qa2.com",
  	"qcx.io",
  	"*.sys.qcx.io",
  	"dev-myqnapcloud.com",
  	"alpha-myqnapcloud.com",
  	"myqnapcloud.com",
  	"*.quipelements.com",
  	"vapor.cloud",
  	"vaporcloud.io",
  	"rackmaze.com",
  	"rackmaze.net",
  	"g.vbrplsbx.io",
  	"*.on-k3s.io",
  	"*.on-rancher.cloud",
  	"*.on-rio.io",
  	"readthedocs.io",
  	"rhcloud.com",
  	"app.render.com",
  	"onrender.com",
  	"repl.co",
  	"id.repl.co",
  	"repl.run",
  	"resindevice.io",
  	"devices.resinstaging.io",
  	"hzc.io",
  	"wellbeingzone.eu",
  	"wellbeingzone.co.uk",
  	"adimo.co.uk",
  	"itcouldbewor.se",
  	"git-pages.rit.edu",
  	"rocky.page",
  	"биз.рус",
  	"ком.рус",
  	"крым.рус",
  	"мир.рус",
  	"мск.рус",
  	"орг.рус",
  	"самара.рус",
  	"сочи.рус",
  	"спб.рус",
  	"я.рус",
  	"*.builder.code.com",
  	"*.dev-builder.code.com",
  	"*.stg-builder.code.com",
  	"sandcats.io",
  	"logoip.de",
  	"logoip.com",
  	"fr-par-1.baremetal.scw.cloud",
  	"fr-par-2.baremetal.scw.cloud",
  	"nl-ams-1.baremetal.scw.cloud",
  	"fnc.fr-par.scw.cloud",
  	"functions.fnc.fr-par.scw.cloud",
  	"k8s.fr-par.scw.cloud",
  	"nodes.k8s.fr-par.scw.cloud",
  	"s3.fr-par.scw.cloud",
  	"s3-website.fr-par.scw.cloud",
  	"whm.fr-par.scw.cloud",
  	"priv.instances.scw.cloud",
  	"pub.instances.scw.cloud",
  	"k8s.scw.cloud",
  	"k8s.nl-ams.scw.cloud",
  	"nodes.k8s.nl-ams.scw.cloud",
  	"s3.nl-ams.scw.cloud",
  	"s3-website.nl-ams.scw.cloud",
  	"whm.nl-ams.scw.cloud",
  	"k8s.pl-waw.scw.cloud",
  	"nodes.k8s.pl-waw.scw.cloud",
  	"s3.pl-waw.scw.cloud",
  	"s3-website.pl-waw.scw.cloud",
  	"scalebook.scw.cloud",
  	"smartlabeling.scw.cloud",
  	"dedibox.fr",
  	"schokokeks.net",
  	"gov.scot",
  	"service.gov.scot",
  	"scrysec.com",
  	"firewall-gateway.com",
  	"firewall-gateway.de",
  	"my-gateway.de",
  	"my-router.de",
  	"spdns.de",
  	"spdns.eu",
  	"firewall-gateway.net",
  	"my-firewall.org",
  	"myfirewall.org",
  	"spdns.org",
  	"seidat.net",
  	"sellfy.store",
  	"senseering.net",
  	"minisite.ms",
  	"magnet.page",
  	"biz.ua",
  	"co.ua",
  	"pp.ua",
  	"shiftcrypto.dev",
  	"shiftcrypto.io",
  	"shiftedit.io",
  	"myshopblocks.com",
  	"myshopify.com",
  	"shopitsite.com",
  	"shopware.store",
  	"mo-siemens.io",
  	"1kapp.com",
  	"appchizi.com",
  	"applinzi.com",
  	"sinaapp.com",
  	"vipsinaapp.com",
  	"siteleaf.net",
  	"bounty-full.com",
  	"alpha.bounty-full.com",
  	"beta.bounty-full.com",
  	"small-web.org",
  	"vp4.me",
  	"try-snowplow.com",
  	"srht.site",
  	"stackhero-network.com",
  	"musician.io",
  	"novecore.site",
  	"static.land",
  	"dev.static.land",
  	"sites.static.land",
  	"storebase.store",
  	"vps-host.net",
  	"atl.jelastic.vps-host.net",
  	"njs.jelastic.vps-host.net",
  	"ric.jelastic.vps-host.net",
  	"playstation-cloud.com",
  	"apps.lair.io",
  	"*.stolos.io",
  	"spacekit.io",
  	"customer.speedpartner.de",
  	"myspreadshop.at",
  	"myspreadshop.com.au",
  	"myspreadshop.be",
  	"myspreadshop.ca",
  	"myspreadshop.ch",
  	"myspreadshop.com",
  	"myspreadshop.de",
  	"myspreadshop.dk",
  	"myspreadshop.es",
  	"myspreadshop.fi",
  	"myspreadshop.fr",
  	"myspreadshop.ie",
  	"myspreadshop.it",
  	"myspreadshop.net",
  	"myspreadshop.nl",
  	"myspreadshop.no",
  	"myspreadshop.pl",
  	"myspreadshop.se",
  	"myspreadshop.co.uk",
  	"api.stdlib.com",
  	"storj.farm",
  	"utwente.io",
  	"soc.srcf.net",
  	"user.srcf.net",
  	"temp-dns.com",
  	"supabase.co",
  	"supabase.in",
  	"supabase.net",
  	"su.paba.se",
  	"*.s5y.io",
  	"*.sensiosite.cloud",
  	"syncloud.it",
  	"dscloud.biz",
  	"direct.quickconnect.cn",
  	"dsmynas.com",
  	"familyds.com",
  	"diskstation.me",
  	"dscloud.me",
  	"i234.me",
  	"myds.me",
  	"synology.me",
  	"dscloud.mobi",
  	"dsmynas.net",
  	"familyds.net",
  	"dsmynas.org",
  	"familyds.org",
  	"vpnplus.to",
  	"direct.quickconnect.to",
  	"tabitorder.co.il",
  	"taifun-dns.de",
  	"beta.tailscale.net",
  	"ts.net",
  	"gda.pl",
  	"gdansk.pl",
  	"gdynia.pl",
  	"med.pl",
  	"sopot.pl",
  	"site.tb-hosting.com",
  	"edugit.io",
  	"s3.teckids.org",
  	"telebit.app",
  	"telebit.io",
  	"*.telebit.xyz",
  	"gwiddle.co.uk",
  	"*.firenet.ch",
  	"*.svc.firenet.ch",
  	"reservd.com",
  	"thingdustdata.com",
  	"cust.dev.thingdust.io",
  	"cust.disrec.thingdust.io",
  	"cust.prod.thingdust.io",
  	"cust.testing.thingdust.io",
  	"reservd.dev.thingdust.io",
  	"reservd.disrec.thingdust.io",
  	"reservd.testing.thingdust.io",
  	"tickets.io",
  	"arvo.network",
  	"azimuth.network",
  	"tlon.network",
  	"torproject.net",
  	"pages.torproject.net",
  	"bloxcms.com",
  	"townnews-staging.com",
  	"tbits.me",
  	"12hp.at",
  	"2ix.at",
  	"4lima.at",
  	"lima-city.at",
  	"12hp.ch",
  	"2ix.ch",
  	"4lima.ch",
  	"lima-city.ch",
  	"trafficplex.cloud",
  	"de.cool",
  	"12hp.de",
  	"2ix.de",
  	"4lima.de",
  	"lima-city.de",
  	"1337.pictures",
  	"clan.rip",
  	"lima-city.rocks",
  	"webspace.rocks",
  	"lima.zone",
  	"*.transurl.be",
  	"*.transurl.eu",
  	"*.transurl.nl",
  	"site.transip.me",
  	"tuxfamily.org",
  	"dd-dns.de",
  	"diskstation.eu",
  	"diskstation.org",
  	"dray-dns.de",
  	"draydns.de",
  	"dyn-vpn.de",
  	"dynvpn.de",
  	"mein-vigor.de",
  	"my-vigor.de",
  	"my-wan.de",
  	"syno-ds.de",
  	"synology-diskstation.de",
  	"synology-ds.de",
  	"typedream.app",
  	"pro.typeform.com",
  	"uber.space",
  	"*.uberspace.de",
  	"hk.com",
  	"hk.org",
  	"ltd.hk",
  	"inc.hk",
  	"name.pm",
  	"sch.tf",
  	"biz.wf",
  	"sch.wf",
  	"org.yt",
  	"virtualuser.de",
  	"virtual-user.de",
  	"upli.io",
  	"urown.cloud",
  	"dnsupdate.info",
  	"lib.de.us",
  	"2038.io",
  	"vercel.app",
  	"vercel.dev",
  	"now.sh",
  	"router.management",
  	"v-info.info",
  	"voorloper.cloud",
  	"neko.am",
  	"nyaa.am",
  	"be.ax",
  	"cat.ax",
  	"es.ax",
  	"eu.ax",
  	"gg.ax",
  	"mc.ax",
  	"us.ax",
  	"xy.ax",
  	"nl.ci",
  	"xx.gl",
  	"app.gp",
  	"blog.gt",
  	"de.gt",
  	"to.gt",
  	"be.gy",
  	"cc.hn",
  	"blog.kg",
  	"io.kg",
  	"jp.kg",
  	"tv.kg",
  	"uk.kg",
  	"us.kg",
  	"de.ls",
  	"at.md",
  	"de.md",
  	"jp.md",
  	"to.md",
  	"indie.porn",
  	"vxl.sh",
  	"ch.tc",
  	"me.tc",
  	"we.tc",
  	"nyan.to",
  	"at.vg",
  	"blog.vu",
  	"dev.vu",
  	"me.vu",
  	"v.ua",
  	"*.vultrobjects.com",
  	"wafflecell.com",
  	"*.webhare.dev",
  	"reserve-online.net",
  	"reserve-online.com",
  	"bookonline.app",
  	"hotelwithflight.com",
  	"wedeploy.io",
  	"wedeploy.me",
  	"wedeploy.sh",
  	"remotewd.com",
  	"pages.wiardweb.com",
  	"wmflabs.org",
  	"toolforge.org",
  	"wmcloud.org",
  	"panel.gg",
  	"daemon.panel.gg",
  	"messwithdns.com",
  	"woltlab-demo.com",
  	"myforum.community",
  	"community-pro.de",
  	"diskussionsbereich.de",
  	"community-pro.net",
  	"meinforum.net",
  	"affinitylottery.org.uk",
  	"raffleentry.org.uk",
  	"weeklylottery.org.uk",
  	"wpenginepowered.com",
  	"js.wpenginepowered.com",
  	"wixsite.com",
  	"editorx.io",
  	"half.host",
  	"xnbay.com",
  	"u2.xnbay.com",
  	"u2-local.xnbay.com",
  	"cistron.nl",
  	"demon.nl",
  	"xs4all.space",
  	"yandexcloud.net",
  	"storage.yandexcloud.net",
  	"website.yandexcloud.net",
  	"official.academy",
  	"yolasite.com",
  	"ybo.faith",
  	"yombo.me",
  	"homelink.one",
  	"ybo.party",
  	"ybo.review",
  	"ybo.science",
  	"ybo.trade",
  	"ynh.fr",
  	"nohost.me",
  	"noho.st",
  	"za.net",
  	"za.org",
  	"bss.design",
  	"basicserver.io",
  	"virtualserver.io",
  	"enterprisecloud.nu"
  ];

  var rules$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    'default': rules
  });

  var require$$0 = getCjsExportFromNamespace(rules$1);

  var psl = createCommonjsModule(function (module, exports) {

    var internals = {}; //
    // Read rules from file.
    //

    internals.rules = require$$0.map(function (rule) {
      return {
        rule: rule,
        suffix: rule.replace(/^(\*\.|\!)/, ''),
        punySuffix: -1,
        wildcard: rule.charAt(0) === '*',
        exception: rule.charAt(0) === '!'
      };
    }); //
    // Check is given string ends with `suffix`.
    //

    internals.endsWith = function (str, suffix) {
      return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }; //
    // Find rule for a given domain.
    //


    internals.findRule = function (domain) {
      var punyDomain = punycode.toASCII(domain);
      return internals.rules.reduce(function (memo, rule) {
        if (rule.punySuffix === -1) {
          rule.punySuffix = punycode.toASCII(rule.suffix);
        }

        if (!internals.endsWith(punyDomain, '.' + rule.punySuffix) && punyDomain !== rule.punySuffix) {
          return memo;
        } // This has been commented out as it never seems to run. This is because
        // sub tlds always appear after their parents and we never find a shorter
        // match.
        //if (memo) {
        //  var memoSuffix = Punycode.toASCII(memo.suffix);
        //  if (memoSuffix.length >= punySuffix.length) {
        //    return memo;
        //  }
        //}


        return rule;
      }, null);
    }; //
    // Error codes and messages.
    //


    exports.errorCodes = {
      DOMAIN_TOO_SHORT: 'Domain name too short.',
      DOMAIN_TOO_LONG: 'Domain name too long. It should be no more than 255 chars.',
      LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',
      LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',
      LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',
      LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',
      LABEL_INVALID_CHARS: 'Domain name label can only contain alphanumeric characters or dashes.'
    }; //
    // Validate domain name and throw if not valid.
    //
    // From wikipedia:
    //
    // Hostnames are composed of series of labels concatenated with dots, as are all
    // domain names. Each label must be between 1 and 63 characters long, and the
    // entire hostname (including the delimiting dots) has a maximum of 255 chars.
    //
    // Allowed chars:
    //
    // * `a-z`
    // * `0-9`
    // * `-` but not as a starting or ending character
    // * `.` as a separator for the textual portions of a domain name
    //
    // * http://en.wikipedia.org/wiki/Domain_name
    // * http://en.wikipedia.org/wiki/Hostname
    //

    internals.validate = function (input) {
      // Before we can validate we need to take care of IDNs with unicode chars.
      var ascii = punycode.toASCII(input);

      if (ascii.length < 1) {
        return 'DOMAIN_TOO_SHORT';
      }

      if (ascii.length > 255) {
        return 'DOMAIN_TOO_LONG';
      } // Check each part's length and allowed chars.


      var labels = ascii.split('.');
      var label;

      for (var i = 0; i < labels.length; ++i) {
        label = labels[i];

        if (!label.length) {
          return 'LABEL_TOO_SHORT';
        }

        if (label.length > 63) {
          return 'LABEL_TOO_LONG';
        }

        if (label.charAt(0) === '-') {
          return 'LABEL_STARTS_WITH_DASH';
        }

        if (label.charAt(label.length - 1) === '-') {
          return 'LABEL_ENDS_WITH_DASH';
        }

        if (!/^[a-z0-9\-]+$/.test(label)) {
          return 'LABEL_INVALID_CHARS';
        }
      }
    }; //
    // Public API
    //
    //
    // Parse domain.
    //


    exports.parse = function (input) {
      if (typeof input !== 'string') {
        throw new TypeError('Domain name must be a string.');
      } // Force domain to lowercase.


      var domain = input.slice(0).toLowerCase(); // Handle FQDN.
      // TODO: Simply remove trailing dot?

      if (domain.charAt(domain.length - 1) === '.') {
        domain = domain.slice(0, domain.length - 1);
      } // Validate and sanitise input.


      var error = internals.validate(domain);

      if (error) {
        return {
          input: input,
          error: {
            message: exports.errorCodes[error],
            code: error
          }
        };
      }

      var parsed = {
        input: input,
        tld: null,
        sld: null,
        domain: null,
        subdomain: null,
        listed: false
      };
      var domainParts = domain.split('.'); // Non-Internet TLD

      if (domainParts[domainParts.length - 1] === 'local') {
        return parsed;
      }

      var handlePunycode = function () {
        if (!/xn--/.test(domain)) {
          return parsed;
        }

        if (parsed.domain) {
          parsed.domain = punycode.toASCII(parsed.domain);
        }

        if (parsed.subdomain) {
          parsed.subdomain = punycode.toASCII(parsed.subdomain);
        }

        return parsed;
      };

      var rule = internals.findRule(domain); // Unlisted tld.

      if (!rule) {
        if (domainParts.length < 2) {
          return parsed;
        }

        parsed.tld = domainParts.pop();
        parsed.sld = domainParts.pop();
        parsed.domain = [parsed.sld, parsed.tld].join('.');

        if (domainParts.length) {
          parsed.subdomain = domainParts.pop();
        }

        return handlePunycode();
      } // At this point we know the public suffix is listed.


      parsed.listed = true;
      var tldParts = rule.suffix.split('.');
      var privateParts = domainParts.slice(0, domainParts.length - tldParts.length);

      if (rule.exception) {
        privateParts.push(tldParts.shift());
      }

      parsed.tld = tldParts.join('.');

      if (!privateParts.length) {
        return handlePunycode();
      }

      if (rule.wildcard) {
        tldParts.unshift(privateParts.pop());
        parsed.tld = tldParts.join('.');
      }

      if (!privateParts.length) {
        return handlePunycode();
      }

      parsed.sld = privateParts.pop();
      parsed.domain = [parsed.sld, parsed.tld].join('.');

      if (privateParts.length) {
        parsed.subdomain = privateParts.join('.');
      }

      return handlePunycode();
    }; //
    // Get domain.
    //


    exports.get = function (domain) {
      if (!domain) {
        return null;
      }

      return exports.parse(domain).domain || null;
    }; //
    // Check whether domain belongs to a known public suffix.
    //


    exports.isValid = function (domain) {
      var parsed = exports.parse(domain);
      return Boolean(parsed.domain && parsed.listed);
    };
  });
  var psl_1 = psl.errorCodes;
  var psl_2 = psl.parse;
  var psl_3 = psl.get;
  var psl_4 = psl.isValid;

  /* eslint-disable import/prefer-default-export */

  /**
   * @param {string} host
   * @returns {import("../../target-decisioning-engine/types/DecisioningContext").DomainContext}
   */

  function parseDomainPsl(host) {
    const result = {};

    if (!psl.isValid(host)) {
      result.subdomain = "";
      result.domain = host;
      result.topLevelDomain = "";
      return result;
    }

    const parseResult = psl.parse(host);

    if (parseResult.subdomain) {
      result.subdomain = parseResult.subdomain.startsWith("www") ? parseResult.subdomain.substring(4) : parseResult.subdomain;
    } else {
      result.subdomain = "";
    }

    result.domain = parseResult.domain;
    result.topLevelDomain = parseResult.tld;
    return result;
  }

  const BUFFER = new Uint8Array(256);
  let BUFFER_PTR = BUFFER.length;
  function rng() {
    if (BUFFER_PTR > BUFFER.length - 16) {
      crypto.randomFillSync(BUFFER);
      BUFFER_PTR = 0;
    }
    /* eslint-disable no-return-assign */


    return BUFFER.slice(BUFFER_PTR, BUFFER_PTR += 16);
  }

  function createByteToHex() {
    const result = [];

    for (let i = 0; i < 256; i += 1) {
      result.push((i + 0x100).toString(16).substr(1));
    }

    return result;
  }

  const BYTE_TO_HEX = createByteToHex();
  function stringify(arr) {
    const result = [];

    for (let i = 0; i < 16; i += 1) {
      result.push(BYTE_TO_HEX[arr[i]]);
    }

    return join("", result).toLowerCase();
  }

  /* eslint-disable no-bitwise */

  function v4(rng) {
    const buffer = rng();
    buffer[6] = buffer[6] & 0x0f | 0x40;
    buffer[8] = buffer[8] & 0x3f | 0x80;
    return stringify(buffer);
  }
  /* eslint-enable no-bitwise */

  function uuid() {
    return v4(rng);
  }

  /* eslint no-param-reassign: ['error', { 'props': false }] */
  const PROTOCOL_MAP = {
    "http:": http.request,
    "https:": https.request
  };
  const HTTPS_AGENT = new https.Agent({
    keepAlive: true
  });
  const HTTP_AGENT = new http.Agent({
    keepAlive: true
  });

  var generateRandomID=function(b){var f,g,c="0123456789",d="",e="",h=8,i=10,j=10,k=""+Date.now(),l=k.substr(-6).split("").reverse("").join("");/* The first nibble can't have the left-most bit set because we are deailing with signed 64bit numbers. *//* introducing timestamp for more randomization */// TODO Extract this portion into a separate function.
  if(1==b){for(c+="ABCDEF",f=0;16>f;f++)g=Math.floor(Math.random()*h),4>f&&l[f]<h&&(g=+l[f]),d+=c.substring(g,g+1),g=Math.floor(Math.random()*h),e+=c.substring(g,g+1),h=16;return d+"-"+e}/*
       * We're dealing with 2 signed, but positive, 64bit numbers so the max for high and low is:
       * 9222372036854775807
       *    ^---------------- The 4th digit could actually be a 3 if we wanted to add more max checks
       *                      but we set the max to 2 to avoid them
       */for(f=0;19>f;f++)g=Math.floor(Math.random()*i),6>f&&l[f]<i?(d+=l[f],g=l[f]):d+=c.substring(g,g+1),0===f&&9==g?i=3:(1==f||2==f)&&10!=i&&2>g?i=10:2<f&&(i=10),g=Math.floor(Math.random()*j),e+=c.substring(g,g+1),0===f&&9==g?j=3:(1==f||2==f)&&10!=j&&2>g?j=10:2<f&&(j=10);// console.log("abc", high + low, `${high}-${low}`);
  return d+e};

  var AuthState={UNKNOWN:0,AUTHENTICATED:1,LOGGED_OUT:2};

  /*************************************************************************
  * ADOBE CONFIDENTIAL
  * ___________________
  *
  *  Copyright 2016 Adobe Systems Incorporated
  *  All Rights Reserved.
  *
  * NOTICE:  All information contained herein is, and remains
  * the property of Adobe Systems Incorporated and its suppliers,
  * if any.  The intellectual and technical concepts contained
  * herein are proprietary to Adobe Systems Incorporated and its
  * suppliers and are protected by all applicable intellectual property 
  * laws, including trade secret and copyright laws.
  * Dissemination of this information or reproduction of this material
  * is strictly forbidden unless prior written permission is obtained
  * from Adobe Systems Incorporated.
  **************************************************************************/function generateSDID(){return generateRandomID(1)}// This factory will generate a SupplementalDataID object that exposes 2 methods:
  // - getID: Main method that generates/retrieves a supplemental data ID.
  // - getState: Returns the internal state of the object.
  var supplementalDataIDFactory=function(b){b=b||{};var c=b.supplementalDataIDCurrent,d=b.supplementalDataIDCurrentConsumed||{},e=b.supplementalDataIDLast,f=b.supplementalDataIDLastConsumed||{};return {getID:function(h,i){c||i||(c=generateSDID());// Default to using the current supplemental-data ID
  var j=c;// If we have the last supplemental-data ID that has not been consumed by this consumer...
  return e&&!f[h]?(j=e,f[h]=!0):j&&(d[h]&&(e=c,f=d,c=j=i?"":generateSDID(),d={}),j&&(d[h]=!0)),j},getState:function(){return {supplementalDataIDCurrent:c,supplementalDataIDCurrentConsumed:d,supplementalDataIDLast:e,supplementalDataIDLastConsumed:f}}}};

  /*************************************************************************
  * ADOBE CONFIDENTIAL
  * ___________________
  *
  *  Copyright 2016 Adobe Systems Incorporated
  *  All Rights Reserved.
  *
  * NOTICE:  All information contained herein is, and remains
  * the property of Adobe Systems Incorporated and its suppliers,
  * if any.  The intellectual and technical concepts contained
  * herein are proprietary to Adobe Systems Incorporated and its
  * suppliers and are protected by all applicable intellectual property 
  * laws, including trade secret and copyright laws.
  * Dissemination of this information or reproduction of this material
  * is strictly forbidden unless prior written permission is obtained
  * from Adobe Systems Incorporated.
  **************************************************************************/var lib={generateMCID:generateRandomID,generateSupplementalID:function(){return generateRandomID(1)},AuthState:AuthState,supplementalDataIDFactory:supplementalDataIDFactory};

  var amcvCookie_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports,"__esModule",{value:!0});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!(i&&_arr.length===i));_n=!0);}catch(err){_d=!0,_e=err;}finally{try{!_n&&_i["return"]&&_i["return"]();}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr))return sliceIterator(arr,i);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),_extends=Object.assign||function(target){for(var source,i=1;i<arguments.length;i++)for(var key in source=arguments[i],source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key]);return target};/*************************************************************************
  * ADOBE CONFIDENTIAL
  * ___________________
  *
  *  Copyright 2016 Adobe Systems Incorporated
  *  All Rights Reserved.
  *
  * NOTICE:  All information contained herein is, and remains
  * the property of Adobe Systems Incorporated and its suppliers,
  * if any.  The intellectual and technical concepts contained
  * herein are proprietary to Adobe Systems Incorporated and its
  * suppliers and are protected by all applicable intellectual property 
  * laws, including trade secret and copyright laws.
  * Dissemination of this information or reproduction of this material
  * is strictly forbidden unless prior written permission is obtained
  * from Adobe Systems Incorporated.
  **************************************************************************//*

  AMCV Cookie Format:

  - The cookie starts with a settings digest followed by a | that is a hash of key settings.
      If the settings of the Visitor instance do not match the hash all fields that can expire are force expired
      so they will be resynced.

  - The rest of the cookie is made up of KEY[-EXPIRATION]|VALUE pairs
    . The KEY will be one of the following fields: MCMID, MCCIDH, MCSYNCS, MCIDTS, MCOPTOUT, MCAID, MCAAMLH and MCAAMB.
    . The -EXPIRATION is optional for each field and if present after the - will be the timestamp for when that field expires.
      The expiration timestamp can also be followed by a "S" flagging that field to also expire 
      on a new browser session detected by the presence of the AMCVS_ session cookie.

  */// Parse into: { settingsDigest: { value: 3213, expire: 0, shouldExpireOnSession: false, hasExpired: false... }}
  function isSettingsDigest(a){return a.match(/^[\-0-9]+$/)}function parseSettingsDigest(a){var b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:{};if(isSettingsDigest(a[0])){var c={value:a[0],hasExpired:!1,shouldExpireOnSession:!1,expire:0};b.settingsDigest=c,a.shift(),1==a.length%2&&a.pop();}return b}function makeAmcvEntry(a){var b=new Date;return _extends({},a,{hasExpired:!!(0<a.expire&&b.getTime()>=1000*a.expire)})}var amcvCookie={pickValues:function pickValues(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:[],c=amcvCookie.parse(a);return b.reduce(function(d,e){var f=c[e];return f&&(d[e]=f.value),d},{})},parse:function parse(a){if(!a||"T"===a)return {};for(var b=decodeURIComponent(a).split("|"),c=parseSettingsDigest(b),d=0,e=b.length;d<e;d+=2){var _b$d$split=b[d].split("-"),_b$d$split2=_slicedToArray(_b$d$split,2),f=_b$d$split2[0],_b$d$split2$=_b$d$split2[1],g=_b$d$split2$===void 0?0:_b$d$split2$,h=b[d+1],j=!!(g&&g.includes("s")),k=g?parseInt(g,10):g;c[f]=makeAmcvEntry({value:h,expire:k,shouldExpireOnSession:j});}return c}};exports.default=amcvCookie;module.exports=exports["default"];
  });

  unwrapExports(amcvCookie_1);

  var Visitor_1 = createCommonjsModule(function (module, exports) {
  Object.defineProperty(exports,"__esModule",{value:!0});function _defineProperty(obj,key,value){return key in obj?Object.defineProperty(obj,key,{value:value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}/*************************************************************************
  * ADOBE CONFIDENTIAL
  * ___________________
  *
  *  Copyright 2016 Adobe Systems Incorporated
  *  All Rights Reserved.
  *
  * NOTICE:  All information contained herein is, and remains
  * the property of Adobe Systems Incorporated and its suppliers,
  * if any.  The intellectual and technical concepts contained
  * herein are proprietary to Adobe Systems Incorporated and its
  * suppliers and are protected by all applicable intellectual property 
  * laws, including trade secret and copyright laws.
  * Dissemination of this information or reproduction of this material
  * is strictly forbidden unless prior written permission is obtained
  * from Adobe Systems Incorporated.
  **************************************************************************/var CONSUMER_ID_BASE="payload:",AMCV_PREFIX="AMCV_",ORG_ID_REQUIRED="Org ID is required",CONSUMER_ID_REQUIRED="Consumer ID is required",ADOBE_MC_SDID="adobe_mc_sdid",SDID_PARAM_EXPIRY=30,throwError=function throwError(a){throw new Error(a)},normalizeOrgId=function normalizeOrgId(a){return 0>a.indexOf("@")?a+"@AdobeOrg":a};function Visitor(){var a=0<arguments.length&&void 0!==arguments[0]?arguments[0]:throwError(ORG_ID_REQUIRED),b=1<arguments.length&&void 0!==arguments[1]?arguments[1]:null,c={},d=normalizeOrgId(a),e=function e(l){return c=Object.assign({},c,l)},f=(0, lib.supplementalDataIDFactory)(),g=function g(l,m){var n=new RegExp("[\\?&#]"+m+"=([^&#]*)"),o=n.exec(l);if(o&&o.length)return decodeURIComponent(o[1])},h=function h(l){// Parse '|' delimited k=v pairs into an object.
  var m=l.split("|");return m.reduce(function(n,o){var p=o.split("=");return n[p[0]]=decodeURIComponent(p[1]),n},{})},i=function i(){return Math.round(new Date().getTime()/1000)},k=function(j){return function(r){var s=r||commonjsGlobal.location.href;try{var t=g(s,j);if(t)return h(t)}catch(u){// Fail silently.
  }}}(ADOBE_MC_SDID);this.getVisitorValues=function(){return b?(0, amcvCookie_1.pickValues)(b,["MCMID","MCAAMB","MCAAMLH"]):{}},this.getSupplementalDataID=function(){var l=0<arguments.length&&void 0!==arguments[0]?arguments[0]:throwError(CONSUMER_ID_REQUIRED),m=f.getID(""+CONSUMER_ID_BASE+l),n=f.getState();return e({sdid:n}),m},this.attemptToPopulateSdidFromUrl=function(l){var m=k(l),n=1000000000,o=f.getState();// expired
  m&&m.TS&&(n=i()-m.TS),m&&m.SDID&&m.MCORGID===d&&n<SDID_PARAM_EXPIRY&&(o.supplementalDataIDCurrent=m.SDID,o.supplementalDataIDCurrentConsumed.SDID_URL_PARAM=!0,e({sdid:o}));},this.setCustomerIDs=function(){var l=0<arguments.length&&void 0!==arguments[0]?arguments[0]:{};e({customerIDs:l});},this.getState=function(){return _defineProperty({},d,c)},this.getCookieName=function(){return AMCV_PREFIX+d};}Visitor.AuthState=lib.AuthState;exports.default=Visitor;module.exports=exports["default"];
  });

  var Visitor = unwrapExports(Visitor_1);

  const Messages = {
    ERROR_MAX_RETRY: (numRetries, errString) => `Unable to retrieve artifact after ${numRetries} retries: ${errString}`,
    ARTIFACT_NOT_AVAILABLE: "The decisioning artifact is not available",
    ARTIFACT_VERSION_UNSUPPORTED: (artifactVersion, supportedMajorVersion) => `The decisioning artifact version (${artifactVersion}) is not supported. This library is compatible with this major version: ${supportedMajorVersion}`,
    ARTIFACT_FETCH_ERROR: reason => `Failed to retrieve artifact: ${reason}`,
    ARTIFACT_INVALID: "Invalid Artifact",
    INVALID_ENVIRONMENT: (expectedEnvironment, defaultEnvironment) => `'${expectedEnvironment}' is not a valid target environment, defaulting to '${defaultEnvironment}'.`,
    NOT_APPLICABLE: "Not Applicable",
    ARTIFACT_OBFUSCATION_ERROR: "Unable to read artifact JSON",
    UNKNOWN: "unknown"
  };

  const DEFAULT_POLLING_INTERVAL = 300000; // five minutes (in milliseconds)

  const MINIMUM_POLLING_INTERVAL = 300000; // five minutes (in milliseconds)

  const NUM_FETCH_RETRIES = 10;
  const SUPPORTED_ARTIFACT_MAJOR_VERSION = 1;
  const SUPPORTED_ARTIFACT_OBFUSCATION_VERSION = 1;
  const REGEX_ARTIFACT_FILENAME_BINARY = /.+\.bin$/i;
  const ARTIFACT_FORMAT_BINARY = "bin";
  const ARTIFACT_FORMAT_JSON = "json";
  const ARTIFACT_FORMAT_DEFAULT = ARTIFACT_FORMAT_JSON;
  const ARTIFACT_FORMATS = [ARTIFACT_FORMAT_BINARY, ARTIFACT_FORMAT_JSON];
  const ARTIFACT_FILENAME = {};
  ARTIFACT_FILENAME[ARTIFACT_FORMAT_BINARY] = "rules.bin";
  ARTIFACT_FILENAME[ARTIFACT_FORMAT_JSON] = "rules.json";
  const LOG_PREFIX = "LD";
  const CDN_BASE_PATH = "assets.adobetarget.com";
  const HTTP_HEADER_FORWARDED_FOR = "x-forwarded-for";
  const HTTP_HEADER_GEO_LATITUDE = "x-geo-latitude";
  const HTTP_HEADER_GEO_LONGITUDE = "x-geo-longitude";
  const HTTP_HEADER_GEO_COUNTRY = "x-geo-country-code";
  const HTTP_HEADER_GEO_REGION = "x-geo-region-code";
  const HTTP_HEADER_GEO_CITY = "x-geo-city";
  const CAMPAIGN_BUCKET_SALT = "0"; // Response token keys

  const AUDIENCE_IDS = "audience.ids";
  const ACTIVITY_DECISIONING_METHOD = "activity.decisioningMethod";
  const ACTIVITY_ID = "activity.id";
  const ACTIVITY_NAME = "activity.name";
  const ACTIVITY_TYPE = "activity.type";
  const EXPERIENCE_ID = "experience.id";
  const EXPERIENCE_NAME = "experience.name";
  const LOCATION_ID = "location.id";
  const LOCATION_NAME = "location.name";
  const LOCATION_TYPE = "location.type";
  const OFFER_ID = "offer.id";
  const OFFER_NAME = "offer.name";
  const OPTION_ID = "option.id";
  const OPTION_NAME = "option.name";
  const GEO_CITY = "geo.city";
  const GEO_COUNTRY = "geo.country";
  const GEO_STATE = "geo.state";
  const GEO_LATITUDE = "geo.latitude";
  const GEO_LONGITUDE = "geo.longitude";

  /**
   *
   * @param {import("../types/DecisioningArtifact").Rule} rule
   * @return {string}
   */

  function getRuleKey(rule) {
    return rule.ruleKey;
  }
  /**
   * @param {string} host
   * @returns {import("../types/DecisioningContext").DomainContext}
   */

  function parseDomainBasic(host) {
    const result = {};
    const domainParts = host.split(".");

    switch (domainParts.length) {
      case 1:
        result.subdomain = "";
        result.domain = host;
        result.topLevelDomain = "";
        break;

      case 2:
        result.subdomain = "";
        result.domain = host;
        result.topLevelDomain = domainParts[1];
        break;

      case 3:
        result.subdomain = domainParts[0] === "www" ? "" : domainParts[0];
        result.domain = host;
        result.topLevelDomain = domainParts[2];
        break;

      case 4:
        result.subdomain = domainParts[0] === "www" ? "" : domainParts[0];
        result.domain = host;
        result.topLevelDomain = `${domainParts[2]}.${domainParts[3]}`;
        break;
    }

    return result;
  }
  /**
   *
   * @param {string} url
   * @param { import("../types/DecisioningContext").ParseDomainFunc } parseDomain
   * @returns {{path: string, fragment: string, topLevelDomain?: string, query: string, domain?: string, subdomain?: string, url: string}}
   */

  function parseURL(url) {
    let parseDomain = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : parseDomainBasic;

    if (!isString(url)) {
      // eslint-disable-next-line no-param-reassign
      url = "";
    }

    const parsed = src(url) || {};
    const {
      host = "",
      path = "",
      query = "",
      anchor = ""
    } = parsed;
    return _objectSpread2({
      url,
      path,
      query,
      fragment: anchor
    }, parseDomain(host));
  }
  /**
   *
   * @param {import("../types/DecisioningConfig").DecisioningConfig} config
   * @returns {import("../types/DecisioningContext").ParseDomainFunc}
   */

  function getParseDomainImpl(config) {
    return isFunction(config.parseDomainImpl) ? config.parseDomainImpl : parseDomainBasic;
  }
  /**
   * @param { import("../types/DecisioningArtifact").DecisioningArtifact } artifact
   * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest} request
   */

  function hasRemoteDependency(artifact, request) {
    // TODO: memoize this
    if (isUndefined(artifact)) {
      throw new Error(Messages.ARTIFACT_NOT_AVAILABLE);
    }

    const requestedMboxes = Array.from(getMboxNames(request));

    if (request.execute && isPojo(request.execute.pageLoad) || request.prefetch && isPojo(request.prefetch.pageLoad)) {
      requestedMboxes.push(DEFAULT_GLOBAL_MBOX);
    }

    const requestedViews = Array.from(getViewNames(request));
    const {
      remoteMboxes = [],
      localMboxes = [],
      remoteViews = [],
      localViews = []
    } = artifact;
    const mboxesThatRequireRemote = new Set([...remoteMboxes.filter(mboxName => includes(mboxName, requestedMboxes)), ...requestedMboxes.filter(mboxName => !includes(mboxName, localMboxes))]);
    const viewsThatRequireRemote = hasRequestedViews(request) && requestedViews.length === 0 ? new Set(remoteViews) : new Set([...remoteViews.filter(viewName => includes(viewName, requestedViews)), ...requestedViews.filter(viewName => !includes(viewName, localViews))]);
    return {
      remoteNeeded: mboxesThatRequireRemote.size > 0 || viewsThatRequireRemote.size > 0,
      remoteMboxes: Array.from(mboxesThatRequireRemote),
      remoteViews: Array.from(viewsThatRequireRemote)
    };
  }
  /**
   * @param { string } semanticVersion
   * @param { number } majorVersion
   */

  function matchMajorVersion(semanticVersion, majorVersion) {
    // eslint-disable-next-line no-unused-vars
    const [major, minor, patch] = semanticVersion.split(".").map(value => parseInt(value, 10));
    return majorVersion === major;
  }
  function cloneDeep(obj) {
    if (isDefined(obj)) {
      return JSON.parse(JSON.stringify(obj));
    }

    return undefined;
  }
  function getArtifactFileName() {
    let artifactFormat = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ARTIFACT_FORMAT_DEFAULT;
    // eslint-disable-next-line no-param-reassign
    artifactFormat = includes(artifactFormat, ARTIFACT_FORMATS) ? artifactFormat : ARTIFACT_FORMAT_DEFAULT;
    return ARTIFACT_FILENAME[artifactFormat];
  }
  /**
   * @param {import("../types/DecisioningConfig").DecisioningConfig} config Options map, required
   * @param {Boolean} addPropertyToken
   */

  function determineArtifactLocation(config) {
    const {
      client,
      propertyToken,
      artifactFormat,
      artifactLocation
    } = config;

    if (isString(artifactLocation)) {
      return artifactLocation;
    }

    const cdnBaseUrl = `https://${CDN_BASE_PATH}`;
    const targetEnvironment = config.environment ? config.environment.toLowerCase() : ENVIRONMENT_PROD;
    return [cdnBaseUrl, client, targetEnvironment, `v${SUPPORTED_ARTIFACT_MAJOR_VERSION}`, isDefined(propertyToken) ? propertyToken : undefined, getArtifactFileName(artifactFormat)].filter(value => isDefined(value)).join("/");
  }
  /**
   *
   * @param {string} artifactLocation
   */

  function determineArtifactFormat(artifactLocation) {
    return artifactLocation.match(REGEX_ARTIFACT_FILENAME_BINARY) != null ? ARTIFACT_FORMAT_BINARY : ARTIFACT_FORMAT_JSON;
  }
  /**
   * firstMatch looks through a list of objects (in order) and returns a value from the first object that has a matching key
   * @param key
   * @param {Array<Object>} searchObjects
   * @param defaultValue
   */

  function firstMatch(key) {
    let searchObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    let defaultValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;

    for (let i = 0; i < searchObjects.length; i += 1) {
      const haystack = searchObjects[i];

      if (isObject(haystack) && isDefined(haystack[key])) {
        return haystack[key];
      }
    }

    return defaultValue;
  }
  /**
   * @param {object} object
   * @param { array<string> } keys
   * @param { object } value
   */

  function setNestedValue(object, keys, value) {
    let currentObj = object;

    for (let i = 0; i < keys.length - 1; i += 1) {
      currentObj[keys[i]] = currentObj[keys[i]] || {};
      currentObj = currentObj[keys[i]];
    }

    currentObj[keys[keys.length - 1]] = value;
  }
  /**
   * @param {string} key
   * @returns {boolean}
   */


  function isExpandableKey(key) {
    const keyLength = key.length;
    return includes(".", key) && !includes("..", key) && key[0] !== "." && key[keyLength - 1] !== ".";
  }
  /**
   * @param {object} object
   * @return {object} object
   */


  function unflatten(object) {
    const result = {};
    Object.keys(object).forEach(key => {
      if (isExpandableKey(key)) {
        setNestedValue(result, key.split("."), object[key]);
      } else {
        result[key] = object[key];
      }
    });
    return result;
  }

  /**
   * @type { import("@adobe/target-tools/delivery-api-client/models/Context").Context }
   */

  const EMPTY_CONTEXT = {
    channel: ChannelType.Web
  };

  function getLowerCaseAttributes(obj) {
    const result = {};
    Object.keys(obj).forEach(key => {
      result[`${key}_lc`] = isString(obj[key]) ? obj[key].toLowerCase() : obj[key];
    });
    return result;
  }

  function withLowerCaseStringValues(obj) {
    const result = _objectSpread2({}, obj);

    Object.keys(obj).forEach(key => {
      if (isString(result[key])) {
        result[`${key}_lc`] = result[key].toLowerCase();
      }

      if (isPlainObject(obj[key])) {
        result[key] = withLowerCaseStringValues(result[key]);
      }
    });
    return result;
  }

  const BROWSER_PLATFORMS_MAPPING = {
    "Windows": "windows",
    "Macintosh": "mac",
    "Mac OS": "mac",
    "macOS": "mac",
    "Linux": "linux"
  };

  const toTargetPlatform = platform => isDefined(BROWSER_PLATFORMS_MAPPING[platform]) ? BROWSER_PLATFORMS_MAPPING[platform] : platform;
  /**
   * @param { import("@adobe/target-tools/delivery-api-client/models/Context").Context } context
   * @return { import("../types/DecisioningContext").UserContext }
   */


  function createBrowserContext(context) {
    const {
      userAgent = "",
      clientHints
    } = context;
    const browser = browserFromUserAgentOrClientHintUA(userAgent, clientHints);
    const platform = operatingSystemFromUserAgentOrClientHints(userAgent, clientHints);
    return {
      browserType: browser.name.toLowerCase(),
      platform: toTargetPlatform(platform),
      locale: "en",
      // TODO: determine where this comes from
      browserVersion: browser.version
    };
  }
  /**
   * @param { string } url
   * @param { import("../types/DecisioningContext").ParseDomainFunc } parseDomainImpl
   * @return { import("../types/DecisioningContext").PageContext }
   */


  function createUrlContext(url, parseDomainImpl) {
    if (!url || !isString(url)) {
      // eslint-disable-next-line no-param-reassign
      url = "";
    }

    const urlAttributes = parseURL(url, parseDomainImpl);
    return _objectSpread2(_objectSpread2({}, urlAttributes), getLowerCaseAttributes(urlAttributes));
  }
  /**
   * @param { import("@adobe/target-tools/delivery-api-client/models/Address").Address } address
   * @param { import("../types/DecisioningContext").ParseDomainFunc } parseDomainImpl
   * @return { import("../types/DecisioningContext").PageContext }
   */


  function createPageContext(address, parseDomainImpl) {
    return createUrlContext(address ? address.url : "", parseDomainImpl);
  }
  /**
   * @param { import("@adobe/target-tools/delivery-api-client/models/Address").Address } address
   * @param { import("../types/DecisioningContext").ParseDomainFunc } parseDomainImpl
   * @return { import("../types/DecisioningContext").PageContext }
   */

  function createReferringContext(address, parseDomainImpl) {
    return createUrlContext(address ? address.referringUrl : "", parseDomainImpl);
  }
  /**
   * @param { import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest } mboxRequest
   * @return { import("../types/DecisioningContext").MboxContext }
   */

  function createMboxContext(mboxRequest) {
    if (!mboxRequest) {
      return {};
    }

    const parameters = mboxRequest.parameters || {};
    return withLowerCaseStringValues(_objectSpread2({}, unflatten(parameters)));
  }
  /**
   * @param { import("@adobe/target-tools/delivery-api-client/models/Geo").Geo } geoContext
   * @return { import("../types/DecisioningContext").GeoContext}
   */

  function createGeoContext() {
    let geoContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return {
      country: geoContext.countryCode,
      region: geoContext.stateCode,
      city: geoContext.city,
      latitude: geoContext.latitude,
      longitude: geoContext.longitude
    };
  }

  function createTimingContext() {
    const now = new Date();

    const twoDigitString = value => value < 10 ? `0${value}` : String(value);

    const currentHours = twoDigitString(now.getUTCHours());
    const currentMinutes = twoDigitString(now.getUTCMinutes());
    const currentTime = `${currentHours}${currentMinutes}`;
    const currentDay = now.getUTCDay(); // 0 for Sunday, 1 for Monday, 2 for Tuesday, and so on.

    return {
      current_timestamp: now.getTime(),
      // in ms
      current_time: currentTime,
      // 24-hour time, UTC, HHmm
      current_day: currentDay === 0 ? 7 : currentDay // 1-7, 1 = monday, 7 = sunday

    };
  }
  /**
   *
   * The TargetDecisioningEngine initialize method
   * @param { import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest } deliveryRequest
   * @param { import("../types/DecisioningContext").ParseDomainFunc} parseDomainImpl
   * @return { import("../types/DecisioningContext").DecisioningContext }
   */


  function createDecisioningContext(deliveryRequest, parseDomainImpl) {
    const {
      context = EMPTY_CONTEXT
    } = deliveryRequest;
    return _objectSpread2(_objectSpread2({}, createTimingContext()), {}, {
      user: createBrowserContext(context),
      page: createPageContext(context.address, parseDomainImpl),
      referring: createReferringContext(context.address, parseDomainImpl),
      geo: createGeoContext(context.geo || {})
    });
  }

  /* eslint-disable import/prefer-default-export */
  const ARTIFACT_DOWNLOAD_SUCCEEDED = "artifactDownloadSucceeded";
  const ARTIFACT_DOWNLOAD_FAILED = "artifactDownloadFailed";
  const GEO_LOCATION_UPDATED = "geoLocationUpdated";
  const SEND_NOTIFICATION_ERROR = "sendNotificationError";

  const LOG_TAG = `${LOG_PREFIX}.NotificationProvider`;
  /**
   * The get NotificationProvider initialize method
   * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest} request Target View Delivery API request, required
   * @param visitor VisitorId instance, required
   * @param { Object } logger
   * @param {function} sendNotificationFunc function used to send the notification, required
   * @param telemetryEnabled
   * @param eventEmitter
   */

  function NotificationProvider(request, visitor, logger) {
    let sendNotificationFunc = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : noopPromise;
    let telemetryEnabled = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;
    let eventEmitter = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : noop;
    const timestamp = now();
    const prevEventKeys = new Set();
    let notifications = [];
    /**
     * The get NotificationProvider initialize method
     * @param {import("@adobe/target-tools/delivery-api-client/models/MboxResponse").MboxResponse} mbox
     * @param { Function } traceFn
     */

    function addNotification(mbox) {
      let traceFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
      const displayTokens = [];
      mbox.options.forEach(option => {
        const {
          eventToken
        } = option;
        const eventKey = `${mbox.name}-${eventToken}`;

        if (isDefined(eventToken) && !prevEventKeys.has(eventKey)) {
          displayTokens.push(eventToken);
          prevEventKeys.add(eventKey);
        }
      });

      if (displayTokens.length === 0) {
        return;
      }

      const notification = {
        id: uuid(),
        impressionId: uuid(),
        timestamp,
        type: MetricType.Display,
        mbox: {
          name: mbox.name
        },
        tokens: displayTokens
      };

      if (isFunction(traceFn)) {
        traceFn(notification);
      }

      notifications.push(notification);
    }

    function sendNotifications() {
      logger.debug(`${LOG_TAG}.sendNotifications`, notifications);

      if (notifications.length > 0 || telemetryEnabled) {
        const {
          id,
          context,
          experienceCloud
        } = request;
        const notification = {
          request: {
            id,
            context,
            experienceCloud
          },
          visitor
        };

        if (notifications.length > 0) {
          notification.request.notifications = notifications;
        }

        setTimeout(() => {
          sendNotificationFunc.call(null, notification).catch(error => {
            eventEmitter(SEND_NOTIFICATION_ERROR, {
              notification,
              error
            });
          });
        }, 0);
        notifications = [];
      }
    }

    return {
      addNotification,
      sendNotifications
    };
  }

  const byOrder = (a, b) => a.order - b.order;
  /**
   * @param {import("../types/DecisioningConfig").DecisioningConfig} config Options map, required
   * @param {import("../types/TargetDeliveryRequest").TargetDeliveryRequest} targetOptions
   * @param { object } artifactTrace
   */


  function TraceProvider(config, targetOptions, artifactTrace) {
    const clientCode = config.client;
    const {
      sessionId,
      request
    } = targetOptions;
    const showTraces = isDefined(request.trace);
    const [tntId, profileLocation] = isDefined(request.id) && isString(request.id.tntId) ? request.id.tntId.split(".") : [undefined, undefined];
    const profile = {
      visitorId: _objectSpread2(_objectSpread2({}, request.id), {}, {
        tntId,
        profileLocation
      })
    };

    function wrap(traceResult) {
      if (!showTraces) {
        return undefined;
      }

      return {
        clientCode,
        artifact: artifactTrace,
        profile,
        request: _objectSpread2({
          sessionId
        }, traceResult.request),
        campaigns: traceResult.campaigns,
        evaluatedCampaignTargets: traceResult.evaluatedCampaignTargets
      };
    }

    return {
      wrap
    };
  }
  /**
   * @param traceProvider
   * @param { import("../types/DecisioningArtifact").DecisioningArtifact } artifact
   */

  function RequestTracer(traceProvider, artifact) {
    let request = {}; // add to as rules are evaluated

    const campaigns = {};
    let campaignOrder = 0;
    const evaluatedCampaignTargets = {};
    let evaluatedCampaignTargetOrder = 0;
    /**
     *
     * @param { 'execute'|'prefetch' } mode
     * @param { 'mbox'|'view'|'pageLoad' } requestType
     * @param mboxRequest
     * @param context
     */

    function traceRequest(mode, requestType, mboxRequest, context) {
      request = {
        pageURL: context.page.url,
        host: context.page.domain
      };
      request[requestType] = _objectSpread2(_objectSpread2({}, mboxRequest), {}, {
        type: mode
      });
    }
    /**
     *
     * @param {import("../types/DecisioningArtifact").Rule} rule
     * @param { Boolean } ruleSatisfied
     */


    function addCampaign(rule, ruleSatisfied) {
      const {
        meta
      } = rule;
      const activityId = meta[ACTIVITY_ID];

      if (ruleSatisfied && isUndefined(campaigns[activityId])) {
        campaignOrder += 1;
        campaigns[activityId] = {
          id: activityId,
          order: campaignOrder,
          campaignType: meta[ACTIVITY_TYPE],
          branchId: meta[EXPERIENCE_ID],
          offers: isDefined(meta[OFFER_ID]) ? [meta[OFFER_ID]] : [],
          environment: artifact.meta.environment
        };
      }
    }
    /**
     *
     * @param {import("../types/DecisioningArtifact").Rule} rule
     * @param { import("../types/DecisioningContext").DecisioningContext } ruleContext
     * @param { Boolean } ruleSatisfied
     */


    function addEvaluatedCampaignTarget(rule, ruleContext, ruleSatisfied) {
      const {
        meta
      } = rule;
      const audienceIds = meta[AUDIENCE_IDS];
      const activityId = meta[ACTIVITY_ID];

      if (isUndefined(evaluatedCampaignTargets[activityId])) {
        evaluatedCampaignTargetOrder += 1;
        evaluatedCampaignTargets[activityId] = {
          order: evaluatedCampaignTargetOrder,
          context: ruleContext,
          campaignId: activityId,
          campaignType: meta[ACTIVITY_TYPE],
          matchedSegmentIds: new Set(),
          unmatchedSegmentIds: new Set(),
          matchedRuleConditions: [],
          unmatchedRuleConditions: []
        };
      }

      audienceIds.forEach(audienceId => {
        evaluatedCampaignTargets[activityId][ruleSatisfied ? "matchedSegmentIds" : "unmatchedSegmentIds"].add(audienceId);
      });
      evaluatedCampaignTargets[activityId][ruleSatisfied ? "matchedRuleConditions" : "unmatchedRuleConditions"].push(rule.condition);
    }
    /**
     * @param {import("../types/DecisioningArtifact").Rule} rule
     * @param { import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest|import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails } mboxRequest
     * @param { 'mbox'|'view'|'pageLoad' } requestType
     * @param { import("../types/DecisioningContext").DecisioningContext } ruleContext
     * @param { Boolean } ruleSatisfied
     */


    function traceRuleEvaluated(rule, mboxRequest, requestType, ruleContext, ruleSatisfied) {
      addCampaign(rule, ruleSatisfied);
      addEvaluatedCampaignTarget(rule, ruleContext, ruleSatisfied);
    }
    /**
     *
     * @param {import("../types/DecisioningArtifact").Rule} rule
     */


    function traceNotification(rule) {
      const {
        meta
      } = rule;
      const activityId = meta[ACTIVITY_ID];

      if (!(campaigns[activityId].notifications instanceof Array)) {
        campaigns[activityId].notifications = [];
      }

      return notification => {
        campaigns[activityId].notifications.push(notification);
      };
    }

    function toJSON() {
      return {
        campaigns: values(campaigns).sort(byOrder).map(campaign => {
          const result = _objectSpread2({}, campaign);

          delete result.order;
          return result;
        }),
        evaluatedCampaignTargets: values(evaluatedCampaignTargets).sort(byOrder).map(evaluatedCampaignTarget => {
          const result = _objectSpread2(_objectSpread2({}, evaluatedCampaignTarget), {}, {
            matchedSegmentIds: [...evaluatedCampaignTarget.matchedSegmentIds],
            unmatchedSegmentIds: [...evaluatedCampaignTarget.unmatchedSegmentIds]
          });

          delete result.order;
          return result;
        }),
        request
      };
    }

    function getTraceResult() {
      return traceProvider.wrap(toJSON());
    }

    return {
      toJSON,
      traceRuleEvaluated,
      traceRequest,
      traceNotification,
      getTraceResult
    };
  }
  /**
   *
   * @param {string} artifactLocation
   * @param {import("../types/DecisioningArtifact").DecisioningArtifact} artifactPayload
   * @param {number} pollingInterval
   * @param {boolean} pollingHalted
   * @param {import("../types/DecisioningArtifact").DecisioningArtifact} firstArtifact
   */

  function ArtifactTracer(artifactLocation, artifactPayload, pollingInterval, pollingHalted, firstArtifact) {
    let artifact = firstArtifact;
    let artifactRetrievalCount = 1;
    let artifactLastRetrieved = new Date();

    function provideNewArtifact(value) {
      artifactLastRetrieved = new Date();
      artifactRetrievalCount += 1;
      artifact = value;
    }

    const meta = isDefined(artifact) ? artifact.meta : {};

    function toJSON() {
      return _objectSpread2({
        artifactLocation: isObject(artifactPayload) ? Messages.NOT_APPLICABLE : artifactLocation,
        pollingInterval,
        pollingHalted,
        artifactVersion: isDefined(artifact) ? artifact.version : Messages.UNKNOWN,
        artifactRetrievalCount,
        artifactLastRetrieved: artifactLastRetrieved.toISOString()
      }, meta);
    }

    return {
      provideNewArtifact,
      toJSON
    };
  }

  /* eslint-disable import/prefer-default-export */
  const RequestType = {
    MBOX: "mbox",
    VIEW: "view",
    PAGELOAD: "pageLoad"
  };
  const OptionType = {
    Html: "html",
    Json: "json",
    Redirect: "redirect",
    Dynamic: "dynamic",
    Actions: "actions"
  };

  const MACRO_PATTERN_REGEX = /\$\{([a-zA-Z0-9_.]*?)\}/gi;
  const MACRO_NAME_REPLACEMENTS = {
    campaign: "activity",
    recipe: "experience"
  };
  const MACRO_NAME_REPLACEMENTS_REGEX = new RegExp(Object.keys(MACRO_NAME_REPLACEMENTS).join("|"), "gi");
  const MACRO_NAME_REMOVALS = ["mbox"];

  function noBlankOptions(option) {
    return !(isUndefined(option.type) && isUndefined(option.content));
  }
  /**
   * @param {import("../types/DecisioningArtifact").Rule} rule
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxResponse").MboxResponse} mboxResponse
   * @param { 'mbox'|'view'|'pageLoad' } requestType
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest|import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails} requestDetail
   * @param tracer
   */


  function prepareExecuteResponse(rule, mboxResponse, requestType, requestDetail, tracer) {
    const {
      metrics = [],
      options = []
    } = mboxResponse;

    const result = _objectSpread2(_objectSpread2({}, mboxResponse), {}, {
      options: options.filter(noBlankOptions).map(pristineOption => {
        const option = _objectSpread2({}, pristineOption);

        delete option.eventToken;
        return option;
      }),
      metrics: metrics.filter(metric => metric.type === MetricType.Click)
    });

    if (result.metrics.length === 0) {
      delete result.metrics;
    }

    return result;
  }
  /**
   * @param {import("../types/DecisioningArtifact").Rule} rule
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxResponse").MboxResponse} mboxResponse
   * @param { 'mbox'|'view'|'pageLoad' } requestType
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest|import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails} requestDetail
   * @param tracer
   */

  function preparePrefetchResponse(rule, mboxResponse, requestType, requestDetail, tracer) {
    const {
      options = []
    } = mboxResponse;

    const result = _objectSpread2(_objectSpread2({}, mboxResponse), {}, {
      options: options.map((pristineOption, idx) => {
        let {
          eventToken
        } = pristineOption;

        if (isUndefined(eventToken) && mboxResponse.metrics.length > idx && mboxResponse.metrics[idx].type === MetricType.Display) {
          // eslint-disable-next-line prefer-destructuring
          eventToken = mboxResponse.metrics[idx].eventToken;
        }

        return _objectSpread2(_objectSpread2({}, pristineOption), {}, {
          eventToken
        });
      })
    });

    if (requestType !== RequestType.VIEW) {
      delete result.metrics;
    }

    return result;
  }
  /**
   * @param {import("../types/DecisioningArtifact").Rule} rule
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxResponse").MboxResponse} mboxResponse
   * @param { 'mbox'|'view'|'pageLoad' } requestType
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest|import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails} requestDetail
   * @param tracer
   */

  function addTrace(rule, mboxResponse, requestType, requestDetail, tracer) {
    return _objectSpread2(_objectSpread2({}, mboxResponse), {}, {
      trace: tracer.getTraceResult()
    });
  }
  /**
   * @param {import("../types/DecisioningArtifact").Rule} rule
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxResponse").MboxResponse} mboxResponse
   * @param { 'mbox'|'view'|'pageLoad' } requestType
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest|import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails} requestDetail
   * @param tracer
   */

  function cleanUp(rule, mboxResponse, requestType, requestDetail, tracer) {
    const result = objectWithoutUndefinedValues(mboxResponse);
    return result;
  }
  /**
   * @param {import("../types/DecisioningArtifact").Rule} rule
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxResponse").MboxResponse} mboxResponse
   * @param { 'mbox'|'view'|'pageLoad' } requestType
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest|import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails} requestDetail
   * @param tracer
   */

  function removePageLoadAttributes(rule, mboxResponse, requestType, requestDetail, tracer) {
    const processed = _objectSpread2({}, mboxResponse);

    delete processed.index;
    delete processed.name;
    delete processed.trace;
    return processed;
  }
  /**
   * @param {import("../types/DecisioningContext").DecisioningContext} context
   * @param {Array<string>} responseTokensInArtifact
   */

  function createResponseTokensPostProcessor(context) {
    let responseTokensInArtifact = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    const responseTokens = {};
    responseTokens[ACTIVITY_DECISIONING_METHOD] = "on-device";

    if (includes(GEO_CITY, responseTokensInArtifact) && isDefined(context.geo.city)) {
      responseTokens[GEO_CITY] = context.geo.city;
    }

    if (includes(GEO_COUNTRY, responseTokensInArtifact) && isDefined(context.geo.country)) {
      responseTokens[GEO_COUNTRY] = context.geo.country;
    }

    if (includes(GEO_STATE, responseTokensInArtifact) && isDefined(context.geo.region)) {
      responseTokens[GEO_STATE] = context.geo.region;
    }

    if (includes(GEO_LATITUDE, responseTokensInArtifact) && isDefined(context.geo.latitude)) {
      responseTokens[GEO_LATITUDE] = context.geo.latitude;
    }

    if (includes(GEO_LONGITUDE, responseTokensInArtifact) && isDefined(context.geo.longitude)) {
      responseTokens[GEO_LONGITUDE] = context.geo.longitude;
    }
    /**
     * @param {import("../types/DecisioningArtifact").Rule} rule
     * @param {import("@adobe/target-tools/delivery-api-client/models/MboxResponse").MboxResponse} mboxResponse
     */


    return function addResponseTokens(rule, mboxResponse) {
      const meta = rule.meta || {};
      const responseTokensFromMeta = [ACTIVITY_ID, ACTIVITY_NAME, ACTIVITY_TYPE, EXPERIENCE_ID, EXPERIENCE_NAME, LOCATION_ID, LOCATION_NAME, LOCATION_TYPE, OFFER_ID, OFFER_NAME, OPTION_ID, OPTION_NAME].reduce((accumulator, key) => {
        if (includes(key, responseTokensInArtifact) && isDefined(meta[key])) {
          accumulator[key] = meta[key];
        }

        return accumulator;
      }, {});
      const options = mboxResponse.options.map(option => _objectSpread2(_objectSpread2({}, option), {}, {
        responseTokens: _objectSpread2(_objectSpread2({}, responseTokensFromMeta), responseTokens)
      }));
      return _objectSpread2(_objectSpread2({}, mboxResponse), {}, {
        options
      });
    };
  }
  /**
   * @param {import("../types/DecisioningArtifact").Rule} rule
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxResponse").MboxResponse} mboxResponse
   * @param { 'mbox'|'view'|'pageLoad' } requestType
   * @param {import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest|import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails} requestDetail
   * @param tracer
   */

  function replaceCampaignMacros(rule, mboxResponse, requestType, requestDetail, tracer) {
    function addCampainMacroValues(htmlContent) {
      if (isUndefined(htmlContent) || !isString(htmlContent)) {
        return htmlContent;
      }

      return htmlContent.replace(MACRO_PATTERN_REGEX, (defaultValue, macroKey) => {
        let parts = macroKey.replace(MACRO_NAME_REPLACEMENTS_REGEX, matched => MACRO_NAME_REPLACEMENTS[matched]).split(".");

        if (parts.length > 2) {
          parts = parts.slice(parts.length - 2);
        }

        const key = parts.filter(part => !includes(part, MACRO_NAME_REMOVALS)).join(".");
        const {
          parameters = {}
        } = requestDetail;
        return firstMatch(key, [rule.meta, requestDetail, parameters], defaultValue);
      });
    }

    return _objectSpread2(_objectSpread2({}, mboxResponse), {}, {
      options: mboxResponse.options.map(
      /**
       * @param {import("@adobe/target-tools/delivery-api-client/models/Option").Option} option
       */
      option => {
        if (option.type === OptionType.Html) {
          return _objectSpread2(_objectSpread2({}, option), {}, {
            content: addCampainMacroValues(option.content)
          });
        }

        if (option.type === OptionType.Actions) {
          return _objectSpread2(_objectSpread2({}, option), {}, {
            content: option.content.map(action => _objectSpread2(_objectSpread2({}, action), {}, {
              content: addCampainMacroValues(action.content)
            }))
          });
        }

        return option;
      })
    });
  }

  var logic = createCommonjsModule(function (module, exports) {

    (function (root, factory) {
      {
        module.exports = factory();
      }
    })(commonjsGlobal, function () {
      /* globals console:false */

      if (!Array.isArray) {
        Array.isArray = function (arg) {
          return Object.prototype.toString.call(arg) === "[object Array]";
        };
      }
      /**
       * Return an array that contains no duplicates (original not modified)
       * @param  {array} array   Original reference array
       * @return {array}         New array with no duplicates
       */


      function arrayUnique(array) {
        var a = [];

        for (var i = 0, l = array.length; i < l; i++) {
          if (a.indexOf(array[i]) === -1) {
            a.push(array[i]);
          }
        }

        return a;
      }

      var jsonLogic = {};
      var operations = {
        "==": function (a, b) {
          return a == b;
        },
        "===": function (a, b) {
          return a === b;
        },
        "!=": function (a, b) {
          return a != b;
        },
        "!==": function (a, b) {
          return a !== b;
        },
        ">": function (a, b) {
          return a > b;
        },
        ">=": function (a, b) {
          return a >= b;
        },
        "<": function (a, b, c) {
          return c === undefined ? a < b : a < b && b < c;
        },
        "<=": function (a, b, c) {
          return c === undefined ? a <= b : a <= b && b <= c;
        },
        "!!": function (a) {
          return jsonLogic.truthy(a);
        },
        "!": function (a) {
          return !jsonLogic.truthy(a);
        },
        "%": function (a, b) {
          return a % b;
        },
        "log": function (a) {
          console.log(a);
          return a;
        },
        "in": function (a, b) {
          if (!b || typeof b.indexOf === "undefined") return false;
          return b.indexOf(a) !== -1;
        },
        "cat": function () {
          return Array.prototype.join.call(arguments, "");
        },
        "substr": function (source, start, end) {
          if (end < 0) {
            // JavaScript doesn't support negative end, this emulates PHP behavior
            var temp = String(source).substr(start);
            return temp.substr(0, temp.length + end);
          }

          return String(source).substr(start, end);
        },
        "+": function () {
          return Array.prototype.reduce.call(arguments, function (a, b) {
            return parseFloat(a, 10) + parseFloat(b, 10);
          }, 0);
        },
        "*": function () {
          return Array.prototype.reduce.call(arguments, function (a, b) {
            return parseFloat(a, 10) * parseFloat(b, 10);
          });
        },
        "-": function (a, b) {
          if (b === undefined) {
            return -a;
          } else {
            return a - b;
          }
        },
        "/": function (a, b) {
          return a / b;
        },
        "min": function () {
          return Math.min.apply(this, arguments);
        },
        "max": function () {
          return Math.max.apply(this, arguments);
        },
        "merge": function () {
          return Array.prototype.reduce.call(arguments, function (a, b) {
            return a.concat(b);
          }, []);
        },
        "var": function (a, b) {
          var not_found = b === undefined ? null : b;
          var data = this;

          if (typeof a === "undefined" || a === "" || a === null) {
            return data;
          }

          var sub_props = String(a).split(".");

          for (var i = 0; i < sub_props.length; i++) {
            if (data === null || data === undefined) {
              return not_found;
            } // Descending into data


            data = data[sub_props[i]];

            if (data === undefined) {
              return not_found;
            }
          }

          return data;
        },
        "missing": function () {
          /*
          Missing can receive many keys as many arguments, like {"missing:[1,2]}
          Missing can also receive *one* argument that is an array of keys,
          which typically happens if it's actually acting on the output of another command
          (like 'if' or 'merge')
          */
          var missing = [];
          var keys = Array.isArray(arguments[0]) ? arguments[0] : arguments;

          for (var i = 0; i < keys.length; i++) {
            var key = keys[i];
            var value = jsonLogic.apply({
              "var": key
            }, this);

            if (value === null || value === "") {
              missing.push(key);
            }
          }

          return missing;
        },
        "missing_some": function (need_count, options) {
          // missing_some takes two arguments, how many (minimum) items must be present, and an array of keys (just like 'missing') to check for presence.
          var are_missing = jsonLogic.apply({
            "missing": options
          }, this);

          if (options.length - are_missing.length >= need_count) {
            return [];
          } else {
            return are_missing;
          }
        }
      };

      jsonLogic.is_logic = function (logic) {
        return typeof logic === "object" && // An object
        logic !== null && // but not null
        !Array.isArray(logic) && // and not an array
        Object.keys(logic).length === 1 // with exactly one key
        ;
      };
      /*
      This helper will defer to the JsonLogic spec as a tie-breaker when different language interpreters define different behavior for the truthiness of primitives.  E.g., PHP considers empty arrays to be falsy, but Javascript considers them to be truthy. JsonLogic, as an ecosystem, needs one consistent answer.
       Spec and rationale here: http://jsonlogic.com/truthy
      */


      jsonLogic.truthy = function (value) {
        if (Array.isArray(value) && value.length === 0) {
          return false;
        }

        return !!value;
      };

      jsonLogic.get_operator = function (logic) {
        return Object.keys(logic)[0];
      };

      jsonLogic.get_values = function (logic) {
        return logic[jsonLogic.get_operator(logic)];
      };

      jsonLogic.apply = function (logic, data) {
        // Does this array contain logic? Only one way to find out.
        if (Array.isArray(logic)) {
          return logic.map(function (l) {
            return jsonLogic.apply(l, data);
          });
        } // You've recursed to a primitive, stop!


        if (!jsonLogic.is_logic(logic)) {
          return logic;
        }

        var op = jsonLogic.get_operator(logic);
        var values = logic[op];
        var i;
        var current;
        var scopedLogic;
        var scopedData;
        var initial; // easy syntax for unary operators, like {"var" : "x"} instead of strict {"var" : ["x"]}

        if (!Array.isArray(values)) {
          values = [values];
        } // 'if', 'and', and 'or' violate the normal rule of depth-first calculating consequents, let each manage recursion as needed.


        if (op === "if" || op == "?:") {
          /* 'if' should be called with a odd number of parameters, 3 or greater
          This works on the pattern:
          if( 0 ){ 1 }else{ 2 };
          if( 0 ){ 1 }else if( 2 ){ 3 }else{ 4 };
          if( 0 ){ 1 }else if( 2 ){ 3 }else if( 4 ){ 5 }else{ 6 };
           The implementation is:
          For pairs of values (0,1 then 2,3 then 4,5 etc)
          If the first evaluates truthy, evaluate and return the second
          If the first evaluates falsy, jump to the next pair (e.g, 0,1 to 2,3)
          given one parameter, evaluate and return it. (it's an Else and all the If/ElseIf were false)
          given 0 parameters, return NULL (not great practice, but there was no Else)
          */
          for (i = 0; i < values.length - 1; i += 2) {
            if (jsonLogic.truthy(jsonLogic.apply(values[i], data))) {
              return jsonLogic.apply(values[i + 1], data);
            }
          }

          if (values.length === i + 1) {
            return jsonLogic.apply(values[i], data);
          }

          return null;
        } else if (op === "and") {
          // Return first falsy, or last
          for (i = 0; i < values.length; i += 1) {
            current = jsonLogic.apply(values[i], data);

            if (!jsonLogic.truthy(current)) {
              return current;
            }
          }

          return current; // Last
        } else if (op === "or") {
          // Return first truthy, or last
          for (i = 0; i < values.length; i += 1) {
            current = jsonLogic.apply(values[i], data);

            if (jsonLogic.truthy(current)) {
              return current;
            }
          }

          return current; // Last
        } else if (op === "filter") {
          scopedData = jsonLogic.apply(values[0], data);
          scopedLogic = values[1];

          if (!Array.isArray(scopedData)) {
            return [];
          } // Return only the elements from the array in the first argument,
          // that return truthy when passed to the logic in the second argument.
          // For parity with JavaScript, reindex the returned array


          return scopedData.filter(function (datum) {
            return jsonLogic.truthy(jsonLogic.apply(scopedLogic, datum));
          });
        } else if (op === "map") {
          scopedData = jsonLogic.apply(values[0], data);
          scopedLogic = values[1];

          if (!Array.isArray(scopedData)) {
            return [];
          }

          return scopedData.map(function (datum) {
            return jsonLogic.apply(scopedLogic, datum);
          });
        } else if (op === "reduce") {
          scopedData = jsonLogic.apply(values[0], data);
          scopedLogic = values[1];
          initial = typeof values[2] !== "undefined" ? values[2] : null;

          if (!Array.isArray(scopedData)) {
            return initial;
          }

          return scopedData.reduce(function (accumulator, current) {
            return jsonLogic.apply(scopedLogic, {
              current: current,
              accumulator: accumulator
            });
          }, initial);
        } else if (op === "all") {
          scopedData = jsonLogic.apply(values[0], data);
          scopedLogic = values[1]; // All of an empty set is false. Note, some and none have correct fallback after the for loop

          if (!Array.isArray(scopedData) || !scopedData.length) {
            return false;
          }

          for (i = 0; i < scopedData.length; i += 1) {
            if (!jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
              return false; // First falsy, short circuit
            }
          }

          return true; // All were truthy
        } else if (op === "none") {
          scopedData = jsonLogic.apply(values[0], data);
          scopedLogic = values[1];

          if (!Array.isArray(scopedData) || !scopedData.length) {
            return true;
          }

          for (i = 0; i < scopedData.length; i += 1) {
            if (jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
              return false; // First truthy, short circuit
            }
          }

          return true; // None were truthy
        } else if (op === "some") {
          scopedData = jsonLogic.apply(values[0], data);
          scopedLogic = values[1];

          if (!Array.isArray(scopedData) || !scopedData.length) {
            return false;
          }

          for (i = 0; i < scopedData.length; i += 1) {
            if (jsonLogic.truthy(jsonLogic.apply(scopedLogic, scopedData[i]))) {
              return true; // First truthy, short circuit
            }
          }

          return false; // None were truthy
        } // Everyone else gets immediate depth-first recursion


        values = values.map(function (val) {
          return jsonLogic.apply(val, data);
        }); // The operation is called with "data" bound to its "this" and "values" passed as arguments.
        // Structured commands like % or > can name formal arguments while flexible commands (like missing or merge) can operate on the pseudo-array arguments
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments

        if (operations.hasOwnProperty(op) && typeof operations[op] === "function") {
          return operations[op].apply(data, values);
        } else if (op.indexOf(".") > 0) {
          // Contains a dot, and not in the 0th position
          var sub_ops = String(op).split(".");
          var operation = operations;

          for (i = 0; i < sub_ops.length; i++) {
            if (!operation.hasOwnProperty(sub_ops[i])) {
              throw new Error("Unrecognized operation " + op + " (failed at " + sub_ops.slice(0, i + 1).join(".") + ")");
            } // Descending into operations


            operation = operation[sub_ops[i]];
          }

          return operation.apply(data, values);
        }

        throw new Error("Unrecognized operation " + op);
      };

      jsonLogic.uses_data = function (logic) {
        var collection = [];

        if (jsonLogic.is_logic(logic)) {
          var op = jsonLogic.get_operator(logic);
          var values = logic[op];

          if (!Array.isArray(values)) {
            values = [values];
          }

          if (op === "var") {
            // This doesn't cover the case where the arg to var is itself a rule.
            collection.push(values[0]);
          } else {
            // Recursion!
            values.forEach(function (val) {
              collection.push.apply(collection, jsonLogic.uses_data(val));
            });
          }
        }

        return arrayUnique(collection);
      };

      jsonLogic.add_operation = function (name, code) {
        operations[name] = code;
      };

      jsonLogic.rm_operation = function (name) {
        delete operations[name];
      };

      jsonLogic.rule_like = function (rule, pattern) {
        // console.log("Is ". JSON.stringify(rule) . " like " . JSON.stringify(pattern) . "?");
        if (pattern === rule) {
          return true;
        } // TODO : Deep object equivalency?


        if (pattern === "@") {
          return true;
        } // Wildcard!


        if (pattern === "number") {
          return typeof rule === "number";
        }

        if (pattern === "string") {
          return typeof rule === "string";
        }

        if (pattern === "array") {
          // !logic test might be superfluous in JavaScript
          return Array.isArray(rule) && !jsonLogic.is_logic(rule);
        }

        if (jsonLogic.is_logic(pattern)) {
          if (jsonLogic.is_logic(rule)) {
            var pattern_op = jsonLogic.get_operator(pattern);
            var rule_op = jsonLogic.get_operator(rule);

            if (pattern_op === "@" || pattern_op === rule_op) {
              // echo "\nOperators match, go deeper\n";
              return jsonLogic.rule_like(jsonLogic.get_values(rule, false), jsonLogic.get_values(pattern, false));
            }
          }

          return false; // pattern is logic, rule isn't, can't be eq
        }

        if (Array.isArray(pattern)) {
          if (Array.isArray(rule)) {
            if (pattern.length !== rule.length) {
              return false;
            }
            /*
              Note, array order MATTERS, because we're using this array test logic to consider arguments, where order can matter. (e.g., + is commutative, but '-' or 'if' or 'var' are NOT)
            */


            for (var i = 0; i < pattern.length; i += 1) {
              // If any fail, we fail
              if (!jsonLogic.rule_like(rule[i], pattern[i])) {
                return false;
              }
            }

            return true; // If they *all* passed, we pass
          } else {
            return false; // Pattern is array, rule isn't
          }
        } // Not logic, not array, not a === match for rule.


        return false;
      };

      return jsonLogic;
    });
  });

  const TOTAL_BUCKETS = 10000;
  const MAX_PERCENTAGE = 100;
  function validTntId() {
    let tntId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

    if (isString(tntId) && !isEmpty(tntId)) {
      // eslint-disable-next-line no-unused-vars
      const [id, locationHint] = tntId.split(".");
      return id;
    }

    return undefined;
  }
  /**
   *
   * @param { import("@adobe/target-tools/delivery-api-client/models/VisitorId").VisitorId } visitorId
   * @returns {string} first non-blank marketingCloudVisitorId, tntId, thirdPartyId
   */

  function getOrCreateVisitorId(visitorId) {
    if (visitorId) {
      return visitorId.marketingCloudVisitorId || validTntId(visitorId.tntId) || visitorId.thirdPartyId || uuid() // create a tntId
      ;
    }

    return uuid();
  }
  /**
   * @param deviceId
   * @returns {number}
   */

  function calculateAllocation(deviceId) {
    const signedNumericHashValue = hashUnencodedChars(deviceId);
    const hashFixedBucket = Math.abs(signedNumericHashValue) % TOTAL_BUCKETS;
    const allocationValue = hashFixedBucket / TOTAL_BUCKETS * MAX_PERCENTAGE;
    return Math.round(allocationValue * 100) / 100; // two decimal places
  }

  const calculateAllocationMemoized = memoize(calculateAllocation);
  /**
   *
   * @param {String} clientId Target Client Id, required
   * @param {number} activityId Target Activity Id, required
   * @param { import("@adobe/target-tools/delivery-api-client/models/VisitorId").VisitorId|String } visitorId
   * @param {String} salt salt value, optional
   */

  function computeAllocation(clientId, activityId, visitorId) {
    let salt = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : CAMPAIGN_BUCKET_SALT;
    // Generate a device id based on visitorId, clientCode, campaignId and a salt value
    const deviceId = [clientId, activityId, isString(visitorId) && !isEmpty(visitorId) ? visitorId : getOrCreateVisitorId(visitorId), salt].join(".");
    return calculateAllocationMemoized(deviceId);
  }

  /**
   *
   * @param { String } clientId
   * @param { import("@adobe/target-tools/delivery-api-client/models/VisitorId").VisitorId } visitorId
   * @param { import("../types/DecisioningContext").ParseDomainFunc} parseDomainImpl
   * @return { Function }
   */

  function ruleEvaluator(clientId, visitorId, parseDomainImpl) {
    const visitorIdString = getOrCreateVisitorId(visitorId);
    /**
     * @param {import("../types/DecisioningArtifact").Rule} rule
     * @param { import("../types/DecisioningContext").DecisioningContext } context
     * @param { 'mbox'|'view'|'pageLoad' } requestType
     * @param {import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest|import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails} requestDetail
     * @param { Array<Function> } postProcessors
     * @param tracer
     */

    return function processRule(rule, context, requestType, requestDetail, postProcessors, tracer) {
      let consequence;
      let {
        page,
        referring
      } = context;

      if (isDefined(requestDetail.address)) {
        page = createPageContext(requestDetail.address, parseDomainImpl) || page;
        referring = createPageContext(requestDetail.address, parseDomainImpl) || referring;
      }

      const ruleContext = _objectSpread2(_objectSpread2({}, context), {}, {
        page,
        referring,
        mbox: createMboxContext(requestDetail),
        allocation: computeAllocation(clientId, rule.meta[ACTIVITY_ID], visitorIdString)
      });

      const ruleSatisfied = logic.apply(rule.condition, ruleContext);
      tracer.traceRuleEvaluated(rule, requestDetail, requestType, ruleContext, ruleSatisfied);

      if (ruleSatisfied) {
        consequence = _objectSpread2(_objectSpread2({}, rule.consequence), {}, {
          index: requestDetail.index
        });
        postProcessors.forEach(postProcessFunc => {
          consequence = postProcessFunc(rule, consequence, requestType, requestDetail, tracer);
        });
      }

      return cloneDeep(consequence); // we return a new object because at.js has a tendency to mutate response and we don't want it to mutate the rule consequence itself
    };
  }

  /* eslint-disable import/prefer-default-export */
  /**
   *
   * @param {String} propertyToken
   * @return {function(import("../types/DecisioningArtifact").Rule): boolean}
   */

  function byPropertyToken(propertyToken) {
    /**
     * @param {import("../types/DecisioningArtifact").Rule} rule
     * @return {boolean}
     */
    function filter(rule) {
      const {
        propertyTokens = []
      } = rule;
      return isUndefined(propertyToken) ? propertyTokens.length === 0 : propertyTokens.length === 0 || includes(propertyToken, propertyTokens);
    }

    return filter;
  }

  const LOG_TAG$1 = `${LOG_PREFIX}.DecisionProvider`;
  const PARTIAL_CONTENT = 206;
  const OK = 200;
  /**
   *
   * @param {import("../types/DecisioningConfig").DecisioningConfig} config
   * @param {import("../types/TargetDeliveryRequest").TargetDeliveryRequest} targetOptions
   * @param {import("../types/DecisioningContext").DecisioningContext} context
   * @param { import("../types/DecisioningArtifact").DecisioningArtifact } artifact
   * @param { Object } logger
   * @param traceProvider
   */

  function DecisionProvider(config, targetOptions, context, artifact, logger, traceProvider) {
    const {
      eventEmitter = noop
    } = config;
    const {
      responseTokens,
      rules
    } = artifact;
    const globalMboxName = artifact.globalMbox || DEFAULT_GLOBAL_MBOX;
    const clientId = config.client;
    const {
      request,
      visitor
    } = targetOptions;
    const propertyToken = getPropertyToken(request.property);
    const {
      sendNotificationFunc,
      telemetryEnabled = true
    } = config;
    const visitorId = request.id;
    const processRule = ruleEvaluator(clientId, visitorId, getParseDomainImpl(config));
    const dependency = hasRemoteDependency(artifact, request);
    const notificationProvider = NotificationProvider(request, visitor, logger, sendNotificationFunc, telemetryEnabled, eventEmitter);
    /**
     *
     * @param { 'execute'|'prefetch' } mode
     * @param { Function[] } postProcessors Used to process an mbox if needed, optional
     */

    function getDecisions(mode, postProcessors) {
      if (isUndefined(request[mode])) {
        return undefined;
      }

      const requestTracer = RequestTracer(traceProvider, artifact);
      /**
       *
       * @param { import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails | import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest } requestDetails
       * @param {Array<Function>} additionalPostProcessors
       */

      function processViewRequest(requestDetails) {
        let additionalPostProcessors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        requestTracer.traceRequest(mode, RequestType.VIEW, requestDetails, context);
        const consequences = {};
        let viewRules = [];

        if (Object.prototype.hasOwnProperty.call(requestDetails, "name") && isDefined(requestDetails.name)) {
          viewRules = rules.views[requestDetails.name] || [];
        } else {
          viewRules = Object.keys(rules.views).reduce((result, key) => [...result, ...rules.views[key]], []);
        }

        viewRules = viewRules.filter(byPropertyToken(propertyToken));
        const matchedRuleKeys = new Set(); // eslint-disable-next-line no-restricted-syntax

        for (const rule of viewRules) {
          const ruleKey = getRuleKey(rule);
          let consequence;

          if (!matchedRuleKeys.has(ruleKey)) {
            consequence = processRule(rule, context, RequestType.VIEW, requestDetails, [...postProcessors, ...additionalPostProcessors], requestTracer);
          }

          if (consequence) {
            matchedRuleKeys.add(ruleKey);

            if (!consequences[consequence.name]) {
              consequences[consequence.name] = consequence;
            } else {
              consequences[consequence.name] = _objectSpread2(_objectSpread2({}, consequences[consequence.name]), {}, {
                options: [...consequences[consequence.name].options, ...consequence.options],
                metrics: [...consequences[consequence.name].metrics, ...consequence.metrics]
              });
            }
          }
        }

        return values(consequences);
      }
      /**
       * @param {import("@adobe/target-tools/delivery-api-client/models/MboxRequest").MboxRequest} mboxRequest
       * @param { Array<Function> } additionalPostProcessors
       */


      function processMboxRequest(mboxRequest) {
        let additionalPostProcessors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        const isGlobalMbox = mboxRequest.name === globalMboxName;
        requestTracer.traceRequest(mode, RequestType.MBOX, mboxRequest, context);
        const consequences = [];
        const mboxRules = (rules.mboxes[mboxRequest.name] || []).filter(byPropertyToken(propertyToken));
        const matchedRuleKeys = new Set(); // eslint-disable-next-line no-restricted-syntax

        for (const rule of mboxRules) {
          const ruleKey = getRuleKey(rule);
          let consequence;

          if (!isGlobalMbox || isGlobalMbox && !matchedRuleKeys.has(ruleKey)) {
            consequence = processRule(rule, context, RequestType.MBOX, mboxRequest, [...postProcessors, ...additionalPostProcessors], requestTracer);
          }

          if (consequence) {
            consequences.push(consequence);
            matchedRuleKeys.add(ruleKey);

            if (!isGlobalMbox) {
              break;
            }
          }
        } // add a blank if no consequences


        if (!isGlobalMbox && consequences.length === 0) {
          consequences.push({
            name: mboxRequest.name,
            index: mboxRequest.index,
            trace: requestTracer.getTraceResult()
          });
        }

        return consequences;
      }
      /**
       * @param {import("@adobe/target-tools/delivery-api-client/models/RequestDetails").RequestDetails} requestDetails
       */


      function processPageLoadRequest(requestDetails) {
        let trace;
        const consequences = processMboxRequest(_objectSpread2(_objectSpread2({}, requestDetails), {}, {
          name: globalMboxName
        }), [function preserveTrace(rule, mboxResponse) {
          // eslint-disable-next-line prefer-destructuring
          trace = mboxResponse.trace;
          return mboxResponse;
        }, removePageLoadAttributes]);
        const options = flatten(consequences.map(consequence => consequence.options));
        const result = {
          options,
          trace
        };
        const indexedMetrics = consequences.reduce((indexed, consequence) => {
          if (consequence.metrics instanceof Array) {
            consequence.metrics.forEach(metric => {
              // eslint-disable-next-line no-param-reassign
              indexed[metric.eventToken] = metric;
            });
          }

          return indexed;
        }, {});
        const metrics = values(indexedMetrics);

        if (metrics.length > 0) {
          result.metrics = metrics;
        }

        return result;
      }

      const response = {};

      if (request[mode].mboxes) {
        response.mboxes = flatten(request[mode].mboxes.map(mboxRequest => processMboxRequest(mboxRequest)));
      }

      if (request[mode].views) {
        response.views = flatten(request[mode].views.map(requestDetails => processViewRequest(requestDetails)));
      }

      if (request[mode].pageLoad) {
        response.pageLoad = processPageLoadRequest(request[mode].pageLoad);
      }

      return response;
    }

    function getExecuteDecisions(postProcessors) {
      return getDecisions("execute", [function prepareNotification(rule, mboxResponse, requestType, requestDetail, tracer) {
        notificationProvider.addNotification(mboxResponse, tracer.traceNotification(rule));
        return mboxResponse;
      }, prepareExecuteResponse, ...postProcessors]);
    }

    function getPrefetchDecisions(postProcessors) {
      return getDecisions("prefetch", [preparePrefetchResponse, ...postProcessors]);
    }

    const addResponseTokens = createResponseTokensPostProcessor(context, responseTokens);
    const commonPostProcessor = [addResponseTokens, replaceCampaignMacros, addTrace, cleanUp];
    const response = objectWithoutUndefinedValues({
      status: dependency.remoteNeeded ? PARTIAL_CONTENT : OK,
      remoteMboxes: dependency.remoteMboxes,
      remoteViews: dependency.remoteViews,
      requestId: request.requestId,
      id: _objectSpread2({}, request.id),
      client: clientId,
      edgeHost: undefined,
      execute: getExecuteDecisions(commonPostProcessor),
      prefetch: getPrefetchDecisions(commonPostProcessor)
    });
    notificationProvider.sendNotifications();
    logger.debug(`${LOG_TAG$1}`, request, response);
    return Promise.resolve(response);
  }

  const GEO_LOOKUP_URL = `https://${CDN_BASE_PATH}/v${SUPPORTED_ARTIFACT_MAJOR_VERSION}/geo`;
  const GEO_MAPPINGS = [{
    headerName: HTTP_HEADER_FORWARDED_FOR,
    parseValue: value => value,
    valueKey: "ipAddress"
  }, {
    headerName: HTTP_HEADER_GEO_LATITUDE,
    parseValue: value => parseFloat(value),
    valueKey: "latitude"
  }, {
    headerName: HTTP_HEADER_GEO_LONGITUDE,
    parseValue: value => parseFloat(value),
    valueKey: "longitude"
  }, {
    headerName: HTTP_HEADER_GEO_COUNTRY,
    parseValue: value => value,
    valueKey: "countryCode"
  }, {
    headerName: HTTP_HEADER_GEO_REGION,
    parseValue: value => value,
    valueKey: "stateCode"
  }, {
    headerName: HTTP_HEADER_GEO_CITY,
    parseValue: value => value,
    valueKey: "city"
  }];
  /**
   *
   * @param {Function} valueFn, function to lookup value by key
   * @param initial
   * @return {import("@adobe/target-tools/delivery-api-client/models/Geo").Geo}
   */

  function mapGeoValues(valueFn) {
    let initial = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return GEO_MAPPINGS.reduce((result, mapping) => {
      const value = valueFn.call(null, mapping.headerName);

      if (value != null && isDefined(value)) {
        // eslint-disable-next-line no-param-reassign
        result[mapping.valueKey] = mapping.parseValue(value);
      }

      return result;
    }, initial);
  }
  /**
   * @param { import("node-fetch").Headers  } geoHeaders;
   * @return { import("@adobe/target-tools/delivery-api-client/models/Geo").Geo }
   */


  function createGeoObjectFromHeaders(geoHeaders) {
    return mapGeoValues(key => geoHeaders.get(key));
  }
  /**
   * @param {Object.<string, any>} geoPayload
   * @return { import("@adobe/target-tools/delivery-api-client/models/Geo").Geo }
   */

  function createGeoObjectFromPayload() {
    let geoPayload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return mapGeoValues(key => geoPayload[key]);
  }
  /**
   * @param {import("../types/DecisioningConfig").DecisioningConfig} config
   * @param { import("../types/DecisioningArtifact").DecisioningArtifact } artifact
   */

  function GeoProvider(config, artifact) {
    const fetchApi = getFetchApi(config.fetchApi);
    const {
      geoTargetingEnabled = false
    } = artifact;
    const {
      eventEmitter = noop
    } = config;
    /**
     * @param {import("@adobe/target-tools/delivery-api-client/models/Geo").Geo} geoRequestContext
     * @return { Promise<import("@adobe/target-tools/delivery-api-client/models/Geo").Geo> }
     */

    function validGeoRequestContext() {
      let geoRequestContext = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      const validatedGeoRequestContext = _objectSpread2({}, geoRequestContext);

      if (geoRequestContext.ipAddress === UNKNOWN_IP_ADDRESS || !isValidIpAddress(geoRequestContext.ipAddress)) {
        delete validatedGeoRequestContext.ipAddress;
      }

      if (geoTargetingEnabled && (geoRequestContext.ipAddress === UNKNOWN_IP_ADDRESS || isValidIpAddress(geoRequestContext.ipAddress)) && isUndefined(geoRequestContext.latitude) && isUndefined(geoRequestContext.longitude) && isUndefined(geoRequestContext.countryCode) && isUndefined(geoRequestContext.stateCode) && isUndefined(geoRequestContext.city)) {
        const headers = {};

        if (geoRequestContext.ipAddress !== UNKNOWN_IP_ADDRESS) {
          headers[HTTP_HEADER_FORWARDED_FOR] = geoRequestContext.ipAddress;
        }

        return fetchApi(GEO_LOOKUP_URL, {
          headers
        }).then(geoResponse => geoResponse.json().then(geoPayload => createGeoObjectFromPayload(geoPayload))).then(fetchedGeoValues => {
          reactorObjectAssign(validatedGeoRequestContext, fetchedGeoValues);
          eventEmitter(GEO_LOCATION_UPDATED, {
            geoContext: validatedGeoRequestContext
          });
          return validatedGeoRequestContext;
        });
      }

      return Promise.resolve(validatedGeoRequestContext);
    }

    return validGeoRequestContext;
  }

  /* eslint-disable no-bitwise */
  const HEADER_BOUNDARY = 40;
  /**
   * The ObfuscationProvider initialize method
   * @param {import("../types/DecisioningConfig").DecisioningConfig} config Options map, required
   */

  function ObfuscationProvider(config) {
    const {
      organizationId
    } = config;
    const decoder = new TextDecoder("utf-8");

    function getHeader(buffer) {
      const dataView = new DataView(buffer);
      const text = decoder.decode(dataView);
      const [prefix, version] = text.slice(0, 8).split(":");
      const key = text.slice(8, 41);
      return {
        prefix,
        version: parseInt(version, 10),
        key
      };
    }

    function getArtifact(key, obfuscatedArtifactBuffer) {
      let deobfuscatedArtifactJSON = {};
      const keyBuffer = new TextEncoder().encode([organizationId, key].join(""));
      const keyView = new DataView(keyBuffer.buffer);
      const keyLength = keyView.byteLength;
      const obfuscatedArtifactView = new DataView(obfuscatedArtifactBuffer);
      const artifactLength = obfuscatedArtifactView.byteLength;
      const deobfuscatedArtifactView = new DataView(new ArrayBuffer(artifactLength));

      for (let i = 0; i < artifactLength; i += 1) {
        deobfuscatedArtifactView.setInt8(i, obfuscatedArtifactView.getInt8(i) ^ keyView.getInt8(i % keyLength));
      }

      const deobfuscatedArtifactString = decoder.decode(deobfuscatedArtifactView);

      try {
        deobfuscatedArtifactJSON = JSON.parse(deobfuscatedArtifactString);
      } catch (err) {
        throw new Error(Messages.ARTIFACT_OBFUSCATION_ERROR);
      }

      return deobfuscatedArtifactJSON;
    }

    function deobfuscate(buffer) {
      const header = getHeader(buffer.slice(0, HEADER_BOUNDARY));

      if (header.version !== SUPPORTED_ARTIFACT_OBFUSCATION_VERSION) {
        throw new Error(Messages.ARTIFACT_INVALID);
      }

      return getArtifact(header.key, buffer.slice(HEADER_BOUNDARY));
    }

    return {
      deobfuscate
    };
  }

  /* eslint-disable import/prefer-default-export */
  const TIMING_ARTIFACT_DOWNLOADED_TOTAL = "artifactDownloaded_total";
  const TIMING_ARTIFACT_DOWNLOADED_FETCH = "artifactDownloaded_fetch";
  const TIMING_ARTIFACT_GET_INITIAL = "artifactGetInitial";
  const TIMING_ARTIFACT_READ_JSON = "artifactDownloaded_read_JSON";
  const TIMING_ARTIFACT_DEOBFUSCATE = "deobfuscate_total";

  const LOG_TAG$2 = `${LOG_PREFIX}.ArtifactProvider`;
  const NOT_MODIFIED$1 = 304;
  const OK$1 = 200;
  const ARTIFACT_DOWNLOAD = "ArtifactDownload";
  /**
   * The ArtifactProvider initialize method
   * @param {import("../types/DecisioningConfig").DecisioningConfig} config Options map, required
   */

  function ArtifactProvider(config, telemetryProvider) {
    const logger = getLogger(config.logger);
    const {
      eventEmitter = noop
    } = config;
    const obfuscationProvider = ObfuscationProvider(config);

    function getPollingInterval() {
      if ( // allow polling to be set to 0
      isNumber(config.pollingInterval) && config.pollingInterval === 0) {
        return 0;
      }

      return Math.max(MINIMUM_POLLING_INTERVAL, isNumber(config.pollingInterval) ? config.pollingInterval : DEFAULT_POLLING_INTERVAL);
    }

    const pollingInterval = getPollingInterval();
    const fetchApi = getFetchApi(config.fetchApi);
    let pollingHalted = false;
    let pollingTimer;
    let artifact;
    const subscriptions = {};
    let subscriptionCount = 0;
    let lastResponseEtag;
    let lastResponseData;
    const artifactLocation = determineArtifactLocation(config);
    const artifactFormat = isString(config.artifactFormat) ? config.artifactFormat : determineArtifactFormat(artifactLocation);
    const fetchWithRetry = getFetchWithRetry(fetchApi, NUM_FETCH_RETRIES, errorMessage => Messages.ERROR_MAX_RETRY(NUM_FETCH_RETRIES, errorMessage), error => eventEmitter(ARTIFACT_DOWNLOAD_FAILED, {
      artifactLocation,
      error
    }));

    function emitNewArtifact(artifactPayload) {
      let geoContext = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      eventEmitter(ARTIFACT_DOWNLOAD_SUCCEEDED, {
        artifactLocation,
        artifactPayload
      });
      eventEmitter(GEO_LOCATION_UPDATED, {
        geoContext
      });
      values(subscriptions).forEach(subscriptionFunc => subscriptionFunc(artifactPayload));
    }
    /**
     *
     * @param {import("node-fetch").Response} res
     * @return {Promise<import("../types/DecisioningArtifact").DecisioningArtifact>}
     */


    function deobfuscate(res) {
      if (artifactFormat === ARTIFACT_FORMAT_BINARY) {
        perfTool.timeStart(TIMING_ARTIFACT_DEOBFUSCATE);
        return res.arrayBuffer().then(buffer => obfuscationProvider.deobfuscate(buffer).then(deobfuscated => {
          perfTool.timeEnd(TIMING_ARTIFACT_DEOBFUSCATE);
          return deobfuscated;
        }));
      }

      perfTool.timeStart(TIMING_ARTIFACT_READ_JSON);
      return res.json().then(data => {
        perfTool.timeEnd(TIMING_ARTIFACT_READ_JSON);
        return data;
      });
    }

    function fetchArtifact(artifactUrl) {
      perfTool.timeStart(TIMING_ARTIFACT_DOWNLOADED_TOTAL);
      const headers = {};
      logger.debug(`${LOG_TAG$2} fetching artifact - ${artifactUrl}`);

      if (lastResponseEtag && !isBrowser() && isNodeJS()) {
        headers["If-None-Match"] = lastResponseEtag;
      }

      perfTool.timeStart(TIMING_ARTIFACT_DOWNLOADED_FETCH);
      return fetchWithRetry(artifactUrl, {
        headers,
        cache: "default"
      }).then(res => {
        const executionTime = perfTool.timeEnd(TIMING_ARTIFACT_DOWNLOADED_FETCH);
        perfTool.clearTiming(TIMING_ARTIFACT_DOWNLOADED_FETCH);
        logger.debug(`${LOG_TAG$2} artifact received - status=${res.status}`);
        const entry = {
          execution: executionTime
        };

        if (res.timings) {
          entry.parsing = res.timings.parsingTime;
          delete res.timings.parsingTime;
          entry.request = res.timings;
        }

        telemetryProvider.addArtifactRequestEntry(ARTIFACT_DOWNLOAD, entry);

        if (res.status === NOT_MODIFIED$1 && lastResponseData) {
          return lastResponseData;
        }

        if (res.ok && res.status === OK$1) {
          return deobfuscate(res).then(responseData => {
            const etag = res.headers.get("Etag");

            if (etag != null && isDefined(etag)) {
              lastResponseData = responseData;
              lastResponseEtag = etag;
            }

            emitNewArtifact(responseData, createGeoObjectFromHeaders(res.headers));
            perfTool.timeEnd(TIMING_ARTIFACT_DOWNLOADED_TOTAL);
            return responseData;
          });
        }

        return undefined;
      }).catch(err => {
        const reason = err.message || err.toString();
        logger.error(Messages.ARTIFACT_FETCH_ERROR(reason));
      });
    }

    function addSubscription(callbackFunc) {
      subscriptionCount += 1;
      subscriptions[subscriptionCount] = callbackFunc;
      return subscriptionCount;
    }

    function removeSubscription(id) {
      delete subscriptions[id];
    }

    function scheduleNextUpdate() {
      if (pollingInterval === 0 || pollingHalted) {
        return;
      }

      pollingTimer = setTimeout(() => {
        fetchArtifact(artifactLocation).then(newArtifact => {
          artifact = newArtifact;
          return newArtifact;
        });
        scheduleNextUpdate();
      }, pollingInterval);
    }

    function stopAllPolling() {
      if (isDefined(pollingTimer)) {
        clearTimeout(pollingTimer);
        pollingTimer = undefined;
      }

      pollingHalted = true;
    }

    function resumePolling() {
      pollingHalted = false;
      scheduleNextUpdate();
    }
    /**
     *
     * @return { import("../types/DecisioningArtifact").DecisioningArtifact }
     */


    function getArtifact() {
      return artifact;
    }

    function getInitialArtifact() {
      perfTool.timeStart(TIMING_ARTIFACT_GET_INITIAL);
      return isObject(config.artifactPayload) ? Promise.resolve(config.artifactPayload) : fetchArtifact(artifactLocation);
    }

    return getInitialArtifact().then(newArtifact => {
      perfTool.timeEnd(TIMING_ARTIFACT_GET_INITIAL);
      artifact = newArtifact;
      const artifactTracer = ArtifactTracer(artifactLocation, config.artifactPayload, pollingInterval, pollingHalted, artifact);
      addSubscription(value => artifactTracer.provideNewArtifact(value));
      return {
        getArtifact: () => getArtifact(),
        subscribe: callbackFunc => addSubscription(callbackFunc),
        unsubscribe: id => removeSubscription(id),
        stopPolling: () => stopAllPolling(),
        resumePolling: () => resumePolling(),
        getTrace: () => artifactTracer.toJSON()
      };
    }).finally(() => {
      scheduleNextUpdate();
    });
  }

  /**
   *
   * @param { import("@adobe/target-tools/delivery-api-client/models/VisitorId").VisitorId } visitorId
   * @returns {string} first non-blank marketingCloudVisitorId, tntId, thirdPartyId
   */

  function getCustomerId(visitorId) {
    if (!visitorId.customerIds || !(visitorId.customerIds instanceof Array)) {
      return undefined;
    }

    const customerIds = visitorId.customerIds.filter(customerId => customerId.authenticatedState === AuthenticatedState.Authenticated);

    if (customerIds.length > 0) {
      return customerIds[0].id;
    }

    return undefined;
  }
  /**
   *
   * @param {import("@adobe/target-tools/delivery-api-client/models/VisitorId").VisitorId} visitorId
   * @param {String} targetLocationHint
   * @returns {import("@adobe/target-tools/delivery-api-client/models/VisitorId").VisitorId}
   */

  function validVisitorId(visitorId, targetLocationHint) {
    const result = _objectSpread2({}, visitorId);

    if (!result.tntId && !result.marketingCloudVisitorId && !getCustomerId(result) && !result.thirdPartyId) {
      const locationHint = isString(targetLocationHint) && !isBlank(targetLocationHint) ? `.${targetLocationHint}_0` : "";
      result.tntId = `${uuid()}${locationHint}`;
    }

    return result;
  }
  /**
   *
   * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest} request
   * @param {String} targetLocationHint
   * @param {Function} validGeoRequestContext
   * @returns {Promise<import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest>}
   */

  function validDeliveryRequest(request, targetLocationHint, validGeoRequestContext) {
    const {
      context = {}
    } = request;
    return validGeoRequestContext(context.geo || {}).then(geo => _objectSpread2(_objectSpread2({}, request), {}, {
      context: _objectSpread2(_objectSpread2({}, context), {}, {
        geo
      }),
      id: validVisitorId(request.id, targetLocationHint),
      requestId: request.requestId || uuid()
    }));
  }

  /**
   * The TargetDecisioningEngine initialize method
   * @param {import("../types/DecisioningConfig").DecisioningConfig} config Options map, required
   * @param {import("@adobe/target-tools/src/telemetryProvider")} telemetryProvider TelemetryProvider function, required
   */

  function TargetDecisioningEngine(config, telemetryProvider) {
    const logger = getLogger(config.logger);
    let artifactProvider;
    let artifact;
    /**
     * The get offers method
     * @param {import("../types/TargetDeliveryRequest").TargetDeliveryRequest} targetOptions
     */

    function getOffers(targetOptions) {
      let {
        request
      } = targetOptions;

      if (isUndefined(artifact)) {
        return Promise.reject(new Error(Messages.ARTIFACT_NOT_AVAILABLE));
      }

      if (!matchMajorVersion(artifact.version, SUPPORTED_ARTIFACT_MAJOR_VERSION)) {
        return Promise.reject(new Error(Messages.ARTIFACT_VERSION_UNSUPPORTED(artifact.version, SUPPORTED_ARTIFACT_MAJOR_VERSION)));
      }

      return validDeliveryRequest(request, targetOptions.targetLocationHint, GeoProvider(config, artifact)).then(validRequest => {
        request = validRequest;

        const options = _objectSpread2(_objectSpread2({}, targetOptions), {}, {
          request
        });

        const traceProvider = TraceProvider(config, options, artifactProvider.getTrace());
        return DecisionProvider(config, options, createDecisioningContext(request, getParseDomainImpl(config)), artifact, logger, traceProvider);
      });
    }

    function isReady() {
      return isDefined(artifact);
    }

    return ArtifactProvider(_objectSpread2(_objectSpread2({}, config), {}, {
      logger
    }), telemetryProvider).then(providerInstance => {
      artifactProvider = providerInstance;
      artifact = artifactProvider.getArtifact();

      if (isUndefined(artifact)) {
        throw new Error(Messages.ARTIFACT_NOT_AVAILABLE);
      } // subscribe to new artifacts that are downloaded on the polling interval


      artifactProvider.subscribe(data => {
        artifact = data;
      });
      return {
        getRawArtifact: () => artifact,
        stopPolling: () => artifactProvider.stopPolling(),
        getOffers: targetOptions => getOffers(targetOptions),
        hasRemoteDependency: request => hasRemoteDependency(artifact, request),
        isReady
      };
    });
  }

  /*
  Copyright 2019 Adobe. All rights reserved.
  This file is licensed to you under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under
  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
  OF ANY KIND, either express or implied. See the License for the specific language
  governing permissions and limitations under the License.
  */
  const NAVIGATOR = "navigator";
  const SEND_BEACON = "sendBeacon";
  const isObject$1 = value => value instanceof Object;
  const isPrimitiveObject = value => value instanceof String || value instanceof Number || value instanceof Boolean || value instanceof Symbol;
  const noUndefinedValues = value => !!Object.values(value).filter(obj => isDefined(obj)).length;
  const isNonEmptyObject = value => isObject$1(value) && !Array.isArray(value) && !isPrimitiveObject(value) && noUndefinedValues(value);
  const isEmptyObject = value => !isNonEmptyObject(value);
  const isNonEmptyString = value => isString(value) && !!value.length;
  const isEmptyString = value => !isNonEmptyString(value);
  const isNonEmptyArray = value => Array.isArray(value) && !!value.length && noUndefinedValues(value);
  const isEmptyArray = value => !isNonEmptyArray(value);
  const removeEmptyKeys = object => // eslint-disable-next-line no-param-reassign
  Object.keys(object).forEach(key => !object[key] && delete object[key]);
  const flatten$1 = function () {
    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return [].concat(...array);
  };
  const getTimezoneOffset = () => -new Date().getTimezoneOffset();
  function createVisitor(options, config) {
    const {
      organizationId
    } = config;
    const {
      visitor,
      visitorCookie,
      customerIds
    } = options;
    const createdVisitor = visitor || new Visitor(organizationId, visitorCookie);

    if (customerIds) {
      createdVisitor.setCustomerIDs(customerIds);
    }

    return createdVisitor;
  }
  function isBeaconSupported() {
    return isBrowser() && // eslint-disable-next-line no-undef
    NAVIGATOR in window && // eslint-disable-next-line no-undef
    SEND_BEACON in window[NAVIGATOR];
  }
  function executeSendBeacon(url, data) {
    // eslint-disable-next-line no-undef
    return window[NAVIGATOR][SEND_BEACON](url, data);
  }

  /* eslint-disable import/prefer-default-export */
  const Messages$1 = {
    PRIVATE_CONSTRUCTOR: "Please use TargetClient.create static method instead",
    ORG_ID_REQUIRED: "Organization Id is required",
    DECISIONING_METHOD_INVALID: `Invalid Decisioning Method.  Must be set to one of: ${Object.values(DECISIONING_METHOD).join(",")}`,
    FETCH_API_REQUIRED: "Fetch API is required",
    REQUEST_REQUIRED: "Request object is required",
    EXECUTE_FIELDS_REQUIRED: "Either pageLoad or mboxes is required in execute",
    PREFETCH_FIELDS_REQUIRED: "Either views, pageLoad or mboxes is required in prefetch",
    MBOX_INVALID: "Mbox validation failed for: ",
    NOTIFICATION_INVALID: "Notification validation failed for: ",
    CLIENT_REQUIRED: "Client is required",
    OPTIONS_REQUIRED: "Options map is required",
    REQUEST_SENT: "Request sent",
    RESPONSE_RECEIVED: "Response received",
    FETCH_UNDEFINED: "Fetch is not defined!",
    DECISIONING_ENGINE_UNDEFINED: "Decisioning Engine is undefined",
    LOCATION_HINT_REQUEST_FAILED: "Unable to retrieve location hint cookie."
  };

  /*
  Copyright 2019 Adobe. All rights reserved.
  This file is licensed to you under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under
  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
  OF ANY KIND, either express or implied. See the License for the specific language
  governing permissions and limitations under the License.
  */
  const TARGET_COOKIE = "mbox";
  const SESSION_ID_COOKIE = "session";
  const DEVICE_ID_COOKIE = "PC";
  const LOCATION_HINT_COOKIE = "mboxEdgeCluster";

  function createInternalCookie(name, value, expires) {
    return {
      name,
      value,
      expires
    };
  }

  function serializeCookie(cookie) {
    return [encodeURIComponent(cookie.name), encodeURIComponent(cookie.value), cookie.expires].join("#");
  }

  function deserializeCookie(str) {
    const parts = str.split("#");
    const len = parts.length;

    if (len === 0 || len < 3) {
      return null;
    }

    if (Number.isNaN(parseInt(parts[2], 10))) {
      return null;
    }

    return createInternalCookie(decodeURIComponent(parts[0]), decodeURIComponent(parts[1]), Number(parts[2]));
  }

  function getInternalCookies(cookieValue) {
    return cookieValue.split("|");
  }

  function getExpires(cookie) {
    return cookie.expires;
  }

  function getMaxExpires(cookies) {
    return Math.max.apply(null, cookies.map(getExpires));
  }

  function parseCookies(targetCookie) {
    const result = {};

    if (!targetCookie) {
      return result;
    }

    const rawInternalCookies = getInternalCookies(targetCookie);
    const internalCookies = rawInternalCookies.map(x => deserializeCookie(x));
    const nowInSeconds = Math.ceil(Date.now() / 1000);
    const validCookies = internalCookies.filter(cookie => cookie && nowInSeconds <= cookie.expires);
    validCookies.forEach(cookie => {
      result[cookie.name] = cookie;
    });
    return result;
  }
  function createTargetCookie(cookies) {
    const now = Date.now();
    const maxAge = Math.abs(getMaxExpires(cookies) * 1000 - now);
    const serializedCookies = cookies.map(x => serializeCookie(x));
    return {
      name: TARGET_COOKIE,
      value: serializedCookies.join("|"),
      maxAge: Math.ceil(maxAge / 1000)
    };
  }

  const BASE_PATH = "https://.tt.omtrdc.net".replace(/\/+$/, "");
  const HTTP_NO_CONTENT = 204;
  const DEFAULT_TIMEOUT = 3000;

  const isBlob = value => typeof Blob !== 'undefined' && value instanceof Blob;

  class BaseAPI {
    constructor() {
      let configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Configuration();
      this.configuration = configuration;

      this.fetchApi = async (url, init) => {
        let fetchParams = {
          url,
          init
        };

        for (const middleware of this.middleware) {
          if (middleware.pre) {
            fetchParams = (await middleware.pre(_objectSpread2({
              fetch: this.fetchApi
            }, fetchParams))) || fetchParams;
          }
        }

        let response = await this.configuration.fetchApi(fetchParams.url, fetchParams.init);

        for (const middleware of this.middleware) {
          if (middleware.post) {
            response = (await middleware.post({
              fetch: this.fetchApi,
              url,
              init,
              response: response.clone()
            })) || response;
          }
        }

        return response;
      };

      this.middleware = configuration.middleware;
    }

    withMiddleware() {
      const next = this.clone();
      next.middleware = next.middleware.concat(...arguments);
      return next;
    }

    withPreMiddleware() {
      for (var _len = arguments.length, preMiddlewares = new Array(_len), _key = 0; _key < _len; _key++) {
        preMiddlewares[_key] = arguments[_key];
      }

      const middlewares = preMiddlewares.map(pre => ({
        pre
      }));
      return this.withMiddleware(...middlewares);
    }

    withPostMiddleware() {
      for (var _len2 = arguments.length, postMiddlewares = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        postMiddlewares[_key2] = arguments[_key2];
      }

      const middlewares = postMiddlewares.map(post => ({
        post
      }));
      return this.withMiddleware(...middlewares);
    }

    async request(context) {
      const {
        url,
        init
      } = this.createFetchParams(context);
      const response = await this.fetchApi(url, init);

      if (response.status >= 200 && response.status < 300) {
        return response;
      }

      throw response;
    }

    createFetchParams(context) {
      let url = this.configuration.basePath + context.path;

      if (context.query !== undefined && Object.keys(context.query).length !== 0) {
        url += '?' + this.configuration.queryParamsStringify(context.query);
      }

      const body = context.body instanceof FormData || context.body instanceof URLSearchParams || isBlob(context.body) ? context.body : JSON.stringify(context.body);
      const headers = Object.assign({}, this.configuration.headers, context.headers);
      const init = {
        method: context.method,
        headers: headers,
        body,
        credentials: this.configuration.credentials
      };
      return {
        url,
        init
      };
    }

    clone() {
      const constructor = this.constructor;
      const next = new constructor(this.configuration);
      next.middleware = this.middleware.slice();
      return next;
    }

  }

  class RequiredError extends Error {
    constructor(field, msg) {
      super(msg);
      this.field = field;
      this.name = "RequiredError";
    }

  }

  class Configuration {
    constructor() {
      let configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.configuration = configuration;
    }

    get basePath() {
      return this.configuration.basePath || BASE_PATH;
    }

    get fetchApi() {
      const timeout = this.configuration.timeout;
      const fetch = this.configuration.fetchApi || window.fetch.bind(window);
      return function (input, init) {
        return new Promise((resolve, reject) => {
          let timer = setTimeout(() => reject(new Error('Request timed out')), timeout);
          fetch(input, init).then(response => resolve(response), err => reject(err)).finally(() => clearTimeout(timer));
        });
      };
    }

    get middleware() {
      return this.configuration.middleware || [];
    }

    get queryParamsStringify() {
      return this.configuration.queryParamsStringify || querystring;
    }

    get username() {
      return this.configuration.username;
    }

    get password() {
      return this.configuration.password;
    }

    get apiKey() {
      const apiKey = this.configuration.apiKey;

      if (apiKey) {
        return typeof apiKey === 'function' ? apiKey : () => apiKey;
      }

      return undefined;
    }

    get accessToken() {
      const accessToken = this.configuration.accessToken;

      if (accessToken) {
        return typeof accessToken === 'function' ? accessToken : () => accessToken;
      }

      return undefined;
    }

    get headers() {
      return this.configuration.headers;
    }

    get credentials() {
      return this.configuration.credentials;
    }

    get timeout() {
      return this.configuration.timeout || DEFAULT_TIMEOUT;
    }

  }

  function exists(json, key) {
    const value = json[key];
    return value !== null && value !== undefined;
  }

  function querystring(params) {
    let prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
    return Object.keys(params).map(key => {
      const fullKey = prefix + (prefix.length ? `[${key}]` : key);
      const value = params[key];

      if (value instanceof Array) {
        const multiValue = value.map(singleValue => encodeURIComponent(String(singleValue))).join(`&${encodeURIComponent(fullKey)}=`);
        return `${encodeURIComponent(fullKey)}=${multiValue}`;
      }

      if (value instanceof Object) {
        return querystring(value, fullKey);
      }

      return `${encodeURIComponent(fullKey)}=${encodeURIComponent(String(value))}`;
    }).filter(part => part.length > 0).join('&');
  }

  class JSONApiResponse {
    constructor(raw) {
      let transformer = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : jsonValue => jsonValue;
      this.raw = raw;
      this.transformer = transformer;
    }

    async value() {
      return this.transformer(this.raw.status === HTTP_NO_CONTENT ? {} : await this.raw.json());
    }

  }

  function AddressFromJSON(json) {
    return AddressFromJSONTyped(json);
  }

  function AddressFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'url': !exists(json, 'url') ? undefined : json['url'],
      'referringUrl': !exists(json, 'referringUrl') ? undefined : json['referringUrl']
    };
  }

  function AddressToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'url': value.url,
      'referringUrl': value.referringUrl
    };
  }

  function AnalyticsPayloadFromJSON(json) {
    return AnalyticsPayloadFromJSONTyped(json);
  }

  function AnalyticsPayloadFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'pe': !exists(json, 'pe') ? undefined : json['pe'],
      'tnta': !exists(json, 'tnta') ? undefined : json['tnta']
    };
  }

  function AnalyticsRequestFromJSON(json) {
    return AnalyticsRequestFromJSONTyped(json);
  }

  function AnalyticsRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'supplementalDataId': !exists(json, 'supplementalDataId') ? undefined : json['supplementalDataId'],
      'logging': !exists(json, 'logging') ? undefined : LoggingTypeFromJSON(json['logging']),
      'trackingServer': !exists(json, 'trackingServer') ? undefined : json['trackingServer'],
      'trackingServerSecure': !exists(json, 'trackingServerSecure') ? undefined : json['trackingServerSecure']
    };
  }

  function AnalyticsRequestToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'supplementalDataId': value.supplementalDataId,
      'logging': LoggingTypeToJSON(value.logging),
      'trackingServer': value.trackingServer,
      'trackingServerSecure': value.trackingServerSecure
    };
  }

  function AnalyticsResponseFromJSON(json) {
    return AnalyticsResponseFromJSONTyped(json);
  }

  function AnalyticsResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'payload': !exists(json, 'payload') ? undefined : AnalyticsPayloadFromJSON(json['payload'])
    };
  }

  function ApplicationFromJSON(json) {
    return ApplicationFromJSONTyped(json);
  }

  function ApplicationFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'id': !exists(json, 'id') ? undefined : json['id'],
      'name': !exists(json, 'name') ? undefined : json['name'],
      'version': !exists(json, 'version') ? undefined : json['version']
    };
  }

  function ApplicationToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'id': value.id,
      'name': value.name,
      'version': value.version
    };
  }

  function AudienceManagerFromJSON(json) {
    return AudienceManagerFromJSONTyped(json);
  }

  function AudienceManagerFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'locationHint': !exists(json, 'locationHint') ? undefined : json['locationHint'],
      'blob': !exists(json, 'blob') ? undefined : json['blob']
    };
  }

  function AudienceManagerToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'locationHint': value.locationHint,
      'blob': value.blob
    };
  }

  var AuthenticatedState$1;

  (function (AuthenticatedState) {
    AuthenticatedState["Unknown"] = "unknown";
    AuthenticatedState["Authenticated"] = "authenticated";
    AuthenticatedState["LoggedOut"] = "logged_out";
  })(AuthenticatedState$1 || (AuthenticatedState$1 = {}));

  function AuthenticatedStateFromJSON(json) {
    return AuthenticatedStateFromJSONTyped(json);
  }

  function AuthenticatedStateFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function AuthenticatedStateToJSON(value) {
    return value;
  }

  function BrowserFromJSON(json) {
    return BrowserFromJSONTyped(json);
  }

  function BrowserFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'host': !exists(json, 'host') ? undefined : json['host'],
      'language': !exists(json, 'language') ? undefined : json['language'],
      'webGLRenderer': !exists(json, 'webGLRenderer') ? undefined : json['webGLRenderer']
    };
  }

  function BrowserToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'host': value.host,
      'language': value.language,
      'webGLRenderer': value.webGLRenderer
    };
  }

  var ChannelType$1;

  (function (ChannelType) {
    ChannelType["Mobile"] = "mobile";
    ChannelType["Web"] = "web";
  })(ChannelType$1 || (ChannelType$1 = {}));

  function ChannelTypeFromJSON(json) {
    return ChannelTypeFromJSONTyped(json);
  }

  function ChannelTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function ChannelTypeToJSON(value) {
    return value;
  }

  function ClientHintsFromJSON(json) {
    return ClientHintsFromJSONTyped(json);
  }

  function ClientHintsFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'mobile': !exists(json, 'mobile') ? undefined : json['mobile'],
      'model': !exists(json, 'model') ? undefined : json['model'],
      'platform': !exists(json, 'platform') ? undefined : json['platform'],
      'platformVersion': !exists(json, 'platformVersion') ? undefined : json['platformVersion'],
      'browserUAWithMajorVersion': !exists(json, 'browserUAWithMajorVersion') ? undefined : json['browserUAWithMajorVersion'],
      'browserUAWithFullVersion': !exists(json, 'browserUAWithFullVersion') ? undefined : json['browserUAWithFullVersion'],
      'architecture': !exists(json, 'architecture') ? undefined : json['architecture'],
      'bitness': !exists(json, 'bitness') ? undefined : json['bitness']
    };
  }

  function ClientHintsToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'mobile': value.mobile,
      'model': value.model,
      'platform': value.platform,
      'platformVersion': value.platformVersion,
      'browserUAWithMajorVersion': value.browserUAWithMajorVersion,
      'browserUAWithFullVersion': value.browserUAWithFullVersion,
      'architecture': value.architecture,
      'bitness': value.bitness
    };
  }

  function ContextFromJSON(json) {
    return ContextFromJSONTyped(json);
  }

  function ContextFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'channel': ChannelTypeFromJSON(json['channel']),
      'mobilePlatform': !exists(json, 'mobilePlatform') ? undefined : MobilePlatformFromJSON(json['mobilePlatform']),
      'application': !exists(json, 'application') ? undefined : ApplicationFromJSON(json['application']),
      'screen': !exists(json, 'screen') ? undefined : ScreenFromJSON(json['screen']),
      'window': !exists(json, 'window') ? undefined : WindowFromJSON(json['window']),
      'browser': !exists(json, 'browser') ? undefined : BrowserFromJSON(json['browser']),
      'address': !exists(json, 'address') ? undefined : AddressFromJSON(json['address']),
      'geo': !exists(json, 'geo') ? undefined : GeoFromJSON(json['geo']),
      'timeOffsetInMinutes': !exists(json, 'timeOffsetInMinutes') ? undefined : json['timeOffsetInMinutes'],
      'userAgent': !exists(json, 'userAgent') ? undefined : json['userAgent'],
      'clientHints': !exists(json, 'clientHints') ? undefined : ClientHintsFromJSON(json['clientHints']),
      'beacon': !exists(json, 'beacon') ? undefined : json['beacon']
    };
  }

  function ContextToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'channel': ChannelTypeToJSON(value.channel),
      'mobilePlatform': MobilePlatformToJSON(value.mobilePlatform),
      'application': ApplicationToJSON(value.application),
      'screen': ScreenToJSON(value.screen),
      'window': WindowToJSON(value.window),
      'browser': BrowserToJSON(value.browser),
      'address': AddressToJSON(value.address),
      'geo': GeoToJSON(value.geo),
      'timeOffsetInMinutes': value.timeOffsetInMinutes,
      'userAgent': value.userAgent,
      'clientHints': ClientHintsToJSON(value.clientHints),
      'beacon': value.beacon
    };
  }

  function CustomerIdFromJSON(json) {
    return CustomerIdFromJSONTyped(json);
  }

  function CustomerIdFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'id': json['id'],
      'integrationCode': json['integrationCode'],
      'authenticatedState': AuthenticatedStateFromJSON(json['authenticatedState'])
    };
  }

  function CustomerIdToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'id': value.id,
      'integrationCode': value.integrationCode,
      'authenticatedState': AuthenticatedStateToJSON(value.authenticatedState)
    };
  }

  var DecisioningMethod;

  (function (DecisioningMethod) {
    DecisioningMethod["ServerSide"] = "server-side";
    DecisioningMethod["OnDevice"] = "on-device";
    DecisioningMethod["Hybrid"] = "hybrid";
  })(DecisioningMethod || (DecisioningMethod = {}));

  function DecisioningMethodFromJSON(json) {
    return DecisioningMethodFromJSONTyped(json);
  }

  function DecisioningMethodFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function DecisioningMethodToJSON(value) {
    return value;
  }

  function DeliveryRequestFromJSON(json) {
    return DeliveryRequestFromJSONTyped(json);
  }

  function DeliveryRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'requestId': !exists(json, 'requestId') ? undefined : json['requestId'],
      'impressionId': !exists(json, 'impressionId') ? undefined : json['impressionId'],
      'id': !exists(json, 'id') ? undefined : VisitorIdFromJSON(json['id']),
      'environmentId': !exists(json, 'environmentId') ? undefined : json['environmentId'],
      'property': !exists(json, 'property') ? undefined : PropertyFromJSON(json['property']),
      'trace': !exists(json, 'trace') ? undefined : TraceFromJSON(json['trace']),
      'context': ContextFromJSON(json['context']),
      'experienceCloud': !exists(json, 'experienceCloud') ? undefined : ExperienceCloudFromJSON(json['experienceCloud']),
      'execute': !exists(json, 'execute') ? undefined : ExecuteRequestFromJSON(json['execute']),
      'prefetch': !exists(json, 'prefetch') ? undefined : PrefetchRequestFromJSON(json['prefetch']),
      'telemetry': !exists(json, 'telemetry') ? undefined : TelemetryFromJSON(json['telemetry']),
      'notifications': !exists(json, 'notifications') ? undefined : json['notifications'].map(NotificationFromJSON),
      'qaMode': !exists(json, 'qaMode') ? undefined : QAModeFromJSON(json['qaMode']),
      'preview': !exists(json, 'preview') ? undefined : PreviewFromJSON(json['preview'])
    };
  }

  function DeliveryRequestToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'requestId': value.requestId,
      'impressionId': value.impressionId,
      'id': VisitorIdToJSON(value.id),
      'environmentId': value.environmentId,
      'property': PropertyToJSON(value.property),
      'trace': TraceToJSON(value.trace),
      'context': ContextToJSON(value.context),
      'experienceCloud': ExperienceCloudToJSON(value.experienceCloud),
      'execute': ExecuteRequestToJSON(value.execute),
      'prefetch': PrefetchRequestToJSON(value.prefetch),
      'telemetry': TelemetryToJSON(value.telemetry),
      'notifications': value.notifications === undefined ? undefined : value.notifications.map(NotificationToJSON),
      'qaMode': QAModeToJSON(value.qaMode),
      'preview': PreviewToJSON(value.preview)
    };
  }

  function DeliveryResponseFromJSON(json) {
    return DeliveryResponseFromJSONTyped(json);
  }

  function DeliveryResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'status': !exists(json, 'status') ? undefined : json['status'],
      'requestId': !exists(json, 'requestId') ? undefined : json['requestId'],
      'id': !exists(json, 'id') ? undefined : VisitorIdFromJSON(json['id']),
      'client': !exists(json, 'client') ? undefined : json['client'],
      'edgeHost': !exists(json, 'edgeHost') ? undefined : json['edgeHost'],
      'execute': !exists(json, 'execute') ? undefined : ExecuteResponseFromJSON(json['execute']),
      'prefetch': !exists(json, 'prefetch') ? undefined : PrefetchResponseFromJSON(json['prefetch']),
      'notifications': !exists(json, 'notifications') ? undefined : json['notifications'].map(NotificationResponseFromJSON),
      'telemetryServerToken': !exists(json, 'telemetryServerToken') ? undefined : json['telemetryServerToken']
    };
  }

  var DeviceType;

  (function (DeviceType) {
    DeviceType["Phone"] = "phone";
    DeviceType["Tablet"] = "tablet";
  })(DeviceType || (DeviceType = {}));

  function DeviceTypeFromJSON(json) {
    return DeviceTypeFromJSONTyped(json);
  }

  function DeviceTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function DeviceTypeToJSON(value) {
    return value;
  }

  function ExecuteRequestFromJSON(json) {
    return ExecuteRequestFromJSONTyped(json);
  }

  function ExecuteRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'pageLoad': !exists(json, 'pageLoad') ? undefined : RequestDetailsFromJSON(json['pageLoad']),
      'mboxes': !exists(json, 'mboxes') ? undefined : json['mboxes'].map(MboxRequestFromJSON)
    };
  }

  function ExecuteRequestToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'pageLoad': RequestDetailsToJSON(value.pageLoad),
      'mboxes': value.mboxes === undefined ? undefined : value.mboxes.map(MboxRequestToJSON)
    };
  }

  function ExecuteResponseFromJSON(json) {
    return ExecuteResponseFromJSONTyped(json);
  }

  function ExecuteResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'pageLoad': !exists(json, 'pageLoad') ? undefined : PageLoadResponseFromJSON(json['pageLoad']),
      'mboxes': !exists(json, 'mboxes') ? undefined : json['mboxes'].map(MboxResponseFromJSON)
    };
  }

  var ExecutionMode;

  (function (ExecutionMode) {
    ExecutionMode["Edge"] = "edge";
    ExecutionMode["Local"] = "local";
  })(ExecutionMode || (ExecutionMode = {}));

  function ExecutionModeFromJSON(json) {
    return ExecutionModeFromJSONTyped(json);
  }

  function ExecutionModeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function ExecutionModeToJSON(value) {
    return value;
  }

  function ExperienceCloudFromJSON(json) {
    return ExperienceCloudFromJSONTyped(json);
  }

  function ExperienceCloudFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'audienceManager': !exists(json, 'audienceManager') ? undefined : AudienceManagerFromJSON(json['audienceManager']),
      'analytics': !exists(json, 'analytics') ? undefined : AnalyticsRequestFromJSON(json['analytics'])
    };
  }

  function ExperienceCloudToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'audienceManager': AudienceManagerToJSON(value.audienceManager),
      'analytics': AnalyticsRequestToJSON(value.analytics)
    };
  }

  function GeoFromJSON(json) {
    return GeoFromJSONTyped(json);
  }

  function GeoFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'ipAddress': !exists(json, 'ipAddress') ? undefined : json['ipAddress'],
      'latitude': !exists(json, 'latitude') ? undefined : json['latitude'],
      'longitude': !exists(json, 'longitude') ? undefined : json['longitude'],
      'countryCode': !exists(json, 'countryCode') ? undefined : json['countryCode'],
      'stateCode': !exists(json, 'stateCode') ? undefined : json['stateCode'],
      'city': !exists(json, 'city') ? undefined : json['city'],
      'zip': !exists(json, 'zip') ? undefined : json['zip']
    };
  }

  function GeoToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'ipAddress': value.ipAddress,
      'latitude': value.latitude,
      'longitude': value.longitude,
      'countryCode': value.countryCode,
      'stateCode': value.stateCode,
      'city': value.city,
      'zip': value.zip
    };
  }

  var LoggingType;

  (function (LoggingType) {
    LoggingType["ServerSide"] = "server_side";
    LoggingType["ClientSide"] = "client_side";
  })(LoggingType || (LoggingType = {}));

  function LoggingTypeFromJSON(json) {
    return LoggingTypeFromJSONTyped(json);
  }

  function LoggingTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function LoggingTypeToJSON(value) {
    return value;
  }

  function MboxRequestFromJSON(json) {
    return MboxRequestFromJSONTyped(json, false);
  }

  function MboxRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return _objectSpread2(_objectSpread2({}, RequestDetailsFromJSONTyped(json, ignoreDiscriminator)), {}, {
      'index': !exists(json, 'index') ? undefined : json['index'],
      'name': !exists(json, 'name') ? undefined : json['name']
    });
  }

  function MboxRequestToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return _objectSpread2(_objectSpread2({}, RequestDetailsToJSON(value)), {}, {
      'index': value.index,
      'name': value.name
    });
  }

  function MboxResponseFromJSON(json) {
    return MboxResponseFromJSONTyped(json, false);
  }

  function MboxResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    if (!ignoreDiscriminator) {
      if (json['$type'] === 'PrefetchMboxResponse') {
        return PrefetchMboxResponseFromJSONTyped(json, true);
      }
    }

    return {
      '$type': !exists(json, '$_type') ? undefined : json['$_type'],
      'index': !exists(json, 'index') ? undefined : json['index'],
      'name': !exists(json, 'name') ? undefined : json['name'],
      'options': !exists(json, 'options') ? undefined : json['options'].map(OptionFromJSON),
      'metrics': !exists(json, 'metrics') ? undefined : json['metrics'].map(MetricFromJSON),
      'analytics': !exists(json, 'analytics') ? undefined : AnalyticsResponseFromJSON(json['analytics']),
      'trace': !exists(json, 'trace') ? undefined : json['trace']
    };
  }

  function MetricFromJSON(json) {
    return MetricFromJSONTyped(json);
  }

  function MetricFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'type': !exists(json, 'type') ? undefined : MetricTypeFromJSON(json['type']),
      'selector': !exists(json, 'selector') ? undefined : json['selector'],
      'eventToken': !exists(json, 'eventToken') ? undefined : json['eventToken'],
      'analytics': !exists(json, 'analytics') ? undefined : AnalyticsResponseFromJSON(json['analytics'])
    };
  }

  var MetricType$1;

  (function (MetricType) {
    MetricType["Click"] = "click";
    MetricType["Display"] = "display";
  })(MetricType$1 || (MetricType$1 = {}));

  function MetricTypeFromJSON(json) {
    return MetricTypeFromJSONTyped(json);
  }

  function MetricTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function MetricTypeToJSON(value) {
    return value;
  }

  function MobilePlatformFromJSON(json) {
    return MobilePlatformFromJSONTyped(json);
  }

  function MobilePlatformFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'deviceName': !exists(json, 'deviceName') ? undefined : json['deviceName'],
      'deviceType': DeviceTypeFromJSON(json['deviceType']),
      'platformType': MobilePlatformTypeFromJSON(json['platformType']),
      'version': !exists(json, 'version') ? undefined : json['version']
    };
  }

  function MobilePlatformToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'deviceName': value.deviceName,
      'deviceType': DeviceTypeToJSON(value.deviceType),
      'platformType': MobilePlatformTypeToJSON(value.platformType),
      'version': value.version
    };
  }

  var MobilePlatformType;

  (function (MobilePlatformType) {
    MobilePlatformType["Android"] = "android";
    MobilePlatformType["Ios"] = "ios";
  })(MobilePlatformType || (MobilePlatformType = {}));

  function MobilePlatformTypeFromJSON(json) {
    return MobilePlatformTypeFromJSONTyped(json);
  }

  function MobilePlatformTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function MobilePlatformTypeToJSON(value) {
    return value;
  }

  function NotificationFromJSON(json) {
    return NotificationFromJSONTyped(json, false);
  }

  function NotificationFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return _objectSpread2(_objectSpread2({}, RequestDetailsFromJSONTyped(json, ignoreDiscriminator)), {}, {
      'id': !exists(json, 'id') ? undefined : json['id'],
      'impressionId': !exists(json, 'impressionId') ? undefined : json['impressionId'],
      'type': !exists(json, 'type') ? undefined : MetricTypeFromJSON(json['type']),
      'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
      'tokens': !exists(json, 'tokens') ? undefined : json['tokens'],
      'mbox': !exists(json, 'mbox') ? undefined : NotificationMboxFromJSON(json['mbox']),
      'view': !exists(json, 'view') ? undefined : NotificationViewFromJSON(json['view']),
      'pageLoad': !exists(json, 'pageLoad') ? undefined : NotificationPageLoadFromJSON(json['pageLoad'])
    });
  }

  function NotificationToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return _objectSpread2(_objectSpread2({}, RequestDetailsToJSON(value)), {}, {
      'id': value.id,
      'impressionId': value.impressionId,
      'type': MetricTypeToJSON(value.type),
      'timestamp': value.timestamp,
      'tokens': value.tokens,
      'mbox': NotificationMboxToJSON(value.mbox),
      'view': NotificationViewToJSON(value.view),
      'pageLoad': NotificationPageLoadToJSON(value.pageLoad)
    });
  }

  function NotificationMboxFromJSON(json) {
    return NotificationMboxFromJSONTyped(json);
  }

  function NotificationMboxFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'name': !exists(json, 'name') ? undefined : json['name'],
      'state': !exists(json, 'state') ? undefined : json['state']
    };
  }

  function NotificationMboxToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'name': value.name,
      'state': value.state
    };
  }

  function NotificationPageLoadFromJSON(json) {
    return NotificationPageLoadFromJSONTyped(json);
  }

  function NotificationPageLoadFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'state': !exists(json, 'state') ? undefined : json['state']
    };
  }

  function NotificationPageLoadToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'state': value.state
    };
  }

  function NotificationResponseFromJSON(json) {
    return NotificationResponseFromJSONTyped(json);
  }

  function NotificationResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'id': !exists(json, 'id') ? undefined : json['id'],
      'trace': !exists(json, 'trace') ? undefined : json['trace']
    };
  }

  function NotificationViewFromJSON(json) {
    return NotificationViewFromJSONTyped(json);
  }

  function NotificationViewFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'name': !exists(json, 'name') ? undefined : json['name'],
      'key': !exists(json, 'key') ? undefined : json['key'],
      'state': !exists(json, 'state') ? undefined : json['state']
    };
  }

  function NotificationViewToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'name': value.name,
      'key': value.key,
      'state': value.state
    };
  }

  function OptionFromJSON(json) {
    return OptionFromJSONTyped(json);
  }

  function OptionFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'type': !exists(json, 'type') ? undefined : OptionTypeFromJSON(json['type']),
      'content': !exists(json, 'content') ? undefined : OneOfstringobjectarrayFromJSON(json['content']),
      'eventToken': !exists(json, 'eventToken') ? undefined : json['eventToken'],
      'responseTokens': !exists(json, 'responseTokens') ? undefined : json['responseTokens']
    };
  }

  var OptionType$1;

  (function (OptionType) {
    OptionType["Html"] = "html";
    OptionType["Json"] = "json";
    OptionType["Redirect"] = "redirect";
    OptionType["Dynamic"] = "dynamic";
    OptionType["Actions"] = "actions";
  })(OptionType$1 || (OptionType$1 = {}));

  function OptionTypeFromJSON(json) {
    return OptionTypeFromJSONTyped(json);
  }

  function OptionTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function OrderFromJSON(json) {
    return OrderFromJSONTyped(json);
  }

  function OrderFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'id': !exists(json, 'id') ? undefined : json['id'],
      'total': !exists(json, 'total') ? undefined : json['total'],
      'purchasedProductIds': !exists(json, 'purchasedProductIds') ? undefined : json['purchasedProductIds'],
      'time': !exists(json, 'time') ? undefined : new Date(json['time']),
      'experienceLocalId': !exists(json, 'experienceLocalId') ? undefined : json['experienceLocalId'],
      'duplicate': !exists(json, 'duplicate') ? undefined : json['duplicate'],
      'outlier': !exists(json, 'outlier') ? undefined : json['outlier']
    };
  }

  function OrderToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'id': value.id,
      'total': value.total,
      'purchasedProductIds': value.purchasedProductIds,
      'time': value.time === undefined ? undefined : value.time.toISOString(),
      'experienceLocalId': value.experienceLocalId,
      'duplicate': value.duplicate,
      'outlier': value.outlier
    };
  }

  function PageLoadResponseFromJSON(json) {
    return PageLoadResponseFromJSONTyped(json);
  }

  function PageLoadResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'options': !exists(json, 'options') ? undefined : json['options'].map(OptionFromJSON),
      'metrics': !exists(json, 'metrics') ? undefined : json['metrics'].map(MetricFromJSON),
      'analytics': !exists(json, 'analytics') ? undefined : AnalyticsResponseFromJSON(json['analytics']),
      'state': !exists(json, 'state') ? undefined : json['state'],
      'trace': !exists(json, 'trace') ? undefined : json['trace']
    };
  }

  function PrefetchMboxResponseFromJSON(json) {
    return PrefetchMboxResponseFromJSONTyped(json, false);
  }

  function PrefetchMboxResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return _objectSpread2(_objectSpread2({}, MboxResponseFromJSONTyped(json, ignoreDiscriminator)), {}, {
      'state': !exists(json, 'state') ? undefined : json['state']
    });
  }

  function PrefetchRequestFromJSON(json) {
    return PrefetchRequestFromJSONTyped(json);
  }

  function PrefetchRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'views': !exists(json, 'views') ? undefined : json['views'].map(ViewRequestFromJSON),
      'pageLoad': !exists(json, 'pageLoad') ? undefined : RequestDetailsFromJSON(json['pageLoad']),
      'mboxes': !exists(json, 'mboxes') ? undefined : json['mboxes'].map(MboxRequestFromJSON)
    };
  }

  function PrefetchRequestToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'views': value.views === undefined ? undefined : value.views.map(ViewRequestToJSON),
      'pageLoad': RequestDetailsToJSON(value.pageLoad),
      'mboxes': value.mboxes === undefined ? undefined : value.mboxes.map(MboxRequestToJSON)
    };
  }

  function PrefetchResponseFromJSON(json) {
    return PrefetchResponseFromJSONTyped(json);
  }

  function PrefetchResponseFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'views': !exists(json, 'views') ? undefined : json['views'].map(ViewFromJSON),
      'pageLoad': !exists(json, 'pageLoad') ? undefined : PageLoadResponseFromJSON(json['pageLoad']),
      'mboxes': !exists(json, 'mboxes') ? undefined : json['mboxes'].map(PrefetchMboxResponseFromJSON),
      'metrics': !exists(json, 'metrics') ? undefined : json['metrics'].map(MetricFromJSON)
    };
  }

  function PreviewFromJSON(json) {
    return PreviewFromJSONTyped(json);
  }

  function PreviewFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'token': !exists(json, 'token') ? undefined : json['token']
    };
  }

  function PreviewToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'token': value.token
    };
  }

  function ProductFromJSON(json) {
    return ProductFromJSONTyped(json);
  }

  function ProductFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'id': !exists(json, 'id') ? undefined : json['id'],
      'categoryId': !exists(json, 'categoryId') ? undefined : json['categoryId']
    };
  }

  function ProductToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'id': value.id,
      'categoryId': value.categoryId
    };
  }

  function PropertyFromJSON(json) {
    return PropertyFromJSONTyped(json);
  }

  function PropertyFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'token': json['token']
    };
  }

  function PropertyToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'token': value.token
    };
  }

  function QAModeFromJSON(json) {
    return QAModeFromJSONTyped(json);
  }

  function QAModeFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'token': !exists(json, 'token') ? undefined : json['token'],
      'listedActivitiesOnly': !exists(json, 'listedActivitiesOnly') ? undefined : json['listedActivitiesOnly'],
      'evaluateAsTrueAudienceIds': !exists(json, 'evaluateAsTrueAudienceIds') ? undefined : json['evaluateAsTrueAudienceIds'],
      'evaluateAsFalseAudienceIds': !exists(json, 'evaluateAsFalseAudienceIds') ? undefined : json['evaluateAsFalseAudienceIds'],
      'previewIndexes': !exists(json, 'previewIndexes') ? undefined : json['previewIndexes'].map(QAModePreviewIndexFromJSON)
    };
  }

  function QAModeToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'token': value.token,
      'listedActivitiesOnly': value.listedActivitiesOnly,
      'evaluateAsTrueAudienceIds': value.evaluateAsTrueAudienceIds,
      'evaluateAsFalseAudienceIds': value.evaluateAsFalseAudienceIds,
      'previewIndexes': value.previewIndexes === undefined ? undefined : value.previewIndexes.map(QAModePreviewIndexToJSON)
    };
  }

  function QAModePreviewIndexFromJSON(json) {
    return QAModePreviewIndexFromJSONTyped(json);
  }

  function QAModePreviewIndexFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'activityIndex': !exists(json, 'activityIndex') ? undefined : json['activityIndex'],
      'experienceIndex': !exists(json, 'experienceIndex') ? undefined : json['experienceIndex']
    };
  }

  function QAModePreviewIndexToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'activityIndex': value.activityIndex,
      'experienceIndex': value.experienceIndex
    };
  }

  function RequestDetailsFromJSON(json) {
    return RequestDetailsFromJSONTyped(json, false);
  }

  function RequestDetailsFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    if (!ignoreDiscriminator) {
      if (json['$type'] === 'Notification') {
        return NotificationFromJSONTyped(json, true);
      }

      if (json['$type'] === 'MboxRequest') {
        return MboxRequestFromJSONTyped(json, true);
      }

      if (json['$type'] === 'ViewRequest') {
        return ViewRequestFromJSONTyped(json, true);
      }
    }

    return {
      '$type': !exists(json, '$_type') ? undefined : json['$_type'],
      'address': !exists(json, 'address') ? undefined : AddressFromJSON(json['address']),
      'parameters': !exists(json, 'parameters') ? undefined : json['parameters'],
      'profileParameters': !exists(json, 'profileParameters') ? undefined : json['profileParameters'],
      'order': !exists(json, 'order') ? undefined : OrderFromJSON(json['order']),
      'product': !exists(json, 'product') ? undefined : ProductFromJSON(json['product'])
    };
  }

  function RequestDetailsToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      '$_type': value.$type,
      'address': AddressToJSON(value.address),
      'parameters': value.parameters,
      'profileParameters': value.profileParameters,
      'order': OrderToJSON(value.order),
      'product': ProductToJSON(value.product)
    };
  }

  function ScreenFromJSON(json) {
    return ScreenFromJSONTyped(json);
  }

  function ScreenFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'width': !exists(json, 'width') ? undefined : json['width'],
      'height': !exists(json, 'height') ? undefined : json['height'],
      'colorDepth': !exists(json, 'colorDepth') ? undefined : json['colorDepth'],
      'pixelRatio': !exists(json, 'pixelRatio') ? undefined : json['pixelRatio'],
      'orientation': !exists(json, 'orientation') ? undefined : ScreenOrientationTypeFromJSON(json['orientation'])
    };
  }

  function ScreenToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'width': value.width,
      'height': value.height,
      'colorDepth': value.colorDepth,
      'pixelRatio': value.pixelRatio,
      'orientation': ScreenOrientationTypeToJSON(value.orientation)
    };
  }

  var ScreenOrientationType;

  (function (ScreenOrientationType) {
    ScreenOrientationType["Portrait"] = "portrait";
    ScreenOrientationType["Landscape"] = "landscape";
  })(ScreenOrientationType || (ScreenOrientationType = {}));

  function ScreenOrientationTypeFromJSON(json) {
    return ScreenOrientationTypeFromJSONTyped(json);
  }

  function ScreenOrientationTypeFromJSONTyped(json, ignoreDiscriminator) {
    return json;
  }

  function ScreenOrientationTypeToJSON(value) {
    return value;
  }

  function TelemetryFromJSON(json) {
    return TelemetryFromJSONTyped(json);
  }

  function TelemetryFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'entries': !exists(json, 'entries') ? undefined : json['entries'].map(TelemetryEntryFromJSON)
    };
  }

  function TelemetryToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'entries': value.entries === undefined ? undefined : value.entries.map(TelemetryEntryToJSON)
    };
  }

  function TelemetryEntryFromJSON(json) {
    return TelemetryEntryFromJSONTyped(json);
  }

  function TelemetryEntryFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'requestId': !exists(json, 'requestId') ? undefined : json['requestId'],
      'timestamp': !exists(json, 'timestamp') ? undefined : json['timestamp'],
      'mode': !exists(json, 'mode') ? undefined : ExecutionModeFromJSON(json['mode']),
      'execution': !exists(json, 'execution') ? undefined : json['execution'],
      'parsing': !exists(json, 'parsing') ? undefined : json['parsing'],
      'features': !exists(json, 'features') ? undefined : TelemetryFeaturesFromJSON(json['features']),
      'request': !exists(json, 'request') ? undefined : TelemetryRequestFromJSON(json['request']),
      'telemetryServerToken': !exists(json, 'telemetryServerToken') ? undefined : json['telemetryServerToken']
    };
  }

  function TelemetryEntryToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'requestId': value.requestId,
      'timestamp': value.timestamp,
      'mode': ExecutionModeToJSON(value.mode),
      'execution': value.execution,
      'parsing': value.parsing,
      'features': TelemetryFeaturesToJSON(value.features),
      'request': TelemetryRequestToJSON(value.request),
      'telemetryServerToken': value.telemetryServerToken
    };
  }

  function TelemetryFeaturesFromJSON(json) {
    return TelemetryFeaturesFromJSONTyped(json);
  }

  function TelemetryFeaturesFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'decisioningMethod': !exists(json, 'decisioningMethod') ? undefined : DecisioningMethodFromJSON(json['decisioningMethod']),
      'executeMboxCount': !exists(json, 'executeMboxCount') ? undefined : json['executeMboxCount'],
      'executePageLoad': !exists(json, 'executePageLoad') ? undefined : json['executePageLoad'],
      'prefetchMboxCount': !exists(json, 'prefetchMboxCount') ? undefined : json['prefetchMboxCount'],
      'prefetchPageLoad': !exists(json, 'prefetchPageLoad') ? undefined : json['prefetchPageLoad'],
      'prefetchViewCount': !exists(json, 'prefetchViewCount') ? undefined : json['prefetchViewCount']
    };
  }

  function TelemetryFeaturesToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'decisioningMethod': DecisioningMethodToJSON(value.decisioningMethod),
      'executeMboxCount': value.executeMboxCount,
      'executePageLoad': value.executePageLoad,
      'prefetchMboxCount': value.prefetchMboxCount,
      'prefetchPageLoad': value.prefetchPageLoad,
      'prefetchViewCount': value.prefetchViewCount
    };
  }

  function TelemetryRequestFromJSON(json) {
    return TelemetryRequestFromJSONTyped(json);
  }

  function TelemetryRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'dns': !exists(json, 'dns') ? undefined : json['dns'],
      'tls': !exists(json, 'tls') ? undefined : json['tls'],
      'timeToFirstByte': !exists(json, 'timeToFirstByte') ? undefined : json['timeToFirstByte'],
      'download': !exists(json, 'download') ? undefined : json['download'],
      'responseSize': !exists(json, 'responseSize') ? undefined : json['responseSize']
    };
  }

  function TelemetryRequestToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'dns': value.dns,
      'tls': value.tls,
      'timeToFirstByte': value.timeToFirstByte,
      'download': value.download,
      'responseSize': value.responseSize
    };
  }

  function TraceFromJSON(json) {
    return TraceFromJSONTyped(json);
  }

  function TraceFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'authorizationToken': json['authorizationToken'],
      'usage': !exists(json, 'usage') ? undefined : json['usage']
    };
  }

  function TraceToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'authorizationToken': value.authorizationToken,
      'usage': value.usage
    };
  }

  function ViewFromJSON(json) {
    return ViewFromJSONTyped(json);
  }

  function ViewFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'name': !exists(json, 'name') ? undefined : json['name'],
      'key': !exists(json, 'key') ? undefined : json['key'],
      'options': !exists(json, 'options') ? undefined : json['options'].map(OptionFromJSON),
      'metrics': !exists(json, 'metrics') ? undefined : json['metrics'].map(MetricFromJSON),
      'analytics': !exists(json, 'analytics') ? undefined : AnalyticsResponseFromJSON(json['analytics']),
      'state': !exists(json, 'state') ? undefined : json['state'],
      'trace': !exists(json, 'trace') ? undefined : json['trace']
    };
  }

  function ViewRequestFromJSON(json) {
    return ViewRequestFromJSONTyped(json, false);
  }

  function ViewRequestFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return _objectSpread2(_objectSpread2({}, RequestDetailsFromJSONTyped(json, ignoreDiscriminator)), {}, {
      'name': !exists(json, 'name') ? undefined : json['name'],
      'key': !exists(json, 'key') ? undefined : json['key']
    });
  }

  function ViewRequestToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return _objectSpread2(_objectSpread2({}, RequestDetailsToJSON(value)), {}, {
      'name': value.name,
      'key': value.key
    });
  }

  function VisitorIdFromJSON(json) {
    return VisitorIdFromJSONTyped(json);
  }

  function VisitorIdFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'tntId': !exists(json, 'tntId') ? undefined : json['tntId'],
      'thirdPartyId': !exists(json, 'thirdPartyId') ? undefined : json['thirdPartyId'],
      'marketingCloudVisitorId': !exists(json, 'marketingCloudVisitorId') ? undefined : json['marketingCloudVisitorId'],
      'customerIds': !exists(json, 'customerIds') ? undefined : json['customerIds'].map(CustomerIdFromJSON)
    };
  }

  function VisitorIdToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'tntId': value.tntId,
      'thirdPartyId': value.thirdPartyId,
      'marketingCloudVisitorId': value.marketingCloudVisitorId,
      'customerIds': value.customerIds === undefined ? undefined : value.customerIds.map(CustomerIdToJSON)
    };
  }

  function WindowFromJSON(json) {
    return WindowFromJSONTyped(json);
  }

  function WindowFromJSONTyped(json, ignoreDiscriminator) {
    if (json === undefined || json === null) {
      return json;
    }

    return {
      'width': !exists(json, 'width') ? undefined : json['width'],
      'height': !exists(json, 'height') ? undefined : json['height']
    };
  }

  function WindowToJSON(value) {
    if (value === undefined) {
      return undefined;
    }

    if (value === null) {
      return null;
    }

    return {
      'width': value.width,
      'height': value.height
    };
  }

  function OneOfstringobjectarrayFromJSON(value) {
    return value;
  }

  class DeliveryApi extends BaseAPI {
    async executeRaw(requestParameters) {
      if (requestParameters.imsOrgId === null || requestParameters.imsOrgId === undefined) {
        throw new RequiredError('imsOrgId', 'Required parameter requestParameters.imsOrgId was null or undefined when calling execute.');
      }

      if (requestParameters.sessionId === null || requestParameters.sessionId === undefined) {
        throw new RequiredError('sessionId', 'Required parameter requestParameters.sessionId was null or undefined when calling execute.');
      }

      if (requestParameters.deliveryRequest === null || requestParameters.deliveryRequest === undefined) {
        throw new RequiredError('deliveryRequest', 'Required parameter requestParameters.deliveryRequest was null or undefined when calling execute.');
      }

      const queryParameters = {};

      if (requestParameters.imsOrgId !== undefined) {
        queryParameters['imsOrgId'] = requestParameters.imsOrgId;
      }

      if (requestParameters.sessionId !== undefined) {
        queryParameters['sessionId'] = requestParameters.sessionId;
      }

      if (requestParameters.version !== undefined) {
        queryParameters['version'] = requestParameters.version;
      }

      const headerParameters = {};
      headerParameters['Content-Type'] = 'application/json';
      const response = await this.request({
        path: `/rest/v1/delivery`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: DeliveryRequestToJSON(requestParameters.deliveryRequest)
      });
      return new JSONApiResponse(response, jsonValue => DeliveryResponseFromJSON(jsonValue));
    }

    async execute(imsOrgId, sessionId, deliveryRequest, version) {
      const response = await this.executeRaw({
        imsOrgId: imsOrgId,
        sessionId: sessionId,
        deliveryRequest: deliveryRequest,
        version: version
      });
      return await response.value();
    }

  }

  var name = "@adobe/target-nodejs-sdk";
  var version = "2.4.2";
  var description = "Adobe Target Node.js SDK, Delivery API client";
  var main = "dist/targetclient.server.js";
  var browser = "dist/targetclient.browser.js";
  var module = "src/index.js";
  var engines = {
  	node: ">=8.16.0"
  };
  var files = [
  	"dist/*.js",
  	"src/**/!(*.spec).js",
  	"*.md",
  	"LICENSE*"
  ];
  var publishConfig = {
  	access: "public"
  };
  var scripts = {
  	clean: "rimraf dist",
  	prebuild: "npm run clean && npm run format && npm run lint",
  	build: "NODE_ENV=production rollup -c rollup.config.js",
  	postbuild: "cp dist/targetclient.browser* demo/assets",
  	www: "npm run build && node ./sample/server.js",
  	pretest: "npm run format && npm run lint",
  	test: "NODE_ENV=development jest",
  	coverage: "nyc --reporter=lcov --reporter=text-summary npm run test",
  	"lint-src": "./node_modules/.bin/eslint src/**",
  	"lint-test": "./node_modules/.bin/eslint test/**",
  	lint: "npm run lint-src && npm run lint-test",
  	format: "prettier '**/*.js' '**/*.json' --write --config '../../.prettierrc.json' --ignore-path '../../.prettierignore'",
  	prepack: "for file in `cat packfiles.txt`; do cp \"../../$file\" .; done",
  	postpack: "for file in `cat packfiles.txt`; do rm \"$file\"; done",
  	prepublishOnly: "echo //${NPM_REGISTRY}/:_authToken=${NPM_AUTH_TOKEN} > .npmrc"
  };
  var repository = {
  	type: "git",
  	url: "git@github.com:adobe/target-nodejs-sdk.git"
  };
  var keywords = [
  	"NodeJS",
  	"Server",
  	"API",
  	"Adobe",
  	"Target",
  	"MCID",
  	"Visitor",
  	"Delivery"
  ];
  var author = "Adobe Systems Inc.";
  var license = "Apache-2.0";
  var devDependencies = {
  	"@adobe/target-decisioning-engine": "^1.9.2",
  	"@adobe/target-tools": "^1.7.2",
  	"@babel/plugin-transform-regenerator": "^7.8.3",
  	"@babel/preset-env": "^7.9.5",
  	"@lwc/eslint-plugin-lwc": "^0.10.0",
  	"@rollup/plugin-commonjs": "^11.0.1",
  	"@rollup/plugin-json": "^4.0.1",
  	"@rollup/plugin-node-resolve": "^7.0.0",
  	ajv: "^5.5.2",
  	"cookie-parser": "^1.4.4",
  	"core-js": "^3.6.5",
  	eslint: "^8.24.0",
  	"eslint-config-airbnb-base": "^15.0.0",
  	"eslint-config-prettier": "^8.5.0",
  	"eslint-plugin-import": "^2.26.0",
  	"eslint-plugin-jest": "^27.1.0",
  	"eslint-plugin-prettier": "^4.2.1",
  	express: "^4.17.1",
  	jest: "^26.6.3",
  	"jest-fetch-mock": "^3.0.3",
  	mockdate: "^2.0.5",
  	nyc: "^15.1.0",
  	prettier: "^2.1.2",
  	rimraf: "^3.0.2",
  	rollup: "^1.17.0",
  	"rollup-plugin-babel": "^4.3.3",
  	"rollup-plugin-license": "^2.8.1",
  	"rollup-plugin-visualizer": "^3.3.2"
  };
  var dependencies = {
  	"@adobe-mcid/visitor-js-server": "^2.0.0",
  	"fast-text-encoding": "^1.0.3",
  	"form-data": "^3.0.0",
  	"http-status-codes": "^1.4.0",
  	"whatwg-fetch": "^3.0.0"
  };
  var packageInfo = {
  	name: name,
  	version: version,
  	description: description,
  	main: main,
  	browser: browser,
  	module: module,
  	engines: engines,
  	files: files,
  	publishConfig: publishConfig,
  	scripts: scripts,
  	repository: repository,
  	keywords: keywords,
  	author: author,
  	license: license,
  	devDependencies: devDependencies,
  	dependencies: dependencies
  };

  const SCHEME = {
    HTTP: "http://",
    HTTPS: "https://"
  };
  const AUTH_STATE = {
    0: AuthenticatedState$1.Unknown,
    1: AuthenticatedState$1.Authenticated,
    2: AuthenticatedState$1.LoggedOut
  };
  const EDGE_CLUSTER_PREFIX = "mboxedge";
  const HOST = "tt.omtrdc.net";
  const SESSION_ID_MAX_AGE = 1860;
  const DEVICE_ID_MAX_AGE = 63244800;
  const LOCATION_HINT_MAX_AGE = 1860;
  const PACKAGE_VERSION = packageInfo.version;
  DeliveryApi.prototype.decisioningMethod = DECISIONING_METHOD.SERVER_SIDE;
  function extractClusterFromDeviceId(id) {
    if (isEmptyString(id)) {
      return null;
    }

    const parts = id.split(".");

    if (parts.length !== 2 || !parts[1]) {
      return null;
    }

    const nodeDetails = parts[1].split("_");

    if (nodeDetails.length !== 2 || !nodeDetails[0]) {
      return null;
    }

    return nodeDetails[0];
  }
  function getCluster(deviceId, cluster) {
    return extractClusterFromDeviceId(deviceId) || cluster;
  }
  function getDeviceId(cookies) {
    const cookie = cookies[DEVICE_ID_COOKIE] || {};
    const {
      value
    } = cookie;

    if (isEmptyString(value)) {
      return undefined;
    }

    return value;
  }
  function getSessionId(cookies, userSessionId) {
    let uuidMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : uuid;
    const cookie = cookies[SESSION_ID_COOKIE] || {};
    const {
      value
    } = cookie;

    if (isNonEmptyString(value)) {
      return value;
    }

    if (userSessionId) {
      return userSessionId;
    }

    return uuidMethod();
  }
  function getTargetHost(serverDomain, cluster, client, secure) {
    const schemePrefix = secure === false ? SCHEME.HTTP : SCHEME.HTTPS;

    if (isNonEmptyString(cluster)) {
      return `${schemePrefix}${EDGE_CLUSTER_PREFIX}${cluster}.${HOST}`;
    }

    if (isNonEmptyString(serverDomain)) {
      return `${schemePrefix}${serverDomain}`;
    }

    return `${schemePrefix}${client}.${HOST}`;
  }
  function createHeaders() {
    let uuidMethod = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : uuid;
    return {
      "Content-Type": "application/json",
      "X-EXC-SDK": "AdobeTargetNode",
      "X-EXC-SDK-Version": PACKAGE_VERSION,
      "X-Request-Id": uuidMethod()
    };
  }

  function getMarketingCloudVisitorId(visitor) {
    const visitorValues = visitor.getVisitorValues();
    const {
      MCMID
    } = visitorValues;
    return MCMID;
  }

  function getVisitorCustomerIds(visitor) {
    const visitorState = visitor.getState();
    const firstOrganizationState = visitorState[Object.keys(visitorState)[0]];
    return firstOrganizationState.customerIDs;
  }

  function getCustomerIds(customerIds, visitor) {
    const visitorCustomerIds = getVisitorCustomerIds(visitor);

    if (isEmptyObject(visitorCustomerIds)) {
      return customerIds;
    }

    const convertedIds = Object.keys(visitorCustomerIds).reduce((acc, key) => {
      const value = visitorCustomerIds[key];

      if (value) {
        let item;

        if (isObject$1(value)) {
          item = CustomerIdFromJSON({
            id: value.id || undefined,
            integrationCode: key || undefined,
            authenticatedState: AUTH_STATE[value.authState] || undefined
          });
        } else {
          item = CustomerIdFromJSON({
            id: value,
            integrationCode: key || undefined,
            authenticatedState: AUTH_STATE["0"]
          });
        }

        acc.push(item);
      }

      return acc;
    }, []);

    if (!convertedIds.length) {
      return customerIds;
    }

    return convertedIds.concat(customerIds || []);
  }

  function createVisitorId() {
    let id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let options = arguments.length > 1 ? arguments[1] : undefined;
    const {
      deviceId,
      visitor
    } = options;
    const {
      tntId = deviceId,
      thirdPartyId,
      marketingCloudVisitorId = getMarketingCloudVisitorId(visitor),
      customerIds
    } = id;
    const mergedCustomerIds = getCustomerIds(customerIds, visitor);
    const result = VisitorIdFromJSON({
      tntId: isNonEmptyString(tntId) ? tntId : undefined,
      thirdPartyId: isNonEmptyString(thirdPartyId) ? thirdPartyId : undefined,
      marketingCloudVisitorId: isNonEmptyString(marketingCloudVisitorId) ? marketingCloudVisitorId : undefined,
      customerIds: isNonEmptyArray(mergedCustomerIds) ? mergedCustomerIds : undefined
    });
    return isNonEmptyObject(result) ? result : undefined;
  }

  function createContext() {
    let context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const result = ContextFromJSON(_objectSpread2({
      timeOffsetInMinutes: getTimezoneOffset()
    }, context));

    if (Object.keys(ChannelType$1).includes(result.channel)) {
      return context;
    }

    result.channel = ChannelType$1.Web;
    return result;
  }

  function isCurrentSupplementalDataID(supplementalDataId, visitor) {
    const visitorState = visitor.getState();
    const firstOrganizationState = visitorState[Object.keys(visitorState)[0]];
    return isNonEmptyObject(firstOrganizationState.sdid) && firstOrganizationState.sdid.supplementalDataIDCurrent === supplementalDataId;
  }

  function createSupplementalDataId(analytics, options) {
    const {
      visitor,
      consumerId = DEFAULT_GLOBAL_MBOX
    } = options;
    const {
      supplementalDataId
    } = analytics;

    if (isCurrentSupplementalDataID(supplementalDataId, visitor)) {
      return supplementalDataId;
    }

    return visitor.getSupplementalDataID(consumerId);
  }

  function createAnalytics() {
    let analytics = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let options = arguments.length > 1 ? arguments[1] : undefined;
    return AnalyticsRequestFromJSON({
      logging: isNonEmptyString(analytics.logging) ? analytics.logging : LoggingType.ServerSide,
      supplementalDataId: createSupplementalDataId(analytics, options),
      trackingServer: isNonEmptyString(analytics.trackingServer) ? analytics.trackingServer : undefined,
      trackingServerSecure: isNonEmptyString(analytics.trackingServerSecure) ? analytics.trackingServerSecure : undefined
    });
  }

  function getLocationHint(locationHintString) {
    const hintNumber = parseInt(locationHintString, 10);
    return !isNaN(hintNumber) ? hintNumber : undefined; // eslint-disable-line no-restricted-globals
  }

  function createAudienceManager() {
    let audienceManager = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let options = arguments.length > 1 ? arguments[1] : undefined;
    const {
      visitor
    } = options;
    const visitorValues = visitor.getVisitorValues() || {};
    const {
      locationHint = getLocationHint(visitorValues.MCAAMLH),
      blob = visitorValues.MCAAMB
    } = audienceManager;
    const result = AudienceManagerFromJSON({
      locationHint,
      blob
    });
    return isNonEmptyObject(result) ? result : undefined;
  }

  function createExperienceCloud() {
    let experienceCloud = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let options = arguments.length > 1 ? arguments[1] : undefined;
    const {
      analytics,
      audienceManager
    } = experienceCloud;
    const createdAudienceManager = createAudienceManager(audienceManager, options);
    return ExperienceCloudFromJSON({
      analytics: createAnalytics(analytics, options),
      audienceManager: createdAudienceManager || undefined
    });
  }

  const validMbox = (mbox, logger) => {
    const result = isNonEmptyObject(mbox) && isNonEmptyString(mbox.name);

    if (!result) {
      logger.error(Messages$1.MBOX_INVALID, mbox);
    }

    return result;
  };

  function createMboxes(mboxes, logger) {
    if (isEmptyArray(mboxes)) {
      return undefined;
    }

    const resultMboxes = mboxes.filter(mbox => validMbox(mbox, logger)).map((mbox, index) => {
      const result = MboxRequestFromJSON(mbox);
      result.name = mbox.name;

      if (isNumber(mbox.index)) {
        result.index = mbox.index;
      } else {
        result.index = index;
      }

      return result;
    });
    return isNonEmptyArray(resultMboxes) ? resultMboxes : undefined;
  }

  function createViews(views) {
    if (isEmptyArray(views)) {
      return undefined;
    }

    const resultViews = views.map(view => {
      const result = ViewRequestFromJSON(view);

      if (isNonEmptyString(view.name)) {
        result.name = view.name;
      }

      if (isNonEmptyString(view.key)) {
        result.key = view.key;
      }

      return result;
    });
    return isNonEmptyArray(resultViews) ? resultViews : undefined;
  }

  function createExecute(execute, logger) {
    if (isEmptyObject(execute)) {
      return undefined;
    }

    const {
      pageLoad,
      mboxes
    } = execute;

    if (!isObject$1(pageLoad) && isEmptyArray(mboxes)) {
      return undefined;
    }

    return new ExecuteRequestFromJSON({
      pageLoad: isObject$1(pageLoad) ? RequestDetailsFromJSON(pageLoad) : undefined,
      mboxes: isNonEmptyArray(mboxes) ? createMboxes(mboxes, logger) : undefined
    });
  }

  function createPrefetch(prefetch, logger) {
    if (isEmptyObject(prefetch)) {
      return undefined;
    }

    const {
      pageLoad,
      views,
      mboxes
    } = prefetch;

    if (!isObject$1(pageLoad) && isEmptyArray(views) && isEmptyArray(mboxes)) {
      return undefined;
    }

    return PrefetchRequestFromJSON({
      pageLoad: isObject$1(pageLoad) ? RequestDetailsFromJSON(pageLoad) : undefined,
      views: isNonEmptyArray(views) ? createViews(views) : undefined,
      mboxes: isNonEmptyArray(mboxes) ? createMboxes(mboxes, logger) : undefined
    });
  }

  const validNotification = (notification, logger) => {
    const result = isNonEmptyObject(notification) && isNonEmptyString(notification.id) && isNumber(notification.timestamp) && Object.values(MetricType$1).includes(notification.type);

    if (!result) {
      logger.error(Messages$1.NOTIFICATION_INVALID, notification);
    }

    return result;
  };

  function createNotifications(notifications, logger) {
    if (isEmptyArray(notifications)) {
      return undefined;
    }

    const resultNotifications = notifications.filter(notification => validNotification(notification, logger)).map(notification => {
      const {
        id,
        type,
        timestamp,
        impressionId,
        tokens,
        mbox,
        view
      } = notification;
      const result = NotificationFromJSON(notification);
      result.id = id;
      result.type = type;
      result.timestamp = timestamp;

      if (isNonEmptyString(impressionId)) {
        result.impressionId = impressionId;
      }

      if (isNonEmptyArray(tokens)) {
        result.tokens = tokens;
      }

      if (isNonEmptyObject(mbox)) {
        result.mbox = mbox;
      }

      if (isNonEmptyObject(view)) {
        result.view = view;
      }

      return result;
    });
    return isNonEmptyArray(resultNotifications) ? resultNotifications : undefined;
  }

  function createProperty() {
    let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const {
      token
    } = property;

    if (isNonEmptyString(token)) {
      return PropertyFromJSON(property);
    }

    return undefined;
  }
  /**
   *
   * @param requestParam
   * @param options
   * @return { import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest }
   */


  function createDeliveryRequest(requestParam, options) {
    const {
      logger,
      uuidMethod = uuid
    } = options;
    const result = DeliveryRequestFromJSON(_objectSpread2({
      requestId: uuidMethod(),
      environmentId: options.environmentId
    }, requestParam));
    result.id = createVisitorId(result.id, options);
    result.property = createProperty(result.property);
    result.trace = TraceFromJSON(result.trace);
    result.context = createContext(result.context);
    result.experienceCloud = createExperienceCloud(result.experienceCloud, options);
    result.execute = createExecute(result.execute, logger);
    result.prefetch = createPrefetch(result.prefetch, logger);
    result.notifications = createNotifications(result.notifications, logger);
    removeEmptyKeys(result);
    return result;
  }
  /**
   *
   * @param fetchApi
   * @param host
   * @param headers
   * @param timeout
   * @return { import("@adobe/target-tools/delivery-api-client/runtime").Configuration }
   */

  function createConfiguration(fetchApi, host, headers, timeout) {
    return new Configuration({
      basePath: host,
      fetchApi,
      headers,
      timeout
    });
  }

  function createLocalDeliveryApi(decisioningEngine, visitor, targetLocationHint) {
    const localDeliveryApi = {
      // eslint-disable-next-line no-unused-vars
      execute: (organizationId, sessionId, deliveryRequest, atjsVersion) => {
        if (isUndefined(decisioningEngine)) {
          return Promise.reject(new Error(DECISIONING_ENGINE_NOT_READY));
        }

        return decisioningEngine.getOffers({
          targetLocationHint,
          request: deliveryRequest,
          sessionId,
          visitor
        });
      },
      decisioningMethod: DECISIONING_METHOD.ON_DEVICE
    };

    localDeliveryApi.withPostMiddleware = () => localDeliveryApi;

    return localDeliveryApi;
  }

  function createBeaconDeliveryApi(configuration) {
    return {
      execute: (organizationId, sessionId, deliveryRequest, atjsVersion) => {
        const query = {
          imsOrgId: organizationId,
          sessionId
        };

        if (isDefined(configuration.version)) {
          query.version = atjsVersion;
        }

        const queryString = configuration.queryParamsStringify(query);
        const success = executeSendBeacon(`${configuration.basePath}/rest/v1/delivery?${queryString}`, JSON.stringify(_objectSpread2(_objectSpread2({}, deliveryRequest), {}, {
          context: _objectSpread2(_objectSpread2({}, deliveryRequest.context), {}, {
            beacon: true
          })
        })));
        return success ? Promise.resolve() : Promise.reject();
      },
      decisioningMethod: DECISIONING_METHOD.SERVER_SIDE
    };
  }

  function createRemoteDeliveryApi(configuration, useBeacon) {
    return useBeacon && isBeaconSupported() ? createBeaconDeliveryApi(configuration) : new DeliveryApi(configuration);
  }
  /**
   * @param {import("@adobe/target-tools/delivery-api-client/runtime").Configuration} configuration
   * @param visitor VisitorId instance
   * @param { Boolean } useBeacon
   * @param decisioningMethod
   * @param { String } targetLocationHint
   * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest} deliveryRequest
   * @param decisioningEngine
   * */


  function createDeliveryApi(configuration, visitor) {
    let useBeacon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let decisioningMethod = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DECISIONING_METHOD.SERVER_SIDE;
    let targetLocationHint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : undefined;
    let deliveryRequest = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;
    let decisioningEngine = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : undefined;

    if (requiresDecisioningEngine(decisioningMethod)) {
      const decisioningDependency = decisioningEngine.hasRemoteDependency(deliveryRequest);

      if (decisioningMethod === DECISIONING_METHOD.HYBRID && decisioningDependency.remoteNeeded) {
        return createRemoteDeliveryApi(configuration, useBeacon);
      }

      return createLocalDeliveryApi(decisioningEngine, visitor, targetLocationHint);
    }

    return createRemoteDeliveryApi(configuration, useBeacon);
  }

  function getTargetCookie(sessionId, id) {
    const nowInSeconds = Math.ceil(Date.now() / 1000);
    const cookies = [];
    const {
      tntId
    } = id;
    cookies.push({
      name: SESSION_ID_COOKIE,
      value: sessionId,
      expires: nowInSeconds + SESSION_ID_MAX_AGE
    });

    if (tntId) {
      cookies.push({
        name: DEVICE_ID_COOKIE,
        value: tntId,
        expires: nowInSeconds + DEVICE_ID_MAX_AGE
      });
    }

    return createTargetCookie(cookies);
  }

  function extractClusterFromEdgeHost(host) {
    if (isEmptyString(host)) {
      return null;
    }

    const parts = host.split(".");

    if (parts.length !== 4 || !parts[0]) {
      return null;
    }

    return parts[0].replace(EDGE_CLUSTER_PREFIX, "");
  }

  function getTargetLocationHintCookie(requestCluster, edgeHost) {
    const hostCluster = extractClusterFromEdgeHost(edgeHost);
    const cluster = requestCluster || hostCluster;

    if (isEmptyString(cluster)) {
      return undefined;
    }

    return {
      name: LOCATION_HINT_COOKIE,
      value: cluster,
      maxAge: LOCATION_HINT_MAX_AGE
    };
  }
  function requestLocationHintCookie(targetClient, targetLocationHint) {
    return isDefined(targetLocationHint) ? Promise.resolve({
      targetLocationHintCookie: getTargetLocationHintCookie(targetLocationHint)
    }) : targetClient.getOffers({
      sessionId: "ping123",
      decisioningMethod: DECISIONING_METHOD.SERVER_SIDE,
      request: EMPTY_REQUEST
    }).catch(() => new Error(Messages$1.LOCATION_HINT_REQUEST_FAILED));
  }
  function preserveLocationHint(response) {
    if (isDefined(response.targetLocationHintCookie)) {
      this.config.targetLocationHint = response.targetLocationHintCookie.value;
    }

    return response;
  }

  function getAnalyticsFromObject() {
    let object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const {
      analytics
    } = object;
    return isNonEmptyObject(analytics) ? [analytics] : undefined;
  }

  function getAnalyticsFromArray() {
    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return flatten$1(array.map(getAnalyticsFromObject));
  }

  function getAnalyticsDetails(response) {
    const {
      execute = {},
      prefetch = {}
    } = response;

    if (isEmptyObject(execute) && isEmptyObject(prefetch)) {
      return undefined;
    }

    const executePageLoadAnalytics = getAnalyticsFromObject(execute.pageLoad);
    const executeMboxAnalytics = getAnalyticsFromArray(execute.mboxes);
    const prefetchPageLoadAnalytics = getAnalyticsFromObject(prefetch.pageLoad);
    const prefetchViewsAnalytics = getAnalyticsFromArray(prefetch.views);
    const prefetchMboxAnalytics = getAnalyticsFromArray(prefetch.mboxes);
    const result = flatten$1([executePageLoadAnalytics, executeMboxAnalytics, prefetchPageLoadAnalytics, prefetchViewsAnalytics, prefetchMboxAnalytics].filter(value => !!value));
    return isNonEmptyArray(result) ? result : undefined;
  }
  /**
   * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest} request Target Delivery API request, required
   * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryResponse").DeliveryResponse} response Target Delivery API response, required
   * @param decisioningMethod
   * @param decisioningEngine
   * */


  function getResponseMeta(request, response, decisioningMethod, decisioningEngine) {
    let {
      remoteMboxes = [],
      remoteViews = []
    } = response;
    delete response.remoteMboxes;
    delete response.remoteViews;

    if (decisioningEngine) {
      const decisioningDependency = decisioningEngine.hasRemoteDependency(request); // eslint-disable-next-line prefer-destructuring

      remoteMboxes = decisioningDependency.remoteMboxes; // eslint-disable-next-line prefer-destructuring

      remoteViews = decisioningDependency.remoteViews;
    }

    return {
      decisioningMethod,
      remoteMboxes,
      remoteViews
    };
  }

  function getTraceFromObject() {
    let object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const {
      trace
    } = object;
    return isNonEmptyObject(trace) ? [trace] : undefined;
  }

  function getTraceFromArray() {
    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return flatten$1(array.map(getTraceFromObject));
  }

  function getTraceDetails(response) {
    const {
      execute = {},
      prefetch = {}
    } = response;

    if (isEmptyObject(execute) && isEmptyObject(prefetch)) {
      return undefined;
    }

    const executePageLoadTrace = getTraceFromObject(execute.pageLoad);
    const executeMboxTrace = getTraceFromArray(execute.mboxes);
    const prefetchPageLoadTrace = getTraceFromObject(prefetch.pageLoad);
    const prefetchViewsTrace = getTraceFromArray(prefetch.views);
    const prefetchMboxTrace = getTraceFromArray(prefetch.mboxes);
    const result = flatten$1([executePageLoadTrace, executeMboxTrace, prefetchPageLoadTrace, prefetchViewsTrace, prefetchMboxTrace].filter(value => !!value));
    return isNonEmptyArray(result) ? result : undefined;
  }

  function getResponseTokensFromObject() {
    let object = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    const {
      options
    } = object;

    if (isEmptyArray(options)) {
      return [];
    }

    return options.map(option => option.responseTokens).filter(isNonEmptyObject);
  }

  function getResponseTokensFromArray() {
    let array = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    return flatten$1(array.map(getResponseTokensFromObject));
  }

  function getResponseTokens(response) {
    const {
      execute = {},
      prefetch = {}
    } = response;

    if (isEmptyObject(execute) && isEmptyObject(prefetch)) {
      return undefined;
    }

    const executePageLoadTokens = getResponseTokensFromObject(execute.pageLoad);
    const executeMboxTokens = getResponseTokensFromArray(execute.mboxes);
    const prefetchPageLoadTokens = getResponseTokensFromObject(prefetch.pageLoad);
    const prefetchViewsTokens = getResponseTokensFromArray(prefetch.views);
    const prefetchMboxTokens = getResponseTokensFromArray(prefetch.mboxes);
    const result = flatten$1([executePageLoadTokens, executeMboxTokens, prefetchPageLoadTokens, prefetchViewsTokens, prefetchMboxTokens]);
    return isNonEmptyArray(result) ? result : undefined;
  }
  /**
   * processResponse method
   * @param { string } sessionId
   * @param { string } cluster
   * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest} request Target Delivery API request
   * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryResponse").DeliveryResponse} response Target Delivery API response
   * @param {('on-device'|'server-side'|'hybrid')} decisioningMethod
   * @param { Object } decisioningEngine
   */


  function processResponse(sessionId, cluster, request, response) {
    let decisioningMethod = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : DECISIONING_METHOD.SERVER_SIDE;
    let decisioningEngine = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : undefined;
    const {
      id = {},
      edgeHost
    } = response;
    const result = {
      targetCookie: getTargetCookie(sessionId, id),
      targetLocationHintCookie: getTargetLocationHintCookie(cluster, edgeHost),
      analyticsDetails: getAnalyticsDetails(response),
      trace: getTraceDetails(response),
      responseTokens: getResponseTokens(response),
      meta: getResponseMeta(request, response, decisioningMethod, decisioningEngine),
      response
    };
    removeEmptyKeys(result);
    return result;
  }

  /* eslint-disable import/prefer-default-export */
  function executeDelivery(options, telemetryProvider, decisioningEngine) {
    const {
      visitor,
      config,
      logger,
      targetCookie,
      consumerId,
      request,
      useBeacon,
      createDeliveryApiMethod = createDeliveryApi
    } = options;
    const property = getProperty(config, request, logger);

    if (isDefined(property)) {
      request.property = property;
    }

    const {
      serverDomain,
      client,
      organizationId,
      timeout,
      secure,
      environmentId
    } = config;
    let {
      decisioningMethod
    } = config;
    const fetchWithRetry = getFetchWithRetry(config.fetchApi);
    const targetLocationHint = options.targetLocationHint || config.targetLocationHint;

    if (requiresDecisioningEngine(decisioningMethod) && !decisioningEngineReady(decisioningEngine)) {
      // fulfill the request remotely if hybrid execution mode and decisioning engine is unavailable
      if (decisioningMethod === DECISIONING_METHOD.HYBRID) {
        decisioningMethod = DECISIONING_METHOD.SERVER_SIDE;
      } else {
        return Promise.reject(new Error(DECISIONING_ENGINE_NOT_READY));
      }
    }

    const cookies = parseCookies(targetCookie);
    const deviceId = getDeviceId(cookies);
    const cluster = getCluster(deviceId, targetLocationHint);
    const host = getTargetHost(serverDomain, cluster, client, secure);
    const sessionId = getSessionId(cookies, options.sessionId);
    const headers = createHeaders();
    const requestOptions = {
      logger,
      visitor,
      deviceId,
      consumerId,
      environmentId,
      organizationId
    };
    let deliveryRequest = createDeliveryRequest(request, requestOptions);
    const configuration = createConfiguration(fetchWithRetry, host, headers, timeout);
    const deliveryMethod = createDeliveryApiMethod(configuration, visitor, useBeacon, decisioningMethod, targetLocationHint, deliveryRequest, decisioningEngine);

    if (deliveryMethod.decisioningMethod === DECISIONING_METHOD.SERVER_SIDE) {
      deliveryRequest = telemetryProvider.addTelemetryToDeliveryRequest(deliveryRequest);
    }

    logger.debug(Messages$1.REQUEST_SENT, deliveryMethod.decisioningMethod, host, JSON.stringify(deliveryRequest, null, 2));
    perfTool.timeStart(deliveryRequest.requestId);
    let timings;

    function collectRequestTimings(httpResponse) {
      const {
        response
      } = httpResponse;
      timings = response.timings;
    }

    return deliveryMethod.withPostMiddleware(collectRequestTimings).execute(organizationId, sessionId, deliveryRequest, config.version).then(function () {
      let response = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const executionTime = perfTool.timeEnd(deliveryRequest.requestId);
      perfTool.clearTiming(deliveryRequest.requestId);
      logger.debug(Messages$1.RESPONSE_RECEIVED, JSON.stringify(response, null, 2));
      const entry = {
        execution: executionTime
      };

      if (timings) {
        entry.parsing = timings.parsingTime;
        delete timings.parsingTime;
        entry.request = timings;
      }

      if (response.telemetryServerToken) {
        entry.telemetryServerToken = response.telemetryServerToken;
      }

      telemetryProvider.addDeliveryRequestEntry(deliveryRequest, entry, response, deliveryMethod.decisioningMethod);
      return Object.assign({
        visitorState: visitor.getState(),
        request: deliveryRequest
      }, processResponse(sessionId, cluster, deliveryRequest, response, deliveryMethod.decisioningMethod, decisioningEngine));
    });
  }

  /*
  Copyright 2019 Adobe. All rights reserved.
  This file is licensed to you under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License. You may obtain a copy
  of the License at http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed under
  the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
  OF ANY KIND, either express or implied. See the License for the specific language
  governing permissions and limitations under the License.
  */
  function validateClientOptions(options) {
    if (isEmptyObject(options)) {
      return Messages$1.OPTIONS_REQUIRED;
    }

    const {
      client,
      organizationId,
      decisioningMethod
    } = options;

    if (isEmptyString(client)) {
      return Messages$1.CLIENT_REQUIRED;
    }

    if (isEmptyString(organizationId)) {
      return Messages$1.ORG_ID_REQUIRED;
    }

    if (isDefined(decisioningMethod) && !Object.values(DECISIONING_METHOD).includes(decisioningMethod)) {
      return Messages$1.DECISIONING_METHOD_INVALID;
    }

    return null;
  }
  function validateGetOffersOptions(options) {
    if (isEmptyObject(options)) {
      return Messages$1.OPTIONS_REQUIRED;
    }

    const {
      request
    } = options;

    if (isEmptyObject(request)) {
      return Messages$1.REQUEST_REQUIRED;
    }

    const {
      execute,
      prefetch
    } = request;

    if (isNonEmptyObject(execute) && isUndefined(execute.pageLoad) && isEmptyArray(execute.mboxes)) {
      return Messages$1.EXECUTE_FIELDS_REQUIRED;
    }

    if (isNonEmptyObject(prefetch) && isUndefined(prefetch.pageLoad) && isEmptyArray(prefetch.views) && isEmptyArray(prefetch.mboxes)) {
      return Messages$1.PREFETCH_FIELDS_REQUIRED;
    }

    return null;
  }
  function validateSendNotificationsOptions(options, hasTelemetries) {
    if (isEmptyObject(options)) {
      return Messages$1.OPTIONS_REQUIRED;
    }

    const {
      request
    } = options;

    if (isEmptyObject(request)) {
      return Messages$1.REQUEST_REQUIRED;
    }

    const {
      notifications
    } = request;

    if (isEmptyArray(notifications) && !hasTelemetries) {
      return NOTIFICATIONS_REQUIRED;
    }

    return null;
  }

  /* eslint-disable import/prefer-default-export */
  const CLIENT_READY = "clientReady";

  const AMCV_PREFIX = "AMCV_";
  const DEFAULT_TIMEOUT$1 = 3000;
  function bootstrap(fetchApi) {
    const fetchImpl = getFetchApi(fetchApi);

    if (!fetchImpl) {
      throw new Error(Messages$1.FETCH_UNDEFINED);
    }

    class TargetClient {
      constructor(options) {
        if (!options || !options.internal) {
          throw new Error(Messages$1.PRIVATE_CONSTRUCTOR);
        }

        this.config = options;
        this.config.timeout = options.timeout || DEFAULT_TIMEOUT$1;
        this.logger = getLogger(options.logger);
        this.telemetryProvider = TelemetryProvider(options.telemetryEnabled, options.decisioningMethod);
        const eventEmitter = EventProvider(this.config.events).emit;

        if (requiresDecisioningEngine(options.decisioningMethod)) {
          Promise.all([requestLocationHintCookie(this, this.config.targetLocationHint), TargetDecisioningEngine({
            client: options.client,
            organizationId: options.organizationId,
            pollingInterval: options.pollingInterval,
            maximumWaitReady: options.maximumWaitReady,
            artifactFormat: options.artifactFormat,
            artifactLocation: options.artifactLocation,
            artifactPayload: options.artifactPayload,
            propertyToken: options.propertyToken,
            environment: options.environment,
            cdnEnvironment: options.cdnEnvironment,
            cdnBasePath: options.cdnBasePath,
            logger: this.logger,
            telemetryEnabled: options.telemetryEnabled,
            fetchApi: fetchImpl,
            eventEmitter,
            sendNotificationFunc: notificationOptions => this.sendNotifications(notificationOptions),
            parseDomainImpl: parseDomainPsl
          }, this.telemetryProvider)]) // eslint-disable-next-line no-unused-vars
          .then(_ref => {
            let [locationHintResponse, decisioningEngine] = _ref;
            this.decisioningEngine = decisioningEngine;
            eventEmitter(CLIENT_READY);
          }).catch(err => {
            this.logger.error(err.message);
          });
        } else {
          setTimeout(() => eventEmitter(CLIENT_READY), 100);
        }
      }
      /**
       * The TargetClient creation factory method
       * @param {Object} options Options map, required
       * @param {Function }options.fetchApi Fetch Implementation, optional
       * @param {String} options.client Target Client Id, required
       * @param {String} options.organizationId Target Organization Id, required
       * @param {Number} options.timeout Target request timeout in ms, default: 3000
       * @param {String} options.serverDomain Server domain, optional
       * @param {String} options.targetLocationHint Target Location Hint, optional
       * @param {boolean} options.secure Unset to enforce HTTP scheme, default: true
       * @param {Object} options.logger Replaces the default noop logger, optional
       * @param {('on-device'|'server-side'|'hybrid')} options.decisioningMethod The decisioning method, defaults to remote, optional
       * @param {Number} options.pollingInterval (Local Decisioning) Polling interval in ms, default: 30000
       * @param {Number} options.maximumWaitReady (Local Decisioning) The maximum amount of time (in ms) to wait for clientReady.  Default is to wait indefinitely.
       * @param {String} options.artifactLocation (Local Decisioning) Fully qualified url to the location of the artifact, optional
       * @param {import("@adobe/target-decisioning-engine/types/DecisioningArtifact").DecisioningArtifact} options.artifactPayload (Local Decisioning) A pre-fetched artifact, optional
       * @param {Number} options.environmentId The Target environment ID, defaults to production, optional
       * @param {String} options.environment The Target environment name, defaults to production, optional
       * @param {String} options.cdnEnvironment The CDN environment name, defaults to production, optional
       * @param {boolean} options.telemetryEnabled If set to false, telemetry data will not be sent to Adobe
       * @param {String} options.version The version number of at.js, optional
       * @param {String} options.propertyToken A property token used to limit the scope of evaluated target activities, optional
       * @param {Object.<String, Function>} options.events An object with event name keys and callback function values, optional
       */


      static create(options) {
        const error = validateClientOptions(options);

        if (error) {
          throw new Error(error);
        }

        return new TargetClient(Object.assign({
          internal: true,
          decisioningMethod: DECISIONING_METHOD.SERVER_SIDE,
          fetchApi: fetchImpl
        }, options));
      }
      /**
       * The TargetClient getOffers method
       * @param {Object} options
       * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest} options.request Target View Delivery API request, required
       * @param {String} options.visitorCookie VisitorId cookie, optional
       * @param {String} options.targetCookie Target cookie, optional
       * @param {String} options.targetLocationHint Target Location Hint, optional
       * @param {String} options.consumerId When stitching multiple calls, different consumerIds should be provided, optional
       * @param {Array}  options.customerIds An array of Customer Ids in VisitorId-compatible format, optional
       * @param {String} options.sessionId Session Id, used for linking multiple requests, optional
       * @param {Object} options.visitor Supply an external VisitorId instance, optional
       * @param {('on-device'|'server-side'|'hybrid')} options.decisioningMethod The execution mode, defaults to remote, optional
       * @returns Promise<TargetDeliveryResponse>
       */


      getOffers(options) {
        const error = validateGetOffersOptions(options);

        if (error) {
          return Promise.reject(new Error(error));
        }

        const visitor = createVisitor(options, this.config);
        const targetOptions = Object.assign({
          visitor,
          config: _objectSpread2(_objectSpread2({}, this.config), {}, {
            decisioningMethod: options.decisioningMethod || this.config.decisioningMethod
          }),
          logger: this.logger
        }, options);
        return executeDelivery(targetOptions, this.telemetryProvider, this.decisioningEngine).then(preserveLocationHint.bind(this));
      }
      /**
       * The TargetClient getAttributes method
       * @param {Array<String>} mboxNames A list of mbox names that contains JSON content attributes, required
       * @param {Object} options, required
       * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest} options.request Target View Delivery API request, required
       * @param {String} options.visitorCookie VisitorId cookie, optional
       * @param {String} options.targetCookie Target cookie, optional
       * @param {String} options.targetLocationHint Target Location Hint, optional
       * @param {String} options.consumerId When stitching multiple calls, different consumerIds should be provided, optional
       * @param {Array}  options.customerIds An array of Customer Ids in VisitorId-compatible format, optional
       * @param {String} options.sessionId Session Id, used for linking multiple requests, optional
       * @param {Object} options.visitor Supply an external VisitorId instance, optional
       * @param {('on-device'|'server-side'|'hybrid')} options.decisioningMethod The execution mode, defaults to remote, optional
       */


      getAttributes(mboxNames) {
        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        // eslint-disable-next-line no-param-reassign
        options.request = options.request || EMPTY_REQUEST;
        return this.getOffers(_objectSpread2(_objectSpread2({}, options), {}, {
          request: addMboxesToRequest(mboxNames, options.request, "execute")
        })).then(res => AttributesProvider(res));
      }
      /**
       * The TargetClient sendNotifications method
       * @param {Object} options
       * @param {import("@adobe/target-tools/delivery-api-client/models/DeliveryRequest").DeliveryRequest} options.request Target View Delivery API request, required
       * @param {String} options.visitorCookie VisitorId cookie, optional
       * @param {String} options.targetCookie Target cookie, optional
       * @param {String} options.targetLocationHint Target Location Hint, optional
       * @param {String} options.consumerId When stitching multiple calls, different consumerIds should be provided, optional
       * @param {Array}  options.customerIds An array of Customer Ids in VisitorId-compatible format, optional
       * @param {String} options.sessionId Session Id, used for linking multiple requests, optional
       * @param {Object} options.visitor Supply an external VisitorId instance, optional
       */


      sendNotifications(options) {
        const error = validateSendNotificationsOptions(options, this.telemetryProvider.hasEntries());

        if (error) {
          return Promise.reject(new Error(error));
        }

        const visitor = createVisitor(options, this.config);

        const targetOptions = _objectSpread2({
          visitor,
          config: _objectSpread2(_objectSpread2({}, this.config), {}, {
            decisioningMethod: DECISIONING_METHOD.SERVER_SIDE // execution mode for sending notifications must always be remote

          }),
          logger: this.logger,
          useBeacon: true
        }, options);

        return executeDelivery(targetOptions, this.telemetryProvider).then(preserveLocationHint.bind(this));
      }

      static getVisitorCookieName(orgId) {
        return AMCV_PREFIX + orgId;
      }

      static get TargetCookieName() {
        return TARGET_COOKIE;
      }

      static get TargetLocationHintCookieName() {
        return LOCATION_HINT_COOKIE;
      }

      static get AuthState() {
        return Visitor.AuthState;
      }

    }

    return TargetClient;
  }

  const TargetClient = bootstrap( // eslint-disable-next-line no-undef
  isDefined(window.fetch) ? // eslint-disable-next-line no-undef
  window.fetch.bind(window) : fetch);

  return TargetClient;

})));
//# sourceMappingURL=targetclient.browser.js.map
